{"version":3,"sources":["app/modules/admin/schedules/schedule-shift-input/schedule-formik-input.module.scss","app/modules/admin/appointments/date-selector/scheduling-date-selector.module.scss","app/shared/components/tables/k-table.module.scss","app/shared/components/primitives/containers/editable-avatar-img.module.scss","app/store/auth/types.ts","app/store/auth/actions.ts","app/api/common/session-storage.ts","app/store/auth/reducers.ts","app/shared/util/moment-helpers.ts","app/api/common/helpers.ts","app/api/common/clients/base-api.ts","app/api/common/clients/base-django-api.ts","app/api/common/parsers.ts","app/api/common/models.ts","app/api/shifts/parsers.ts","app/api/schedule/parsers.ts","app/api/employees/parsers.ts","app/api/employees/clients.ts","app/api/employees/requests.ts","app/api/users/parsers.ts","app/api/users/clients.ts","app/api/common/permissions/index.ts","app/api/users/requests.ts","app/api/auth/permissions.ts","app/api/auth/clients.ts","app/api/auth/util.ts","app/store/auth/sagas.ts","app/store/companies/types.ts","app/store/auth/selectors.ts","app/store/companies/actions.ts","app/api/appointments/models.ts","app/store/companies/reducers.ts","app/store/companies/selectors.ts","app/api/customers/parsers.ts","app/api/customers/clients.ts","app/api/services/parsers.ts","app/api/services/clients.ts","app/api/services/requests.ts","app/api/appointments/parsers.ts","app/api/appointments/clients.ts","app/api/appointments/requests.ts","app/api/requests/parsers.ts","app/api/requests/clients.ts","app/api/company-config/parsers.ts","app/api/companies/parsers.ts","app/api/services/models.ts","app/api/companies/clients.ts","app/store/ui/types.ts","app/store/companies/sagas.ts","app/store/ui/actions.ts","app/modules/auth/urls.ts","app/store/ui/reducers.ts","app/store/ui/selectors.ts","app/modules/admin/urls.ts","app/shared/components/flex/k-flex-spacer.tsx","app/shared/components/flex/k-flex-column.tsx","app/shared/components/flex/k-flex-row.tsx","app/shared/components/flex/k-flex-row-item.tsx","app/store/admin/common/adapter.ts","app/store/admin/appointments/reducers.ts","app/store/admin/customers/reducers.ts","app/store/admin/dashboard/state.ts","app/store/admin/dashboard/actions.ts","app/store/admin/dashboard/reducer.ts","app/api/scheduling-panels/clients.ts","app/store/admin/panels/reducers.ts","app/api/scheduling-panels/parsers.ts","app/store/admin/dashboard/selectors.ts","app/store/admin/employees/reducers.ts","app/api/permissions/parsers.ts","app/api/permissions/clients.ts","app/api/permissions/requests.ts","app/store/admin/permissionGroups/reducers.ts","app/store/admin/permissions/index.ts","app/api/schedule/clients.ts","app/store/users/types.ts","app/store/admin/schedules/reducers.ts","app/store/admin/serviceCategories/reducers.ts","app/store/admin/users/reducers.ts","app/store/users/actions.ts","app/store/users/reducers.ts","app/store/users/selectors.ts","app/store/users/sagas.ts","app/store/admin/services/reducers.ts","app/store/root-saga.ts","app/store/store.ts","app/shared/context-providers/auth-auto-login.tsx","app/shared/util/router-extensions.tsx","app/modules/companies/paths.ts","app/modules/employee/urls.ts","app/modules/users/urls.ts","app/shared/components/primitives/avatar-img.tsx","app/shared/components/primitives/k-icon.tsx","app/modules/core/navbar/app-navbar.tsx","app/modules/core/navbar/app-navbar-container.tsx","app/shared/components/primitives/buttons/k-button.tsx","app/shared/components/primitives/k-tooltip.tsx","app/shared/components/primitives/buttons/k-icon-button.tsx","app/shared/components/primitives/buttons/k-text-button.tsx","app/shared/components/primitives/buttons/k-rounded-button.tsx","app/shared/components/primitives/containers/k-page-container.tsx","app/shared/components/primitives/containers/k-show-on-hover-container.tsx","app/shared/components/primitives/containers/k-card.tsx","app/shared/components/primitives/containers/k-tree-view.tsx","app/modules/employee/employee-dashboard.tsx","app/modules/employee/employee-routes.tsx","app/shared/components/primitives/inputs/k-checkbox.tsx","app/shared/components/primitives/inputs/k-color-input.tsx","app/shared/components/primitives/inputs/k-date-input.tsx","app/shared/components/primitives/inputs/k-duration-input.tsx","app/shared/components/primitives/inputs/k-input.tsx","app/shared/components/primitives/inputs/k-multi-select-input.tsx","app/modules/admin/appointments/date-selector/scheduling-date-selector.tsx","app/modules/admin/appointments/employee-panel/hooks.ts","app/modules/admin/appointments/employee-panel/TimeLineContainer.tsx","app/shared/components/modal/k-modal.tsx","app/modules/admin/appointments/appointment-history-container.tsx","app/shared/util/time-formater.ts","app/shared/admin/admin-button.tsx","app/shared/components/modal/delete-confirmation-modal.tsx","app/shared/admin/delete-button.tsx","app/shared/admin/hooks.tsx","app/shared/components/forms/k-formik-error-handler.tsx","app/shared/components/primitives/k-currency.tsx","app/shared/components/primitives/forms/k-error-message.tsx","app/shared/components/forms/k-formik-cancel.tsx","app/shared/components/forms/k-formik-submit.tsx","app/shared/components/forms/k-formik-standard-buttons.tsx","app/shared/components/forms/k-formik-form.tsx","app/shared/util/string-extensions.ts","app/shared/components/forms/k-formik-input.tsx","app/modules/admin/customers/customer-upsert-form.tsx","app/shared/components/forms/k-formik-customer-input.tsx","app/shared/components/forms/k-formik-datetime-input.tsx","app/modules/admin/appointments/forms/customer-appointment-upsert-form.tsx","app/modules/admin/appointments/forms/appointment-upsert-form.tsx","app/modules/admin/appointments/scheduling-panels/scheduling-panel-form.tsx","app/modules/admin/appointments/scheduling-panels/scheduling-panels-selector.tsx","app/modules/admin/appointments/employee-panel/create-appointment-buttons.tsx","app/modules/admin/appointments/employee-panel/event-container.tsx","app/modules/admin/appointments/employee-panel/employee-panels-body-container.tsx","app/api/shifts/util.ts","app/shared/components/primitives/k-filler.tsx","app/modules/admin/appointments/employee-panel/employee-panel-headers-container.tsx","app/modules/admin/appointments/appointments-container.tsx","app/shared/components/tables/k-default-column-filter.tsx","app/shared/components/tables/k-table-body.tsx","app/shared/components/tables/k-table-header.tsx","app/shared/components/tables/k-table.tsx","app/shared/components/tables/k-text-column-filter.tsx","app/modules/admin/customers/customers-table.tsx","app/shared/admin/admin-list-edit-container.tsx","app/modules/admin/customers/customers-container.tsx","app/modules/admin/employees/employee-upsert-form.tsx","app/modules/admin/employees/services-card.tsx","app/modules/admin/employees/employee-row-expanded.tsx","app/shared/components/primitives/containers/editable-avatar-img.tsx","app/modules/admin/employees/employees-table.tsx","app/modules/admin/employees/employees-container.tsx","app/modules/admin/permissionGroups/permission-group-upsert-form.tsx","app/modules/admin/permissionGroups/permission-groups-table.tsx","app/modules/admin/permissionGroups/permission-groups-container.tsx","app/modules/admin/schedules/shift-cell.tsx","app/modules/admin/schedules/schedules-table.tsx","app/modules/admin/schedules/schedule-shift-input/schedule-formik-input.tsx","app/modules/admin/services/schedule-upsert-form.tsx","app/modules/admin/schedules/schedules-container.tsx","app/modules/admin/services/service-category-upsert-form.tsx","app/modules/admin/services/service-upsert-form.tsx","app/shared/components/primitives/KColorBox.tsx","app/shared/components/tables/k-select-column-filter.tsx","app/modules/admin/services/services-table.tsx","app/modules/admin/services/services-container.tsx","app/modules/admin/users/users-table.tsx","app/modules/admin/users/change-password-form.tsx","app/modules/admin/users/users-upsert-form.tsx","app/modules/admin/users/users-container.tsx","app/shared/components/dashboard/k-dashboard-content.tsx","app/shared/components/dashboard/k-dashboard-sidebar.tsx","app/shared/components/dashboard/k-dashboard-container.tsx","app/modules/admin/admin-routes.tsx","app/modules/companies/avatar/company-avatar.tsx","app/modules/users/bookings/event-details.tsx","app/modules/users/bookings/event-modal.tsx","app/modules/users/bookings/bookings-container.tsx","app/modules/users/users-routes.tsx","app/modules/auth/logout-container.tsx","app/api/auth/validations.ts","app/modules/auth/effects.ts","app/modules/auth/login/login-view.tsx","app/modules/auth/login/login-container.tsx","app/modules/auth/register-container.tsx","app/api/auth/parsers.ts","app/modules/auth/auth-routes.tsx","app/modules/auth/auth-container.tsx","app/modules/companies/cart/book-container.tsx","app/modules/companies/cart/cart-company-summary.tsx","app/modules/companies/cart/cart-request-summary.tsx","app/shared/components/grid/k-grid.tsx","app/modules/companies/cart/cart-container.tsx","app/api/billing/clients.ts","app/modules/billing/stripe-payment-form.tsx","app/modules/billing/stripe-container.tsx","app/modules/companies/checkout/checkout-container.tsx","app/modules/companies/company-services/company-services-item.tsx","app/modules/companies/company-services/company-services-list.tsx","app/modules/companies/companies-view.tsx","app/modules/companies/date-selector/date-selector-container.tsx","app/modules/companies/slots/slot-button.tsx","app/modules/companies/slots/slots-view.tsx","app/modules/companies/slots/slots-container.tsx","app/modules/companies/company-services/slots-for-service-modal.tsx","app/modules/companies/companies-container.tsx","app/modules/companies/companies-routes.tsx","app/modules/core/home/home-view.tsx","app/modules/core/home/home-container.tsx","app/app-routes.tsx","app/AppIntl.tsx","app/App.tsx","reportWebVitals.ts","app/shared/util/history.ts","app/api/common/clients/common-api.ts","index.tsx","app/external-apis/configure-stripe.ts","app/modules/admin/appointments/employee-panel/employee-panel.module.scss"],"names":["module","exports","ACTION_TYPES","setUser","user","action","SET_USER","setLoadingUser","createAction","SET_LOADING_USER","setToken","token","localStorage","setItem","getToken","getItem","removeToken","removeItem","isLoggedIn","initialState","apiError","loggedIn","loadingUser","stringToMoment","value","moment","utc","momentToIso","toISOString","convertMoment","params","result","Object","keys","forEach","prop","baseApiAxios","axios","create","baseModelRequest","baseUrl","adapter","get","filter","then","project","data","results","map","r","post","model","detail","id","patch","put","delete","personParser","firstName","lastName","email","phone","stringfy","toString","timeFromString","time","timeOfDay","hour","minute","substr","timeToString","t","timeToISOString","shiftParser","frames","f","start","end","startTod","endTod","name","timeFrameParser","length","reduce","p","c","scheduleParser","permissionModel","PermissionModel","schedule","mon","tue","wed","thu","fri","sat","sun","shifts","getShift","date","isoWeekday","shiftToUpsertShift","shift","frame","imageStorage","process","employeeParser","employee","private","photoUrl","profileImg","instagram","services","userEmployeeParser","adminEmployeeClient","uploadProfilePicture","file","formData","FormData","append","UpsertEmployeeRequestValidation","yup","shape","required","min","userParser","company","owner","verified","PermissionModels","adminUserClient","changePassword","PermissionType","UpsertUserRequestValidation","ChangeUserPasswordValidation","password1","password2","oneOf","userPassword","authApi","verifyEmail","key","authUrl","login","request","completeLogin","register","authenticateFacebook","accessToken","logout","whoAmI","catch","error","Promise","resolve","refreshAccessToken","refresh","access","refreshToken","hasPermission","type","app","groupprofile","getAppLabel","permissions","includes","requestLogin","requestFacebookLogin","authSaga","call","payload","LOGIN_REQUEST_SUCCESS","LOGIN_REQUEST_FAIL","REGISTER_REQUEST_SUCCESS","REGISTER_REQUEST_FAIL","FACEBOOK_LOGIN_REQUEST_SUCCESS","FACEBOOK_LOGIN_REQUEST_FAIL","takeEvery","LOGIN_REQUEST","REGISTER_REQUEST","FACEBOOK_LOGIN_REQUEST","selectLoggedIn","rootState","auth","selectApiError","selectUser","selectUserEmployee","createSelector","selectLoadingUser","EventType","companyDetailsRequestSuccess","COMPANY_DETAILS_REQUEST_SUCCESS","slotsRequestSuccess","slots","slotMap","slot","push","SLOTS_REQUEST_SUCCESS","setSelectedDate","selectedDate","SET_SELECTED_DATE","setCurrentRequest","SET_CURRENT_REQUEST","companyRequestCompleted","ownerId","selectedServiceId","selectedSlotId","startOf","currentRequest","currentRequestCompleted","selectOwnerId","companies","selectCompany","selectSlots","selectSelectedSlotId","selectSelectedDate","selectCurrentRequest","selectSelectedServiceId","selectServices","selectService","find","service","selectIsStoreReady","selectCartIsEmpty","itemsCount","selectCartIsLoadedAndEmpty","emptyCart","storeReady","customerParser","warning","customer","adminCustomerClient","serviceParser","duration","serviceCategoryParser","adminServiceClient","adminServiceCategoryClient","UpsertServiceRequestValidation","category","max","cost","description","color","UpsertServiceCategoryRequestValidation","appointmentParser","customerAppointmentParser","employeeEventParser","customerRequestAppointmentParser","status","internalNotes","CustomerRequestAppointment","customerNotes","companyName","CustomerAppointment","appointment","EmployeeEvent","appointmentHistoryParser","historyType","historyDate","historyUser","blankCustomerAppointment","employeeId","deleted","blankEmployeeEvent","adminUrl","adminAppointmentClient","history","createLock","updateLock","appointmentClient","UpsertCustomerAppointmentRequestValidation","UpsertEmployeeEventRequestValidation","requestParser","items","appointments","apt","hasOwnProperty","companyParser","k","accept","reject","companyConfigParser","config","companyDetailsParser","hasOtherCategory","serviceCategories","cat","servicecategory","avatar","employees","companyClient","fromName","slotsParams","clone","title","format","slotParser","requestsUrl","companyRequestClient","createAppointment","notes","complete","appointmentId","current","requestCompanyDetails","triggerCartRequestIfLoggedIn","requestCartForCompany","triggerSlotRequest","requestSlots","addOneDayToSelectedDate","subtractOneDayToSelectedDate","updateSelectedDate","requestAddAppointment","requestRemoveAppointment","requestAddNotes","requestCartConfirmation","companiesSaga","COMPANY_DETAILS_REQUEST_FAIL","select","companyId","CURRENT_CART_REQUEST","CURRENT_CART_REQUEST_SUCCESS","CURRENT_CART_REQUEST_FAIL","add","isMobile","endOf","SLOTS_REQUEST","SLOTS_REQUEST_FAIL","subtract","BOOK_SLOT_REQUEST_SUCCESS","BOOK_SLOT_REQUEST_FAIL","ADD_NOTES_REQUEST_SUCCESS","ADD_NOTES_REQUEST_FAIL","CONFIRM_CART_REQUEST_SUCCESS","CONFIRM_CART_REQUEST_FAIL","COMPANY_DETAILS_REQUEST","SET_SELECTED_SERVICE_ID","SELECTED_DATE_ADD_ONE","SELECTED_DATE_SUBTRACT_ONE","SELECTED_DATE_TODAY","BOOK_SLOT_REQUEST","DELETE_APPOINTMENT_REQUEST","ADD_NOTES_REQUEST","CONFIRM_CART_REQUEST","AUTH_ROUTES","setShowDashboardToggle","SET_SHOW_DASHBOARD_TOGGLE","showDashboardToggle","sidenavOpen","selectShowDashboardToggle","ui","selectSidenavOpen","ADMIN_ROUTES","KFlexSpacer","children","size","style","margin","KFlexColumn","justify","align","className","KFlexRow","flexWrap","rest","KFlexRowItem","grow","basisPercent","flexGrow","flex","kCreateBaseStore","sliceName","client","selector","initializeStore","fetchEntities","fetchEntitiesWithSetAll","createEntity","patchEntity","deleteEntity","sagas","createEntityAdapter","selectId","entity","sortComparer","a","b","localeCompare","actions","setEditMode","slice","createSlice","getInitialState","isInitialized","editMode","createdEntityId","reducers","upsertMany","setAll","upsertOne","removeOne","setInitialized","state","setApiError","setCreatedEntityId","adapterSelectors","getSelectors","selectors","selectByIds","selectEntities","ids","entities","selectIsInitialized","store","selectEditMode","selectCreatedEntity","undefined","reducer","adminAppointments","adminCustomers","adminDashboard","currentDate","selectedPanelId","panelHours","Array","from","slotSize","setCurrentDate","setSelectedPanelId","createReducer","builder","addCase","schedulingpanel","adminSchedulingPanels","baseSelector","selectCurrentDateString","selectCurrentDate","selectSelectedPanelId","selectSelectedPanel","schedulingPanelSelectors","selectById","selectPanelHours","selectSlotSize","adminEmployees","reducerActions","permissionParser","adminPermissionGroupClient","UpsertPermissionRequestValidation","adminPermissionGroups","adminPermissionsSagas","permissionSlice","initialized","setPermissions","adminPermissions","selectAll","permissionsActions","adminSchedules","adminServiceCategories","adminUsers","eventsRequest","EVENTS_REQUEST","eventsRequestSuccess","events","EVENTS_REQUEST_SUCCESS","setSelectedEvent","SET_SELECTED_EVENT","selectedEvent","selectStore","users","selectEvents","usersState","selectStart","selectEnd","selectSelectedEvent","requestEvents","userSaga","response","EVENTS_REQUEST_FAIL","adminServices","selectServicesWithCategories","serviceCategorySelectors","categories","s","selectServicesWithCategoriesByIds","serviceSelectors","rootSaga","all","fork","adminServiceSaga","adminServiceCategorySaga","adminEmployeeSaga","adminCustomerSaga","adminScheduleSaga","adminUserSaga","adminPermissionGroupSaga","adminAppointmentSaga","adminSchedulingPanelSaga","sagaMiddleware","createSagaMiddleware","configureStore","TOGGLE_DASHBOARD_SIDENAV","SET_SELECTED_SLOT_ID","adminDashboardReducer","appointmentReducer","schedulingPanelReducer","serviceReducer","serviceCategoryReducer","employeeReducer","customerReducer","scheduleReducer","userReducer","permissionGroupReducer","permissionReducer","middleware","run","useAppDispatch","useDispatch","useAppSelector","useSelector","AuthAutoLogin","dispatch","useEffect","useUserHasPermission","useQueryParams","URLSearchParams","useLocation","search","useKHistory","useHistory","pathWithParams","ProtectedRoute","path","component","permissionType","view","returnUrl","pathname","location","useCurrentUser","loading","Spinner","to","LOGIN","queryParams","url","prev","cur","i","encodeURI","createQueryString","companiesUrls","index","cart","book","checkout","EMPLOYEE_ROUTES","USER_ROUTES","AvatarImg","src","alt","avatarStyle","width","height","KIcon","icon","onClick","AppNavbar","cartIsEmpty","menuOpen","toggleMenu","showSidenavToggle","toggleSidenav","Navbar","light","expand","NavbarBrand","tag","Link","NavbarToggler","Collapse","isOpen","navbar","Nav","NavItem","NavLink","disabled","REGISTER","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","LOGOUT","AppNavbarContainer","useState","setIsOpen","KButton","props","Button","KTooltip","text","tooltipOpen","setTooltipOpen","Tooltip","placement","target","toggle","KIconButton","_uniqueId","KTextButton","KRoundedButton","KPageContainer","KShowOnHoverContainer","showContent","setShowContent","onMouseEnter","onMouseLeave","KCard","header","footer","maxWidth","mwUnit","maxHeight","mhUnit","hasShadow","hasBorder","bodiless","bodyStyle","overflow","KTreeView","renderComponent","Set","openOptions","setOpenOptions","option","has","EmployeeDashboardDatePicker","dateChange","timeSpan","startDate","setStartDate","endDate","setEndDate","week","dates","controlDate","isBefore","isSame","updateDates","toUpperCase","day","EmployeeScheduleView","Fragment","EmployeeDashboardAppointment","customerName","serviceName","EmployeeDashboard","setAppointments","from_date","to_date","res","EmployeeRoutes","KCheckbox","placeholder","checked","onChange","onBlur","Label","check","Input","KColorInput","KDateInput","useValue","isMoment","event","KDurationInput","onKeyUp","setTimeOfDay","handleChange","e","newValue","KInput","KMultiSelectInput","options","values","handleCheckboxChange","isOptionChecked","every","FormGroup","SchedulingDateSelector","adminDashboardSelectors","styles","dateSelectorContainer","adminDashboardActions","useSelectPanelEmployees","selectedPanel","employeeSelectors","useHoursConverter","hours","minutes","TimeLineContainer","isToday","momentIsToday","top","currentTimeLine","KModal","body","buttons","backdrop","scrollable","onCancel","Modal","ModalHeader","ModalBody","ModalFooter","button","AppointmentHistoryItem","timeFormatter","AppointmentHistoryContainer","onClose","AdminButton","change","iconType","iconColor","DeleteConfirmationModal","messageId","onConfirm","UseConfirmationModalWithDispatch","setId","modal","useConfirmationModal","DeleteButton","modelType","baseActions","setDeleteId","confirmDeleteModal","useEditModal","baseSelectors","EditContainer","selectedEntity","setSelectedEntity","createdEntity","onSubmit","useSelectAll","useInitializeEffect","KFormikErrorHandler","formik","useFormikContext","isArray","previousValue","currentValue","setFieldError","KCurrency","toFixed","KErrorMessage","message","KFormikCancel","KFormikSubmit","isBlock","isValid","KFormikStandardButtons","KFormikForm","initialValues","validationSchema","errors","Form","preventDefault","handleSubmit","camelCaseToWords","replace","charAt","KFormikInput","multiple","emptyOption","as","fieldMeta","getFieldMeta","fieldHelpers","getFieldHelpers","fieldClassName","touched","isCheckbox","inputType","React","fieldProps","inputAs","for","setValue","FormFeedback","CustomerUpsertForm","validation","KFormikCustomerInput","initialCustomer","setCustomer","customerSelectors","customerActions","openModal","createdCustomer","cacheOptions","defaultOptions","backspaceRemovesValue","defaultInputValue","getOptionValue","getOptionLabel","formatOptionLabel","selectedCustomer","loadOptions","KFormikDatetimeInput","inputProps","initialValue","getFieldProps","addHours","momentTime","useDateHelper","momentValue","setTime","FormikStartEndTimeInput","handleDateChange","startTime","handleStartTimeChange","handleEndDateChange","endTime","handleEndTimeChange","CustomerAppointmentUpsertForm","employeeServices","setEmployeeServices","employeeEntities","useEmployeeServices","serviceId","initialId","setInitialId","useUpdateEndTimeOnServiceChangeEffect","AppointmentUpsertForm","isAppointment","ignoreAvailability","customerAppointment","upsertCustomerAppointmentRequestParser","showHistory","setShowHistory","serviceActions","appointmentActions","SchedulingPanelForm","panel","employeeActions","SchedulingPanelsSelector","schedulingPanels","schedulingPanelActions","selectedIndex","setSelectedIndex","formModal","CreateAppointmentButtons","onCreateClick","selectedTime","Event","diff","backgroundColor","subTitle","panelEvent","EventsContainer","onSelect","appointmentSelectors","employeeAppointments","useMemo","PanelHours","minHeight","textAlign","position","borderRight","sideItem","EmployeePanelBody","scheduleSelectors","some","isAvailable","unavailableSlot","middleItem","EmployeePanelsBodyContainer","KFiller","boxSizing","EmployeePanelHeader","panelItem","EmployeePanelHeadersContainer","AppointmentsContainer","scheduleActions","useReloadAppointmentsEffect","KDefaultColumnFilter","KTableBody","getTableBodyProps","rows","prepareRow","visibleColumns","renderRowSubComponent","row","getToggleRowExpandedProps","getRowProps","cells","cell","verticalAlign","getCellProps","render","isExpanded","colSpan","KTableHeader","headerGroups","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","canFilter","KTable","columns","hover","stripped","extraPrepare","filterTypes","filterValue","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","useTable","autoResetFilters","useFilters","useExpanded","getTableProps","Table","fixedHeaders","striped","KTextColumnFilter","Header","setFilter","onChangeSideEffect","CustomersTable","buttonsColumn","accessor","original","AdminListEditContainer","ListContainer","Cell","CustomersContainer","EmployeeUpsertForm","schedules","serviceCategoryActions","bio","ServicesCard","serviceIds","EmployeeRowExpanded","EditableAvatarImg","modalOpen","setModalOpen","setFile","setError","imageUploader","withIcon","singleImage","withPreview","buttonText","files","pictures","imgExtension","maxFileSize","modalBody","btnOverlay","EmployeesTable","employeeReducerActions","handleFileSubmit","useCallback","EmployeesContainer","PermissionGroupUpsertForm","permissionGroup","permissionSelectors","PermissionGroupsTable","PermissionGroupsContainer","permissionGroupSelectors","permissionGroupActions","ShiftCell","SchedulesTable","ScheduleFrame","frameBox","ScheduleFormikInput","formikValues","formikHelpers","isModalOpen","setIsModalOpen","isMonday","lineCell","borderLeft","handleAddClick","newFrame","handleModalCancel","toDelete","splice","hourBox","hourCell","ScheduleUpsertForm","SchedulesContainer","ServiceCategoryUpsertForm","ServiceUpsertForm","isFrom","sc","KColorBox","minWidth","borderRadius","KSelectColumnFilter","preFilteredRows","rowOptions","opt","usedOptions","ServicesTable","serviceCategoryDict","ServicesContainer","UsersTable","ChangePasswordForm","ChangePasswordContainer","form","console","log","block","UsersUpsertForm","groups","UsersContainer","userSelectors","userActions","KDashboardContent","KDashboardSidebarLink","KDashboardSidebar","links","KDashboardContainer","AdminRoutes","intl","useIntl","formatMessage","CompanyAvatar","address","EventDetails","price","EventModal","closeClick","postBookMessage","BookingsContainer","initialDate","validOrToday","toDate","localizer","momentLocalizer","startAccessor","endAccessor","onRangeChange","range","onSelectEvent","UsersRoutes","LogoutContainer","LoginRequestValidation","Yup","RegisterRequestValidation","useRedirectIfLoggedInEffect","redirectUrl","LoginView","LoginContainer","password","RegisterContainer","AuthRoutes","AuthContainer","BookContainer","bookSlotRequest","CartCompanySummary","proceedToCheckoutClick","setNotes","preBookWarn","CartRequestSummary","showDelete","deleteClick","isEmpty","requestItem","total","KGrid","smSize","mdSize","lgSize","xlSize","node","CartContainer","cartIsLoadedAndEmpty","deleteAppointmentRequest","addNotesRequest","billingClient","requestId","StripePaymentForm","stripeSecret","onSuccess","stripe","useStripe","elements","useElements","errorMessage","setErrorMessage","isProcessing","setIsProcessing","handleError","cardElement","getElement","CardElement","confirmCardPayment","payment_method","card","paymentIntent","base","fontSize","invalid","StripeContainer","cancelClick","CheckoutContainer","stripePaymentOpen","setStripePaymentOpen","setStripeSecret","confirmRequest","scheduledDate","canReceiveCardPayments","clientSecret","canReceiveUnpaidRequest","CompanyServicesItem","borderBottom","CompanyServicesList","serviceClick","CompaniesView","DateSelectorContainer","dateFrom","SlotButton","isSelected","hidden","SlotsView","slotComponents","SlotsContainer","SlotsForServiceModal","CompaniesContainer","setSelectedServiceId","CompaniesInnerRoutes","useRouteMatch","useParams","CompaniesRoutes","HomeView","bc","HomeContainer","AppRoutes","ROOT","flattenMessages","object","prefix","messages","prefixedKey","assign","AppIntl","language","setMessages","m","flattenedMessages","default","locale","defaultLocale","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","browserHistory","createBrowserHistory","listen","setTimeout","hash","window","element","document","getElementById","scrollIntoView","behavior","scrollTo","defaults","baseURL","apiAxios","onResponseError","_retry","access_token","common","applicationError","modalStateErrors","interceptors","use","Authorization","setupAuthHandlers","stripePromise","loadStripe","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.b37092d6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineCell\":\"schedule-formik-input_lineCell__24pMl\",\"borderLeft\":\"schedule-formik-input_borderLeft__2g7PF\",\"frameBox\":\"schedule-formik-input_frameBox__OBPb2\",\"hourBox\":\"schedule-formik-input_hourBox__3Fz2z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dateSelectorContainer\":\"scheduling-date-selector_dateSelectorContainer__wZoaJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fixedHeaders\":\"k-table_fixedHeaders__1Sju7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnOverlay\":\"editable-avatar-img_btnOverlay__2BptH\"};","export enum ACTION_TYPES {\r\n    LOGIN_REQUEST = 'AUTH/LOGIN_REQUEST',\r\n    LOGIN_REQUEST_SUCCESS = 'AUTH/LOGIN_REQUEST_SUCCESS',\r\n    LOGIN_REQUEST_FAIL = 'AUTH/LOGIN_REQUEST_FAIL',\r\n    REGISTER_REQUEST = 'AUTH/REGISTER_REQUEST',\r\n    REGISTER_REQUEST_SUCCESS = 'AUTH/REGISTER_REQUEST_SUCCESS',\r\n    REGISTER_REQUEST_FAIL = 'AUTH/REGISTER_REQUEST_FAIL',\r\n    FACEBOOK_LOGIN_REQUEST = 'AUTH/FACEBOOK_LOGIN_REQUEST',\r\n    FACEBOOK_LOGIN_REQUEST_SUCCESS = 'AUTH/FACEBOOK_LOGIN_REQUEST_SUCCESS',\r\n    FACEBOOK_LOGIN_REQUEST_FAIL = 'AUTH/FACEBOOK_LOGIN_REQUEST_FAIL',\r\n    SET_USER = 'AUTH/SET_USER',\r\n    SET_LOADING_USER = 'AUTH/SET_LOADING_USER',\r\n}\r\n","import {createAction} from '@reduxjs/toolkit';\r\nimport {LoginRequest, RegisterRequest} from 'src/app/api/auth';\r\nimport {ACTION_TYPES} from './types';\r\nimport {action} from 'typesafe-actions';\r\nimport {User} from 'src/app/api/users';\r\nimport {ApiBaseError} from '../../api/common/api-errors';\r\n\r\nexport const loginRequest = (request: LoginRequest) =>\r\n    action(ACTION_TYPES.LOGIN_REQUEST, request);\r\n\r\nexport const loginRequestSuccess = () =>\r\n    action(ACTION_TYPES.LOGIN_REQUEST_SUCCESS)\r\n\r\nexport const loginRequestFail = (error?: ApiBaseError) =>\r\n    action(ACTION_TYPES.LOGIN_REQUEST_FAIL, error)\r\n\r\nexport const registerRequest = (request: RegisterRequest) =>\r\n    action(ACTION_TYPES.REGISTER_REQUEST, request);\r\n\r\nexport const registerRequestSuccess = () =>\r\n    action(ACTION_TYPES.REGISTER_REQUEST_SUCCESS)\r\n\r\nexport const registerRequestFail = (error?: ApiBaseError) =>\r\n    action(ACTION_TYPES.REGISTER_REQUEST_FAIL, error)\r\n\r\nexport const setUser = (user: User | null) =>\r\n    action(ACTION_TYPES.SET_USER, user)\r\n\r\nexport const setLoadingUser = createAction<boolean>(ACTION_TYPES.SET_LOADING_USER)\r\n\r\nexport const facebookLoginRequest = (accessToken: string) =>\r\n    action(ACTION_TYPES.FACEBOOK_LOGIN_REQUEST, accessToken);\r\n\r\nexport const facebookLoginRequestSuccess = () =>\r\n    action(ACTION_TYPES.FACEBOOK_LOGIN_REQUEST_SUCCESS)\r\n\r\nexport const facebookLoginRequestFail = (error?: ApiBaseError) =>\r\n    action(ACTION_TYPES.FACEBOOK_LOGIN_REQUEST_FAIL, error)\r\n","\r\nexport function setToken(token: string) {\r\n    localStorage.setItem('token', token);\r\n}\r\n\r\nexport function setRefreshToken(token: string) {\r\n    localStorage.setItem('refreshToken', token);\r\n}\r\n\r\nexport function getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n}\r\n\r\nexport function getRefreshToken(): string | null {\r\n    return localStorage.getItem('refreshToken');\r\n}\r\n\r\nexport function removeToken() {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('refreshToken');\r\n}\r\n\r\nexport function isLoggedIn(): boolean {\r\n    return !!getToken();\r\n}\r\n","import {Reducer} from 'redux';\r\nimport {isLoggedIn} from 'src/app/api/common/session-storage';\r\nimport {ACTION_TYPES} from './types';\r\nimport {User} from 'src/app/api/users';\r\nimport {ApiValidationError} from 'src/app/api/common/api-errors';\r\n\r\nexport interface AuthState {\r\n    apiError: ApiValidationError | null;\r\n    loggedIn: boolean;\r\n    loadingUser: boolean;\r\n    user: User | null;\r\n}\r\n\r\nconst initialState: AuthState = {\r\n    apiError: null,\r\n    loggedIn: isLoggedIn(),\r\n    loadingUser: false,\r\n    user: null\r\n}\r\n\r\nconst reducer: Reducer<AuthState> = (state = initialState, {type, payload}) => {\r\n    switch (type) {\r\n        case ACTION_TYPES.REGISTER_REQUEST:\r\n        case ACTION_TYPES.LOGIN_REQUEST:\r\n            return {...state, apiError: null}\r\n        case ACTION_TYPES.SET_USER:\r\n            return {...state, loggedIn: !!payload, user: payload, loadingUser: false}\r\n        case ACTION_TYPES.SET_LOADING_USER:\r\n            return {...state, loadingUser: payload}\r\n        case ACTION_TYPES.REGISTER_REQUEST_FAIL:\r\n        case ACTION_TYPES.LOGIN_REQUEST_FAIL:\r\n            return {...state, loggedIn: false, apiError: payload, loadingUser: false}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport {reducer as authReducer};\r\n","import moment, {Moment} from 'moment';\r\n\r\nexport function validOrToday(date: string): Moment {\r\n    const result = stringToMoment(date)\r\n    return result.isValid() ? result : stringToMoment(undefined);\r\n}\r\n\r\nexport function stringToMoment(value: string | Date | undefined): Moment {\r\n    return moment.utc(value);\r\n}\r\n\r\nexport function momentToIso(value: Moment): string {\r\n    return value.toISOString();\r\n}\r\n\r\nexport function momentIsToday(moment: Moment): boolean {\r\n    return moment.date() === moment.utc().date();\r\n}\r\n\r\nexport function momentToday(): Moment {\r\n    return moment();\r\n}\r\n","import * as moment from 'moment';\nimport {momentToIso} from 'src/app/shared/util/moment-helpers';\n\nexport function convertMoment(params: {[key: string]: any} = {}): any  {\n  const result: {[key: string]: any} = {};\n  Object.keys(params).forEach((prop: string) => {\n    // @ts-ignore\n    if (params[prop] instanceof moment) {\n      result[prop] = momentToIso(params[prop]);\n    } else {\n      result[prop] = params[prop];\n    }\n  });\n  return result;\n}\n","import axios from 'axios';\r\nimport {setupAuthHandlers} from './common-api';\r\n\r\nconst baseApiAxios = axios.create({});\r\n\r\nexport const configureBaseApi = () => {\r\n    baseApiAxios.defaults.baseURL = process.env.REACT_APP_API_URL || 'https://api.kalendario.ie/api/';\r\n    setupAuthHandlers(baseApiAxios);\r\n}\r\n\r\nexport default baseApiAxios;\r\n","import {ApiListResult} from '../api-results';\r\nimport {convertMoment} from '../helpers';\r\nimport baseApiAxios from './base-api';\r\nimport {AxiosResponse} from 'axios';\r\n\r\nexport interface BaseModelRequest<TEntity, TFilter  = object> {\r\n    get: (filter: TFilter) => Promise<ApiListResult<TEntity>>;\r\n    post: (model: any) => Promise<TEntity>;\r\n    detail: (id: number, params?: {}) => Promise<TEntity>;\r\n    patch: (id: number, model: any) => Promise<TEntity>;\r\n    put(id: number, model: any): Promise<TEntity>;\r\n    delete: (id: number) => Promise<AxiosResponse>;\r\n}\r\n\r\nfunction baseModelRequest<TEntity, TFilter = object>(baseUrl: string, adapter: (model: any) => TEntity): BaseModelRequest<TEntity, TFilter> {\r\n    return {\r\n        get(filter: any): Promise<ApiListResult<TEntity>> {\r\n            const params = convertMoment(filter);\r\n            return baseApiAxios.get<ApiListResult<TEntity>>(baseUrl, {params})\r\n                .then(project => {\r\n                        project.data.results = project.data.results.map(r => adapter(r));\r\n                        return project.data;\r\n                    }\r\n                )\r\n        },\r\n\r\n        post(model: any): Promise<TEntity> {\r\n            return baseApiAxios.post(baseUrl, model)\r\n                .then(result => adapter(result.data));\r\n        },\r\n\r\n        detail(id: number, params = {}): Promise<TEntity> {\r\n            return baseApiAxios.get<TEntity>(baseUrl + id + '/', {params: {...params}})\r\n                .then(result => adapter(result.data));\r\n        },\r\n\r\n        patch(id: number, model: any): Promise<TEntity> {\r\n            return baseApiAxios.patch<TEntity>(baseUrl + id + '/', model)\r\n                .then(result => adapter(result.data));\r\n        },\r\n\r\n        put(id: number, model: any): Promise<TEntity> {\r\n            return baseApiAxios.put<TEntity>(baseUrl + id + '/', model)\r\n                .then(result => adapter(result.data));\r\n        },\r\n\r\n        delete(id: number): Promise<AxiosResponse> {\r\n            return baseApiAxios.delete<void>(baseUrl + id + '/');\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default baseModelRequest;\r\n","import {Person} from 'src/app/api/common/models';\r\n\r\nexport function personParser(data?: any): Person {\r\n\r\n    return data ? {...data} : {\r\n        id: 0, firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        phone: ''\r\n    }\r\n}\r\n","import {PermissionModel} from 'src/app/api/auth';\r\n\r\nexport interface IReadModel {\r\n    id: number;\r\n    permissionModel: PermissionModel;\r\n    name: string;\r\n}\r\n\r\nexport interface Person extends IReadModel {\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    phone: string;\r\n}\r\n\r\nexport function modelId(model: IReadModel) {\r\n    if (model) {\r\n        return model.id;\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nfunction stringfy(value: number): string {\r\n    if (value < 10) {\r\n        return '0' + value.toString();\r\n    }\r\n    return value.toString();\r\n}\r\n\r\nexport interface TimeOfDay {\r\n    hour: number;\r\n    minute: number;\r\n}\r\n\r\nexport const Zero = () =>  ({hour: 0, minute: 0});\r\n\r\nexport const timeFromString = (time: string): TimeOfDay => {\r\n    const timeOfDay = Zero();\r\n    timeOfDay.hour = +time.substr(0, 2);\r\n    timeOfDay.minute = +time.substr(3, 2);\r\n    return timeOfDay;\r\n}\r\n\r\nexport const timeToString = (t: TimeOfDay) => stringfy(t.hour) + ':' + stringfy(t.minute);\r\n\r\nexport const timeToISOString = (t: TimeOfDay) => stringfy(t.hour) + ':' + stringfy(t.minute) + ':00';\r\n\r\n// hashCode(): number {\r\n//     return this.hour + this.minute / 60;\r\n// }\r\n","import {timeFromString, timeToString} from 'src/app/api/common/models';\r\nimport {Shift, TimeFrame} from 'src/app/api/shifts/models';\r\n\r\n\r\nexport function shiftParser(data: any): Shift {\r\n    const frames: TimeFrame[] = data?.frames ? data.frames.map((f: any) => timeFrameParser(f.start, f.end)) : [];\r\n    return {\r\n        frames,\r\n        name: frames.length > 0 ? frames.map(f => f.name).reduce(((p, c) => `${p} ${c}`)) : ''\r\n    }\r\n}\r\n\r\nexport function timeFrameParser(start: string, end: string): TimeFrame {\r\n    const startTod = timeFromString(start);\r\n    const endTod = timeFromString(end);\r\n    return {\r\n        start: startTod,\r\n        end: endTod,\r\n        name: timeToString(startTod) + ' - ' + timeToString(endTod)\r\n    }\r\n}\r\n","import {Moment} from 'moment';\r\nimport {PermissionModel} from 'src/app/api/auth';\r\nimport {timeToISOString} from 'src/app/api/common/models';\r\nimport {Schedule} from 'src/app/api/schedule/models';\r\nimport {UpsertScheduleRequest, UpsertScheduleRequestShift} from 'src/app/api/schedule/requests';\r\nimport {Shift, shiftParser} from 'src/app/api/shifts';\r\n\r\nexport function scheduleParser(data: any): Schedule {\r\n    return {\r\n        ...data,\r\n        permissionModel: PermissionModel.schedule,\r\n        mon: shiftParser(data.mon),\r\n        tue: shiftParser(data.tue),\r\n        wed: shiftParser(data.wed),\r\n        thu: shiftParser(data.thu),\r\n        fri: shiftParser(data.fri),\r\n        sat: shiftParser(data.sat),\r\n        sun: shiftParser(data.sun),\r\n        shifts: ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'],\r\n    }\r\n}\r\n\r\nexport function getShift(schedule: Schedule, date: Moment) {\r\n    switch (date.isoWeekday()) {\r\n        case 1:\r\n            return schedule.mon;\r\n        case 2:\r\n            return schedule.tue;\r\n        case 3:\r\n            return schedule.wed;\r\n        case 4:\r\n            return schedule.thu;\r\n        case 5:\r\n            return schedule.fri;\r\n        case 6:\r\n            return schedule.sat;\r\n        case 7:\r\n            return schedule.sun;\r\n    }\r\n}\r\n\r\nfunction shiftToUpsertShift(shift?: Shift): UpsertScheduleRequestShift | null {\r\n    return shift ? {\r\n        frames: shift.frames.map(frame => ({start: timeToISOString(frame.start), end: timeToISOString(frame.end)}))\r\n    } : null;\r\n}\r\n\r\nexport function upsertScheduleRequestParser(schedule: Schedule | null): UpsertScheduleRequest {\r\n    return schedule ? {\r\n        name: schedule.name,\r\n        mon: shiftToUpsertShift(schedule.mon),\r\n        tue: shiftToUpsertShift(schedule.tue),\r\n        wed: shiftToUpsertShift(schedule.wed),\r\n        thu: shiftToUpsertShift(schedule.thu),\r\n        fri: shiftToUpsertShift(schedule.fri),\r\n        sat: shiftToUpsertShift(schedule.sat),\r\n        sun: shiftToUpsertShift(schedule.sun)\r\n\r\n    } : {\r\n        name: '',\r\n        mon: null,\r\n        tue: null,\r\n        wed: null,\r\n        thu: null,\r\n        fri: null,\r\n        sat: null,\r\n        sun: null\r\n    }\r\n}\r\n","import {PermissionModel} from 'src/app/api/auth';\r\nimport {personParser} from 'src/app/api/common/parsers';\r\nimport {Employee, UserEmployee} from 'src/app/api/employees/models';\r\nimport {UpsertEmployeeRequest} from 'src/app/api/employees/requests';\r\nimport { scheduleParser } from '../schedule/parsers';\r\n\r\nconst imageStorage = process.env.REACT_APP_IMAGE_API_URL || 'https://res.cloudinary.com/gchahm/';\r\n\r\nexport function employeeParser(data?: any): Employee {\r\n    return data ? {\r\n        ...data,\r\n        ...personParser(data),\r\n        permissionModel: PermissionModel.employee,\r\n        private: !!data.private,\r\n        photoUrl: data.profileImg ? imageStorage + data.profileImg\r\n            : 'img/default-avatar.jpg',\r\n    } : {\r\n        ...personParser(),\r\n        private: false,\r\n        photoUrl: null,\r\n        instagram: '',\r\n        schedule: 0,\r\n        services: [],\r\n    }\r\n\r\n}\r\n\r\nexport function userEmployeeParser(data?: any): UserEmployee {\r\n    return data ? {\r\n        ...data,\r\n        ...personParser(data),\r\n        schedule: scheduleParser(data.schedule),\r\n        permissionModel: PermissionModel.employee,\r\n        private: !!data.private,\r\n        photoUrl: data.profileImg ? imageStorage + data.profileImg\r\n            : 'img/default-avatar.jpg',\r\n    } : {\r\n        ...personParser(),\r\n        private: false,\r\n        photoUrl: null,\r\n        instagram: '',\r\n        schedule: 0,\r\n        services: [],\r\n    }\r\n\r\n}\r\n\r\nexport function upsertEmployeeRequestParser(employee: Employee | null | undefined): UpsertEmployeeRequest {\r\n    return employee ? {\r\n        bio: employee.bio,\r\n        email: employee.email,\r\n        firstName: employee.firstName,\r\n        instagram: employee.instagram,\r\n        lastName: employee.lastName,\r\n        phone: employee.phone,\r\n        private: employee.private,\r\n        schedule: employee.schedule,\r\n        services: employee.services\r\n    } : {\r\n        bio: '',\r\n        email: '',\r\n        firstName: '',\r\n        instagram: '',\r\n        lastName: '',\r\n        phone: '',\r\n        private: false,\r\n        schedule: 0,\r\n        services: []\r\n    }\r\n}\r\n","import baseApiAxios from 'src/app/api/common/clients/base-api';\nimport baseModelRequest from 'src/app/api/common/clients/base-django-api';\nimport { employeeParser } from './parsers';\n\nconst baseUrl = 'admin/employees/';\n\nexport const adminEmployeeClient = {\n    ...baseModelRequest(baseUrl, employeeParser),\n\n    uploadProfilePicture(id: number, file: File): Promise<{ url: string }> {\n        const formData = new FormData();\n        formData.append('image', file);\n        return baseApiAxios.post<{url: string}>(baseUrl + id + '/photo/', formData)\n            .then(result => result.data);\n    }\n}\n","import * as yup from 'yup';\r\n\r\nexport interface UpsertEmployeeRequest {\r\n    private: boolean;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    phone: string;\r\n    schedule: number;\r\n    instagram: string;\r\n    bio: string;\r\n    services: number[];\r\n}\r\n\r\nexport const UpsertEmployeeRequestValidation = yup.object().shape({\r\n    firstName: yup.string().required('First Name is required'),\r\n    lastName: yup.string().required('Last Name is required'),\r\n    email: yup.string().required().email(),\r\n    phone: yup.string().required(),\r\n    services: yup.array(yup.number()).required().min(1)\r\n});\r\n","import {PermissionModel} from 'src/app/api/auth';\r\nimport {userEmployeeParser} from 'src/app/api/employees';\r\nimport {User} from 'src/app/api/users/models';\r\nimport {ChangeUserPasswordRequest, UpsertUserRequest} from 'src/app/api/users/requests';\r\n\r\n\r\nexport function userParser(data: any): User {\r\n    return {\r\n        ...data,\r\n        permissionModel: PermissionModel.user,\r\n        employee: data.employee ? userEmployeeParser(data.employee) : null,\r\n        company: data.owner ? {...data.owner} : null,\r\n        verified: !!data.verified\r\n    }\r\n}\r\n\r\nexport function upsertUserRequestParser(user: User | null): UpsertUserRequest {\r\n    return user ? {\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        email: user.email,\r\n        employee: user.employeeId || '',\r\n        groups: user.groups\r\n    } : {\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        employee: '',\r\n        groups: []\r\n    }\r\n}\r\n\r\nexport function changeUserPasswordRequestParser(): ChangeUserPasswordRequest {\r\n    return {\r\n        password1: '', password2: '', userPassword: ''\r\n    }\r\n}\r\n","import baseModelRequest from 'src/app/api/common/clients/base-django-api';\nimport {User} from 'src/app/api/users/models';\nimport {userParser} from 'src/app/api/users/parsers';\nimport {ChangeUserPasswordRequest} from 'src/app/api/users/requests';\nimport baseApiAxios from 'src/app/api/common/clients/base-api';\n\nconst baseUrl = 'core/users/';\n\nexport const adminUserClient = {\n    ...baseModelRequest(baseUrl, userParser),\n    changePassword(id: number, model: ChangeUserPasswordRequest): Promise<User> {\n        return baseApiAxios\n            .patch<User>(baseUrl + id + '/changePassword/', model)\n            .then(data => userParser(data.data));\n    }\n}\n","export const PERMISSION_VIEW = 'view';\nexport const PERMISSION_ADD = 'add';\nexport const PERMISSION_CHANGE = 'change';\nexport const PERMISSION_DELETE = 'delete';\n\nexport interface ModelPermissions {\n  view: boolean;\n  add: boolean;\n  change: boolean;\n  delete: boolean;\n}\n\nexport interface AppointmentPermissions extends ModelPermissions {\n  overlap: boolean;\n}\n\nexport enum PermissionModels {\n  employee = 'employee',\n  group = 'groupprofile',\n  user = 'user',\n  config = 'config',\n  service = 'service',\n  shift = 'shift',\n  schedule = 'schedule',\n  customer = 'customer',\n  appointment = 'appointment',\n  company = 'company'\n}\n\nexport function getApp(permission: PermissionModels): string {\n  switch (permission) {\n    case PermissionModels.group:\n      return 'core';\n    case PermissionModels.user:\n      return 'core';\n    default:\n      return 'scheduling';\n  }\n}\n\n\n","import * as yup from 'yup';\r\n\r\n\r\n\r\n\r\nexport interface UpsertUserRequest {\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    employee: number | '';\r\n    groups: number[];\r\n}\r\n\r\nexport const UpsertUserRequestValidation = yup.object().shape({\r\n    firstName: yup.string().required(),\r\n    lastName: yup.string().required(),\r\n    email: yup.string().required().email(),\r\n});\r\n\r\n\r\nexport interface ChangeUserPasswordRequest {\r\n    userPassword: string;\r\n    password1: string;\r\n    password2: string;\r\n}\r\n\r\nexport const ChangeUserPasswordValidation = yup.object().shape({\r\n    password1: yup.string().required(),\r\n    password2: yup.string().required()\r\n        .oneOf([yup.ref('password1'), null], 'Passwords must match'),\r\n    userPassword: yup.string().required()\r\n});\r\n","export enum PermissionModel {\r\n    groupprofile = 'groupprofile',\r\n    user = 'user',\r\n    appointment = 'appointment',\r\n    company = 'company',\r\n    config = 'config',\r\n    customer = 'customer',\r\n    employee = 'employee',\r\n    historicalappointment = 'historicalappointment',\r\n    person = 'person',\r\n    photo = 'photo',\r\n    request = 'request',\r\n    schedule = 'schedule',\r\n    schedulingpanel = 'schedulingpanel',\r\n    service = 'service',\r\n    servicecategory = 'servicecategory',\r\n    shift = 'shift',\r\n    timeframe = 'timeframe',\r\n}\r\n\r\nexport enum PermissionType {\r\n    add = 'add',\r\n    change = 'change',\r\n    delete = 'delete',\r\n    view = 'view',\r\n}\r\n\r\n\r\n","import {AxiosInstance, AxiosResponse} from 'axios';\r\nimport {userParser} from 'src/app/api/users';\r\nimport baseApiAxios from '../common/clients/base-api';\r\nimport {getRefreshToken, isLoggedIn, removeToken, setRefreshToken, setToken} from '../common/session-storage';\r\nimport {User} from '../users/models';\r\nimport {LoginResponse, RefreshAccessTokenResponse} from './models';\r\nimport {LoginRequest, RegisterRequest} from './requests';\r\n\r\n\r\nconst authUrl = 'auth/';\r\nconst facebookUrl = 'auth/facebook/';\r\n\r\n\r\nexport const authApi = {\r\n    verifyEmail(key: string) {\r\n        return baseApiAxios.post(authUrl + 'registration/verify-email/', {key});\r\n    },\r\n    login(request: LoginRequest): Promise<User | null> {\r\n        return baseApiAxios.post<LoginResponse>(authUrl + 'login/', request)\r\n            .then(completeLogin);\r\n    },\r\n\r\n    register(request: RegisterRequest): Promise<User | null> {\r\n        return baseApiAxios.post<LoginResponse>(authUrl + 'registration/', request)\r\n            .then(completeLogin);\r\n    },\r\n\r\n    authenticateFacebook(accessToken: string): Promise<User | null> {\r\n        return baseApiAxios.post<LoginResponse>(facebookUrl, {accessToken})\r\n            .then(completeLogin);\r\n    },\r\n\r\n    logout() {\r\n        return baseApiAxios.post<{ detail: string }>(authUrl + 'logout/', {})\r\n            .then(removeToken);\r\n    },\r\n\r\n    whoAmI(): Promise<User | null> {\r\n        if (isLoggedIn()) {\r\n            return baseApiAxios.get<User>(authUrl + 'user/')\r\n                .then(({data}) => userParser(data))\r\n                .catch(error => {\r\n                    removeToken();\r\n                    return Promise.resolve(null);\r\n                });\r\n        }\r\n        return Promise.resolve(null);\r\n    },\r\n\r\n    refreshAccessToken(axios: AxiosInstance): Promise<string | null> {\r\n        const refresh = getRefreshToken();\r\n        return axios.post<RefreshAccessTokenResponse>(authUrl + 'token/refresh/', {refresh})\r\n            .then(({data}) => {\r\n                    setToken(data.access);\r\n                    return data.access;\r\n                }\r\n            );\r\n    }\r\n}\r\n\r\nconst completeLogin = ({data}: AxiosResponse<LoginResponse>) => {\r\n    setToken(data.accessToken);\r\n    setRefreshToken(data.refreshToken);\r\n    return userParser(data.user);\r\n}\r\n\r\n","import {PermissionModel, PermissionType} from 'src/app/api/auth/permissions';\r\nimport {User} from 'src/app/api/users';\r\n\r\nexport function hasPermission(user: User, type: PermissionType, model: PermissionModel) {\r\n    const app = getAppLabel(model);\r\n    return user.permissions.includes(`${app}.${type}_${model}`);\r\n}\r\n\r\nfunction getAppLabel(model: PermissionModel): string {\r\n    switch (model) {\r\n        case PermissionModel.user:\r\n        case PermissionModel.groupprofile:\r\n            return 'core';\r\n        default:\r\n            return 'scheduling';\r\n    }\r\n}\r\n","import { call, put, takeEvery } from 'redux-saga/effects'\r\nimport {User} from 'src/app/api/users';\r\nimport {LoginRequest, authApi, RegisterRequest} from 'src/app/api/auth';\r\nimport {ACTION_TYPES} from './types';\r\nimport {\r\n    facebookLoginRequestFail,\r\n    facebookLoginRequestSuccess,\r\n    loginRequestFail,\r\n    loginRequestSuccess, registerRequestFail, registerRequestSuccess,\r\n    setUser\r\n} from './actions';\r\n\r\n\r\nfunction* requestLogin(action: { type: string, payload: LoginRequest }) {\r\n    try {\r\n        const user: User = yield call(authApi.login, action.payload);\r\n        yield put(loginRequestSuccess());\r\n        yield put(setUser(user));\r\n    } catch (error) {\r\n        yield put(loginRequestFail(error));\r\n    }\r\n}\r\n\r\n\r\nfunction* register(action: { type: string, payload: RegisterRequest }) {\r\n    try {\r\n        const user: User = yield call(authApi.register, action.payload);\r\n        yield put(registerRequestSuccess());\r\n        yield put(setUser(user));\r\n    } catch (error) {\r\n        yield put(registerRequestFail(error));\r\n    }\r\n}\r\n\r\n\r\nfunction* requestFacebookLogin(action: { type: string, payload: string }) {\r\n    try {\r\n        const user: User = yield call(authApi.authenticateFacebook, action.payload);\r\n        yield put(facebookLoginRequestSuccess());\r\n        yield put(setUser(user));\r\n    } catch (error) {\r\n        yield put(facebookLoginRequestFail(error));\r\n    }\r\n}\r\n\r\n\r\nexport function* authSaga() {\r\n    yield takeEvery(ACTION_TYPES.LOGIN_REQUEST, requestLogin);\r\n    yield takeEvery(ACTION_TYPES.REGISTER_REQUEST, register);\r\n    yield takeEvery(ACTION_TYPES.FACEBOOK_LOGIN_REQUEST, requestFacebookLogin);\r\n}\r\n","export enum ACTION_TYPES {\r\n    COMPANY_DETAILS_REQUEST = 'COMPANIES/COMPANY_DETAILS_REQUEST',\r\n    COMPANY_DETAILS_REQUEST_SUCCESS = 'COMPANIES/COMPANY_DETAILS_REQUEST_SUCCESS',\r\n    COMPANY_DETAILS_REQUEST_FAIL = 'COMPANIES/COMPANY_DETAILS_REQUEST_FAIL',\r\n    SET_SELECTED_SERVICE_ID = 'COMPANIES/SET_SELECTED_SERVICE_ID',\r\n    SLOTS_REQUEST = 'COMPANIES/SLOTS_REQUEST',\r\n    SLOTS_REQUEST_SUCCESS = 'COMPANIES/SLOTS_REQUEST_SUCCESS',\r\n    SLOTS_REQUEST_FAIL = 'COMPANIES/SLOTS_REQUEST_FAIL',\r\n    SET_SELECTED_SLOT_ID = 'COMPANIES/SET_SELECTED_SLOT_ID',\r\n    BOOK_SLOT_REQUEST = 'COMPANIES/BOOK_SLOT_REQUEST',\r\n    BOOK_SLOT_REQUEST_SUCCESS = 'COMPANIES/BOOK_SLOT_REQUEST_SUCCESS',\r\n    BOOK_SLOT_REQUEST_FAIL = 'COMPANIES/BOOK_SLOT_REQUEST_FAIL',\r\n    SET_SELECTED_DATE = 'COMPANIES/SET_SELECTED_DATE',\r\n    SELECTED_DATE_ADD_ONE = 'COMPANIES/SELECTED_DATE_ADD_ONE',\r\n    SELECTED_DATE_SUBTRACT_ONE = 'COMPANIES/SELECTED_DATE_SUBTRACT_ONE',\r\n    SELECTED_DATE_TODAY = 'COMPANIES/SELECTED_DATE_TODAY',\r\n    CURRENT_CART_REQUEST = 'COMPANIES/CURRENT_CART_REQUEST',\r\n    CURRENT_CART_REQUEST_SUCCESS = 'COMPANIES/CURRENT_CART_REQUEST_SUCCESS',\r\n    CURRENT_CART_REQUEST_FAIL = 'COMPANIES/CURRENT_CART_REQUEST_FAIL',\r\n    DELETE_APPOINTMENT_REQUEST = 'COMPANIES/DELETE_APPOINTMENT_REQUEST',\r\n    DELETE_APPOINTMENT_REQUEST_SUCCESS = 'COMPANIES/DELETE_APPOINTMENT_REQUEST_SUCCESS',\r\n    DELETE_APPOINTMENT_REQUEST_FAIL = 'COMPANIES/DELETE_APPOINTMENT_REQUEST_FAIL',\r\n    SET_CURRENT_REQUEST = 'COMPANIES/SET_CURRENT_REQUEST',\r\n    ADD_NOTES_REQUEST = 'COMPANIES/ADD_NOTES_REQUEST',\r\n    ADD_NOTES_REQUEST_SUCCESS = 'COMPANIES/ADD_NOTES_REQUEST_SUCCESS',\r\n    ADD_NOTES_REQUEST_FAIL = 'COMPANIES/ADD_NOTES_REQUEST_FAIL',\r\n    CONFIRM_CART_REQUEST = 'COMPANIES/CONFIRM_CART_REQUEST',\r\n    CONFIRM_CART_REQUEST_SUCCESS = 'COMPANIES/CONFIRM_CART_REQUEST_SUCCESS',\r\n    CONFIRM_CART_REQUEST_FAIL = 'COMPANIES/CONFIRM_CART_REQUEST_FAIL',\r\n}\r\n","import {createSelector} from '@reduxjs/toolkit';\r\nimport {ApiValidationError} from 'src/app/api/common/api-errors';\r\nimport {User} from 'src/app/api/users';\r\nimport {RootState} from 'src/app/store/store';\r\n\r\n\r\nexport const selectLoggedIn: (rootState: RootState) => boolean =\r\n    (rootState) => rootState.auth.loggedIn;\r\n\r\nexport const selectApiError: (rootState: RootState) => ApiValidationError | null =\r\n    (rootState) => rootState.auth.apiError;\r\n\r\nexport const selectUser: (rootState: RootState) => User | null =\r\n    (rootState) => rootState.auth.user\r\n\r\nexport const selectUserEmployee = createSelector(selectUser, user => user?.employee)\r\n\r\nexport const selectLoadingUser: (rootState: RootState) => boolean =\r\n    (rootState) => rootState.auth.loadingUser;\r\n","import {Moment} from 'moment';\r\nimport {RequestModel} from 'src/app/api/requests';\r\nimport {momentToIso} from 'src/app/shared/util/moment-helpers';\r\nimport {ACTION_TYPES} from './types';\r\nimport {action} from 'typesafe-actions';\r\nimport {ApiBaseError} from 'src/app/api/common/api-errors';\r\nimport {\r\n    AddNotesRequest,\r\n    CompanyDetails,\r\n    CreateAppointmentRequest,\r\n    Slot,\r\n    SlotRequestParams\r\n} from 'src/app/api/companies';\r\n\r\nexport const companyDetailsRequest = (companyName: string) =>\r\n    action(ACTION_TYPES.COMPANY_DETAILS_REQUEST, companyName);\r\n\r\n\r\nexport const companyDetailsRequestSuccess = (company: CompanyDetails) =>\r\n    action(ACTION_TYPES.COMPANY_DETAILS_REQUEST_SUCCESS, company);\r\n\r\n\r\nexport const companyDetailsRequestFail = (apiError: ApiBaseError) =>\r\n    action(ACTION_TYPES.COMPANY_DETAILS_REQUEST_FAIL, apiError);\r\n\r\n\r\nexport const setSelectedServiceId = (id: number | null) =>\r\n    action(ACTION_TYPES.SET_SELECTED_SERVICE_ID, id);\r\n\r\n\r\nexport const slotsRequest = (request: SlotRequestParams) =>\r\n    action(ACTION_TYPES.SLOTS_REQUEST, request);\r\n\r\n\r\nexport const slotsRequestSuccess = (slots: Slot[]) => {\r\n    let slotMap: {[key: string]: Slot[]} = {};\r\n    slots.forEach(slot => {\r\n        if (slotMap[slot.date]) {\r\n            slotMap[slot.date].push(slot)\r\n        } else {\r\n            slotMap[slot.date] = [slot]\r\n        }\r\n    })\r\n    return action(ACTION_TYPES.SLOTS_REQUEST_SUCCESS, slotMap);\r\n}\r\n\r\n\r\nexport const slotsRequestFail = () =>\r\n    action(ACTION_TYPES.SLOTS_REQUEST_FAIL);\r\n\r\n\r\nexport const setSelectedSlotId = (id: number) =>\r\n    action(ACTION_TYPES.SET_SELECTED_SLOT_ID, id);\r\n\r\n\r\nexport const bookSlotRequest = (request: CreateAppointmentRequest) =>\r\n    action(ACTION_TYPES.BOOK_SLOT_REQUEST, request);\r\n\r\n\r\nexport const bookSlotRequestSuccess = () =>\r\n    action(ACTION_TYPES.BOOK_SLOT_REQUEST_SUCCESS);\r\n\r\n\r\nexport const bookSlotRequestFail = () =>\r\n    action(ACTION_TYPES.BOOK_SLOT_REQUEST_FAIL);\r\n\r\n\r\nexport const setSelectedDate = (selectedDate: Moment) =>\r\n    action(ACTION_TYPES.SET_SELECTED_DATE, momentToIso(selectedDate));\r\n\r\n\r\nexport const setSelectedDayToNextDay = () =>\r\n    action(ACTION_TYPES.SELECTED_DATE_ADD_ONE);\r\n\r\n\r\nexport const setSelectedDateToPreviousDay = () =>\r\n    action(ACTION_TYPES.SELECTED_DATE_SUBTRACT_ONE);\r\n\r\n\r\nexport const setSelectedDateToToday = () =>\r\n    action(ACTION_TYPES.SELECTED_DATE_TODAY);\r\n\r\n\r\nexport const currentCartRequest = (companyId: number) =>\r\n    action(ACTION_TYPES.CURRENT_CART_REQUEST, companyId);\r\n\r\n\r\nexport const currentCartRequestSuccess = () =>\r\n    action(ACTION_TYPES.CURRENT_CART_REQUEST_SUCCESS);\r\n\r\n\r\nexport const currentCartRequestFail = (apiError: ApiBaseError) =>\r\n    action(ACTION_TYPES.CURRENT_CART_REQUEST_FAIL, apiError);\r\n\r\n\r\nexport const deleteAppointmentRequest = (id: number) =>\r\n    action(ACTION_TYPES.DELETE_APPOINTMENT_REQUEST, id);\r\n\r\nexport const deleteAppointmentRequestSuccess = () =>\r\n    action(ACTION_TYPES.CURRENT_CART_REQUEST_SUCCESS);\r\n\r\nexport const deleteAppointmentRequestFail = (error: ApiBaseError) =>\r\n    action(ACTION_TYPES.CURRENT_CART_REQUEST_SUCCESS, error);\r\n\r\n\r\nexport const setCurrentRequest = (request: RequestModel | null) =>\r\n    action(ACTION_TYPES.SET_CURRENT_REQUEST, request);\r\n\r\n\r\nexport const addNotesRequest = (request: AddNotesRequest) =>\r\n    action(ACTION_TYPES.ADD_NOTES_REQUEST, request);\r\n\r\n\r\nexport const addNotesRequestSuccess = () =>\r\n    action(ACTION_TYPES.ADD_NOTES_REQUEST_SUCCESS);\r\n\r\n\r\nexport const addNotesRequestFail = (error: ApiBaseError) =>\r\n    action(ACTION_TYPES.ADD_NOTES_REQUEST_FAIL, error);\r\n\r\n\r\nexport const confirmCartRequest = (id: number) =>\r\n    action(ACTION_TYPES.CONFIRM_CART_REQUEST, id);\r\n\r\n\r\nexport const confirmCartRequestSuccess = () =>\r\n    action(ACTION_TYPES.CONFIRM_CART_REQUEST_SUCCESS);\r\n\r\n\r\nexport const confirmCartRequestFail = (error: ApiBaseError) =>\r\n    action(ACTION_TYPES.CONFIRM_CART_REQUEST_FAIL, error);\r\n","import {Moment} from 'moment';\r\nimport {HistoryType} from 'src/app/api/common/HistoryType';\r\nimport {IReadModel} from 'src/app/api/common/models';\r\nimport {Company} from 'src/app/api/companies';\r\nimport {Customer} from 'src/app/api/customers';\r\nimport {Employee} from 'src/app/api/employees/models';\r\nimport {Service} from 'src/app/api/services';\r\nimport {User} from 'src/app/api/users/models';\r\n\r\nexport enum EventType {\r\n    EmployeeEvent,\r\n    CustomerAppointment,\r\n    CustomerRequestAppointment,\r\n    CustomerEvent,\r\n}\r\n\r\nexport type Appointment = CustomerEvent | CustomerRequestAppointment | CustomerAppointment | EmployeeEvent;\r\n\r\nexport interface CustomerEvent extends CustomerRequestAppointment {\r\n    owner: Company;\r\n}\r\n\r\nexport interface CustomerRequestAppointment extends CustomerAppointment {\r\n    request: number;\r\n    status: string;\r\n    customerNotes: string;\r\n    companyName: string;\r\n    owner: number | Company;\r\n}\r\n\r\nexport interface CustomerAppointment extends BaseAppointment {\r\n    customer: Customer;\r\n    service: Service;\r\n}\r\n\r\nexport interface EmployeeEvent extends BaseAppointment {\r\n    customer: null;\r\n    service: null;\r\n}\r\n\r\nexport interface BaseAppointment extends IReadModel {\r\n    customer: Customer | null;\r\n    service: Service | null;\r\n    type: EventType;\r\n    start: string;\r\n    end: string;\r\n    employee: Employee;\r\n    owner: number | Company;\r\n    internalNotes: string;\r\n    customerNotes: string | null;\r\n    deleted: string | null;\r\n}\r\n\r\nexport interface History {\r\n    historyType: HistoryType;\r\n    historyDate: Moment | null;\r\n    historyUser: User | null;\r\n}\r\n\r\nexport type AppointmentHistory = Appointment & History;\r\n\r\n","import moment from 'moment';\r\nimport {Reducer} from 'redux';\r\nimport {RequestModel} from 'src/app/api/requests';\r\nimport {ApiValidationError} from '../../api/common/api-errors';\r\nimport {CompanyDetails, Slot} from '../../api/companies';\r\nimport {ACTION_TYPES} from './types';\r\n\r\nconst ownerId = process.env.REACT_APP_OWNER_ID || null;\r\n\r\nexport interface SlotDict {\r\n    [key: string]: Slot[];\r\n}\r\n\r\nexport interface CompaniesState {\r\n    apiError: ApiValidationError | null;\r\n    company: CompanyDetails | null;\r\n    companyRequestCompleted: boolean;\r\n    ownerId: number | null,\r\n    selectedServiceId: number | null;\r\n    slots: SlotDict;\r\n    selectedSlotId: number | null;\r\n    selectedDate: string;\r\n    currentRequest: RequestModel | null;\r\n    currentRequestCompleted: boolean;\r\n}\r\n\r\nconst initialState: CompaniesState = {\r\n    apiError: null,\r\n    company: null,\r\n    companyRequestCompleted: false,\r\n    ownerId: ownerId ? +ownerId : null,\r\n    selectedServiceId: null,\r\n    slots: {},\r\n    selectedSlotId: null,\r\n    selectedDate: moment.utc().startOf('day').toISOString(),\r\n    currentRequest: null,\r\n    currentRequestCompleted: false\r\n}\r\n\r\nconst reducer: Reducer<CompaniesState> = (state = initialState, {type, payload}) => {\r\n    switch (type) {\r\n        case ACTION_TYPES.COMPANY_DETAILS_REQUEST:\r\n            return {...state, apiError: null}\r\n        case ACTION_TYPES.COMPANY_DETAILS_REQUEST_SUCCESS:\r\n            return {...state, company: payload, companyRequestCompleted: true}\r\n        case ACTION_TYPES.COMPANY_DETAILS_REQUEST_FAIL:\r\n            return {...state, company: null, companyRequestCompleted: true}\r\n        case ACTION_TYPES.CURRENT_CART_REQUEST_SUCCESS:\r\n            return {...state, currentRequestCompleted: true}\r\n        case ACTION_TYPES.CURRENT_CART_REQUEST_FAIL:\r\n            return {...state, currentRequest: null, currentRequestCompleted: true}\r\n        case ACTION_TYPES.SET_SELECTED_SERVICE_ID:\r\n            return {...state, selectedServiceId: payload}\r\n        case ACTION_TYPES.SLOTS_REQUEST:\r\n            return {...state, selectedSlotId: null}\r\n        case ACTION_TYPES.SLOTS_REQUEST_SUCCESS:\r\n            return {...state, slots: payload}\r\n        case ACTION_TYPES.SLOTS_REQUEST_FAIL:\r\n            return {...state, slots: null}\r\n        case ACTION_TYPES.SET_SELECTED_SLOT_ID:\r\n            return {...state, selectedSlotId: payload}\r\n        case ACTION_TYPES.SET_SELECTED_DATE:\r\n            return {...state, selectedDate: payload}\r\n        case ACTION_TYPES.BOOK_SLOT_REQUEST:\r\n            return {...state, selectedSlotId: null, selectedServiceId: null}\r\n        case ACTION_TYPES.SET_CURRENT_REQUEST:\r\n            return {...state, currentRequest: payload}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport {reducer as companiesReducer};\r\n","import moment, {Moment} from 'moment';\r\nimport {RequestModel} from 'src/app/api/requests';\r\nimport {SlotDict} from 'src/app/store/companies/reducers';\r\nimport {RootState} from 'src/app/store/store';\r\nimport {CompanyDetails} from '../../api/companies';\r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const selectOwnerId: (rootState: RootState) => number | null =\r\n    (rootState) => rootState.companies.ownerId;\r\n\r\n\r\nexport const selectCompany: (rootState: RootState) => CompanyDetails | null =\r\n    (rootState) => rootState.companies.company;\r\n\r\n\r\nexport const selectSlots: (rootState: RootState) => SlotDict =\r\n    (rootState) => rootState.companies.slots;\r\n\r\n\r\nexport const selectSelectedSlotId: (rootState: RootState) => number | null =\r\n    (rootState) => rootState.companies.selectedSlotId;\r\n\r\n\r\n\r\nexport const selectSelectedDate: (rootState: RootState) => Moment =\r\n    (rootState) => moment.utc(rootState.companies.selectedDate);\r\n\r\n\r\nexport const selectCurrentRequest: (rootState: RootState) => RequestModel | null =\r\n    (rootState) => rootState.companies.currentRequest;\r\n\r\n\r\n\r\nexport const selectSelectedServiceId: (rootState: RootState) => number | null =\r\n    (rootState) => rootState.companies.selectedServiceId;\r\n\r\n\r\nexport const selectCompanyRequestCompleted: (rootState: RootState) => boolean =\r\n    (rootState) => rootState.companies.companyRequestCompleted;\r\n\r\n\r\nexport const selectCurrentRequestCompleted: (rootState: RootState) => boolean =\r\n    (rootState) => rootState.companies.currentRequestCompleted;\r\n\r\n\r\nconst selectServices = createSelector(\r\n    [selectCompany],\r\n    (company) =>\r\n        company?.services\r\n)\r\n\r\n\r\nexport const selectService = createSelector(\r\n    [selectServices, selectSelectedServiceId],\r\n    (services, id) =>\r\n        services && services.find(service => service.id === id)\r\n)\r\n\r\nexport const selectIsStoreReady = createSelector(\r\n    [selectCompanyRequestCompleted, selectCurrentRequestCompleted],\r\n    (company, request) => company && request\r\n\r\n)\r\n\r\nexport const selectCartIsEmpty = createSelector(\r\n    [selectCurrentRequest],\r\n    (request) => !!request && request.itemsCount === 0\r\n)\r\n\r\nexport const selectCartIsLoadedAndEmpty = createSelector(\r\n    [selectCartIsEmpty, selectIsStoreReady],\r\n    (emptyCart, storeReady) => storeReady && emptyCart\r\n)\r\n","import {PermissionModel} from 'src/app/api/auth';\r\nimport {personParser} from 'src/app/api/common/parsers';\r\nimport {Customer} from 'src/app/api/customers/models';\r\nimport {SaveCustomerRequest} from '.';\r\n\r\n\r\nexport function customerParser(data?: any): Customer {\r\n    return {\r\n        ...personParser(data),\r\n        warning: data.warning,\r\n        permissionModel: PermissionModel.customer,\r\n    }\r\n\r\n}\r\n\r\nexport function saveCustomerRequestParser(customer: Customer | null): SaveCustomerRequest {\r\n    return customer ? {\r\n        email: customer.email,\r\n        firstName: customer.firstName,\r\n        lastName: customer.lastName,\r\n        phone: customer.phone,\r\n        warning: customer.warning\r\n    } : {\r\n        email: '', firstName: '', lastName: '', phone: '', warning: ''\r\n    }\r\n}\r\n","import baseModelRequest from 'src/app/api/common/clients/base-django-api';\nimport { customerParser } from './parsers';\n\nconst baseUrl = 'admin/customers/';\n\nexport const adminCustomerClient = {\n    ...baseModelRequest(baseUrl, customerParser)\n}\n","import {PermissionModel} from 'src/app/api/auth';\nimport {timeFromString, timeToISOString} from 'src/app/api/common/models';\nimport {Service, ServiceCategory} from 'src/app/api/services/models';\nimport {UpsertServiceCategoryRequest, UpsertServiceRequest} from 'src/app/api/services/requests';\n\n\nexport function serviceParser(data?: any): Service {\n    return {\n        ...data,\n        permissionModel: PermissionModel.service,\n        duration: timeFromString(data.duration)\n    }\n}\n\nexport function serviceCategoryParser(data: any): ServiceCategory {\n    return {\n        ...data\n    }\n}\n\nexport function createUpsertServiceRequest(service: Service | null | undefined): UpsertServiceRequest {\n    return service ? {\n        private: service.private,\n        category: service.category || 0,\n        color: service.color,\n        cost: service.cost,\n        description: service.description,\n        duration: timeToISOString(service.duration),\n        isFrom: false,\n        name: service.name\n    } : {\n        category: 0,\n        color: '',\n        cost: 0,\n        description: '',\n        duration: '',\n        isFrom: false,\n        name: '',\n        private: false\n\n    }\n}\n\nexport function createUpsertServiceCategoryRequest(category: ServiceCategory | null | undefined): UpsertServiceCategoryRequest {\n    return category ? {\n        name: category.name,\n        color: category.color || ''\n    } : {\n        name: '',\n        color: '',\n    }\n}\n","import baseModelRequest from 'src/app/api/common/clients/base-django-api';\nimport {serviceCategoryParser, serviceParser} from 'src/app/api/services/parsers';\n\nconst baseUrl = 'admin/services/';\n\nexport const adminServiceClient = {\n    ...baseModelRequest(baseUrl, serviceParser),\n}\n\nexport const adminServiceCategoryClient = {\n    ...baseModelRequest('admin/serviceCategories/', serviceCategoryParser),\n}\n","import * as yup from 'yup';\r\n\r\nexport interface UpsertServiceRequest {\r\n    private: boolean;\r\n    category: number;\r\n    name: string;\r\n    duration: string;\r\n    cost: number;\r\n    isFrom: boolean;\r\n    description: string;\r\n    color: string;\r\n}\r\n\r\nexport const UpsertServiceRequestValidation = yup.object().shape({\r\n    private: yup.boolean().required(),\r\n    category: yup.number(),\r\n    name: yup.string().required().max(255),\r\n    duration: yup.string(),\r\n    cost: yup.number(),\r\n    description: yup.string().required().max(255),\r\n    color: yup.string().required(),\r\n});\r\n\r\nexport interface UpsertServiceCategoryRequest {\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\nexport const UpsertServiceCategoryRequestValidation = yup.object().shape({\r\n    name: yup.string().required().max(255),\r\n    color: yup.string().required(),\r\n});\r\n","import {Moment} from 'moment';\r\nimport {\r\n    Appointment,\r\n    AppointmentHistory,\r\n    CustomerAppointment,\r\n    CustomerRequestAppointment,\r\n    EmployeeEvent,\r\n    EventType\r\n} from 'src/app/api/appointments/models';\r\nimport {UpsertCustomerAppointmentRequest, UpsertEmployeeEventRequest} from 'src/app/api/appointments/requests';\r\nimport {PermissionModel} from 'src/app/api/auth';\r\nimport {customerParser} from 'src/app/api/customers';\r\nimport {employeeParser} from 'src/app/api/employees';\r\nimport {serviceParser} from 'src/app/api/services';\r\nimport {userParser} from 'src/app/api/users';\r\nimport {momentToIso} from 'src/app/shared/util/moment-helpers';\r\n\r\nexport function appointmentParser(data: any): Appointment {\r\n    return !!data.customer ? customerAppointmentParser(data) : employeeEventParser(data);\r\n}\r\n\r\nexport function customerRequestAppointmentParser(data: any): CustomerRequestAppointment {\r\n    const name = data.customer ?\r\n        data.status !== 'P' ? data.customer.firstName + ' - ' + data.service.name : 'pending request'\r\n        : 'lock time: ' + data.internalNotes;\r\n\r\n    return {\r\n        ...customerAppointmentParser(data),\r\n        name,\r\n        type: EventType.CustomerRequestAppointment,\r\n        customerNotes: data.customerNotes,\r\n        companyName: data.owner?.name ? data.owner.name : '',\r\n        request: data.request,\r\n        status: data.status ? data.status : 'P',\r\n    }\r\n}\r\n\r\nfunction customerAppointmentParser(data: any): CustomerAppointment {\r\n    return {\r\n        ...employeeEventParser(data),\r\n        type: EventType.CustomerAppointment,\r\n        customer: customerParser(data.customer),\r\n        service: serviceParser(data.service),\r\n    }\r\n}\r\n\r\nfunction employeeEventParser(data: any): EmployeeEvent {\r\n    const result = {\r\n        ...data,\r\n        permissionModel: PermissionModel.appointment,\r\n        type: EventType.EmployeeEvent,\r\n        name: '',\r\n        employee: employeeParser(data.employee),\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function appointmentHistoryParser(data: any): AppointmentHistory {\r\n    return {\r\n        ...appointmentParser(data),\r\n        historyType: data.historyType,\r\n        historyDate: data.historyDate,\r\n        historyUser: data.historyUser ? userParser(data.historyUser) : null,\r\n    }\r\n\r\n}\r\n\r\nexport function upsertCustomerAppointmentRequestParser(appointment: Appointment | null): UpsertCustomerAppointmentRequest {\r\n    if (!appointment || appointment.type === EventType.EmployeeEvent) {\r\n        return {\r\n            start: '',\r\n            end: '',\r\n            customer: 0,\r\n            employee: 0,\r\n            service: 0,\r\n            ignoreAvailability: false,\r\n            internalNotes: '',\r\n        }\r\n    }\r\n\r\n    const customerAppointment = appointment as CustomerAppointment;\r\n    return {\r\n        start: appointment.start,\r\n        end: appointment.end,\r\n        employee: appointment.employee.id,\r\n        internalNotes: appointment.internalNotes,\r\n        ignoreAvailability: false,\r\n        customer: customerAppointment.customer.id,\r\n        service: customerAppointment.service.id,\r\n    }\r\n}\r\n\r\nexport function upsertEmployeeEventRequestParser(appointment: Appointment | null): UpsertEmployeeEventRequest {\r\n    return appointment ? {\r\n        start: appointment.start,\r\n        end: appointment.end,\r\n        employee: appointment.employee.id,\r\n        internalNotes: appointment.internalNotes,\r\n        ignoreAvailability: false,\r\n    } : {\r\n        start: '',\r\n        end: '',\r\n        employee: 0,\r\n        ignoreAvailability: false,\r\n        internalNotes: '',\r\n    }\r\n}\r\n\r\nexport function blankEmployeeEvent(employeeId: number, start: Moment): EmployeeEvent {\r\n    // const start = moment.utc().startOf('day').add(hour, 'hour').add(minute, 'minute').toISOString()\r\n    return {\r\n        start: momentToIso(start),\r\n        end: momentToIso(start),\r\n        // @ts-ignore\r\n        employee: {id: employeeId},\r\n        deleted: null,\r\n        id: 0,\r\n        internalNotes: '',\r\n        name: '',\r\n        owner: 0,\r\n        type: EventType.EmployeeEvent\r\n    }\r\n}\r\n\r\nexport function blankCustomerAppointment(employeeId: number, value: Moment): CustomerAppointment {\r\n    return {\r\n        ...blankEmployeeEvent(employeeId, value),\r\n        type: EventType.CustomerAppointment,\r\n        // @ts-ignore\r\n        customer: {id: 0},\r\n        // @ts-ignore\r\n        service: {id: 0}\r\n\r\n    }\r\n}\r\n","import {Appointment, AppointmentHistory} from 'src/app/api/appointments/models';\r\nimport {AppointmentQueryParams, UpsertCustomerAppointmentRequest} from 'src/app/api/appointments/requests';\r\nimport {ApiListResult} from 'src/app/api/common/api-results';\r\nimport baseApiAxios from 'src/app/api/common/clients/base-api';\r\nimport baseModelRequest from 'src/app/api/common/clients/base-django-api';\r\nimport {appointmentHistoryParser, appointmentParser, customerRequestAppointmentParser} from './parsers';\r\n\r\nconst adminUrl = 'admin/appointments/'\r\nconst userUrl = 'appointments/'\r\n\r\nexport const adminAppointmentClient = {\r\n    ...baseModelRequest<Appointment, AppointmentQueryParams>(adminUrl, appointmentParser),\r\n    history(id: number): Promise<ApiListResult<AppointmentHistory>> {\r\n        return baseApiAxios.get<ApiListResult<AppointmentHistory>>(adminUrl + `${id}/history/`)\r\n            .then(project => {\r\n                project.data.results = project.data.results.map(appointmentHistoryParser);\r\n                return project.data;\r\n            });\r\n    },\r\n\r\n    createLock(model: any): Promise<Appointment> {\r\n        return baseApiAxios.post<Appointment>(adminUrl + 'lock/', model)\r\n            .then(result => customerRequestAppointmentParser(result.data));\r\n    },\r\n\r\n    updateLock(id: number, model: UpsertCustomerAppointmentRequest): Promise<Appointment> {\r\n        return baseApiAxios.patch<Appointment>(adminUrl + `${id}/plock/`, model)\r\n            .then(result => customerRequestAppointmentParser(result.data));\r\n    }\r\n}\r\n\r\nexport const appointmentClient = {\r\n    ...baseModelRequest(userUrl, customerRequestAppointmentParser),\r\n}\r\n","import {Moment} from 'moment';\nimport * as yup from 'yup';\n\nexport interface AppointmentQueryParams {\n    status?: string;\n    from_date?: string;\n    to_date?: string;\n    customer?: number;\n    employee?: number;\n    employees?: number[];\n    services?: number[];\n    show_all?: boolean;\n    delete_only?: boolean;\n}\n\nexport interface UpsertCustomerAppointmentRequest {\n    start: string;\n    end: string;\n    customer: number;\n    employee: number;\n    service: number;\n    internalNotes: string;\n    ignoreAvailability: boolean;\n}\n\nexport interface UpsertEmployeeEventRequest {\n    start: string;\n    end: string;\n    employee: number;\n    internalNotes: string | null;\n    ignoreAvailability: boolean;\n}\n\nexport const UpsertCustomerAppointmentRequestValidation = yup.object().shape({\n    start: yup.date(),\n    end: yup.date(),\n    employee: yup.number().required(),\n    customer: yup.number().required(),\n    service: yup.number().required(),\n    internalNotes: yup.string()\n});\n\nexport const UpsertEmployeeEventRequestValidation = yup.object().shape({\n    start: yup.date(),\n    end: yup.date(),\n    employee: yup.number().required(),\n    internalNotes: yup.string().required()\n});\n\nexport interface AdminAppointmentQueryParams {\n    fromDate?: Moment;\n    toDate?: Moment;\n    customer?: number;\n    employee?: number;\n    employees?: number[];\n    services?: number[];\n}\n","import {appointmentParser} from 'src/app/api/appointments';\r\nimport {companyParser} from 'src/app/api/companies';\r\nimport {RequestItem, RequestModel} from 'src/app/api/requests';\r\nimport {userParser} from 'src/app/api/users';\r\n\r\n\r\nexport function requestParser(data: any): RequestModel {\r\n    const items: {[key: string]: RequestItem} = {};\r\n    let itemsCount = 0;\r\n    for (const apt of data.appointments.map(appointmentParser)) {\r\n        itemsCount += 1;\r\n        if (items.hasOwnProperty(apt.employee.id)) {\r\n            items[apt.employee.id].appointments.push(apt);\r\n        } else {\r\n            items[apt.employee.id] = {\r\n                employee: apt.employee,\r\n                appointments: [apt]\r\n            };\r\n        }\r\n    }\r\n\r\n    return {\r\n        ...data,\r\n        owner: companyParser(data.owner),\r\n        user: data.user ? userParser(data.user) : null,\r\n        name: data.user?.name,\r\n        items: Object.keys(items).map(k => items[k]),\r\n        itemsCount\r\n    }\r\n\r\n}\r\n","import baseApiAxios from 'src/app/api/common/clients/base-api';\r\nimport baseModelRequest from 'src/app/api/common/clients/base-django-api';\r\nimport {RequestModel} from 'src/app/api/requests/models';\r\nimport {requestParser} from 'src/app/api/requests/parsers';\r\n\r\nconst baseUrl = 'admin/requests/';\r\n\r\nexport const adminRequestClient = {\r\n    ...baseModelRequest(baseUrl, requestParser),\r\n\r\n      accept: (id: number): Promise<RequestModel> => {\r\n    return baseApiAxios.patch<RequestModel>(baseUrl + `${id}/accept/`, {})\r\n        .then(result => requestParser(result.data));\r\n  },\r\n\r\n    reject: (id: number): Promise<RequestModel> => {\r\n        return baseApiAxios.patch<RequestModel>(baseUrl + `${id}/reject/`, {})\r\n            .then(result => requestParser(result.data));\r\n    },\r\n}\r\n\r\n","import {PermissionModel} from 'src/app/api/auth';\r\nimport {CompanyConfig} from 'src/app/api/company-config/models';\r\n\r\nexport function companyConfigParser(data: any): CompanyConfig {\r\n    return {\r\n        ...data,\r\n        name: data.id,\r\n        permissionModel: PermissionModel.config\r\n    }\r\n}\r\n","import moment from 'moment';\r\nimport {companyConfigParser} from 'src/app/api/company-config/parsers';\r\nimport {otherCategory, serviceCategoryParser, serviceParser} from 'src/app/api/services';\r\nimport {employeeParser} from '../employees';\r\nimport {Company, CompanyDetails, Slot} from './models';\r\n\r\nconst imageStorage = process.env.REACT_APP_IMAGE_API_URL || 'https://res.cloudinary.com/gchahm/';\r\n\r\nexport function companyDetailsParser(data: any): CompanyDetails {\r\n    let hasOtherCategory = false;\r\n    const services = data.services.map((service: any) => {\r\n        if (!service.category) {\r\n            hasOtherCategory = true;\r\n        }\r\n        return serviceParser(service);\r\n    });\r\n    const serviceCategories = data.serviceCategories.map((cat: any) => serviceCategoryParser(cat));\r\n    if (hasOtherCategory) {\r\n        serviceCategories.push(otherCategory());\r\n    }\r\n    return {\r\n        ...data,\r\n        avatar: imageStorage + data.avatar,\r\n        employees: data.employees.map((employee: any) => employeeParser(employee)),\r\n        services: services,\r\n        serviceCategories: serviceCategories,\r\n        config: companyConfigParser(data.config)\r\n    }\r\n}\r\n\r\nexport function companyParser(data: any): Company {\r\n    return {\r\n        ...data,\r\n        avatar: imageStorage + data.avatar,\r\n        config: companyConfigParser(data.config)\r\n    }\r\n}\r\n\r\n\r\nexport function slotParser(id: number, data: any): Slot {\r\n    const start = moment.utc(data.start);\r\n    const end = moment.utc(data.end);\r\n    return {\r\n        id,\r\n        date: start.clone().startOf('day').toISOString(),\r\n        start,\r\n        end,\r\n        title: start.format('HH:mm') + ' - ' + end.format('HH:mm'),\r\n    }\r\n}\r\n","import {PermissionModel} from 'src/app/api/auth';\nimport {IReadModel, TimeOfDay} from 'src/app/api/common/models';\n\n\nexport interface Service extends IReadModel {\n    private: boolean;\n    category: number | null;\n    name: string;\n    duration: TimeOfDay;\n    color: string;\n    description: string;\n    cost: number;\n    isFrom: boolean;\n    price: string;\n}\n\nexport interface ServiceCategory extends IReadModel {\n    id: number;\n    name: string;\n    color?: string;\n}\n\nexport const otherCategory = () => ({id: 0, name: 'Other', permissionModel: PermissionModel.servicecategory})\n","import {\r\n    AddNotesRequest,\r\n    CreateAppointmentRequest,\r\n    SlotRequestParams\r\n} from 'src/app/api/companies/requests';\r\nimport {RequestModel, requestParser} from 'src/app/api/requests';\r\nimport {convertMoment} from '../common/helpers';\r\nimport {CompanyDetails, Slot} from './models';\r\nimport baseModelRequest from '../common/clients/base-django-api';\r\nimport {companyParser, companyDetailsParser, slotParser} from './parsers';\r\nimport baseApiAxios from 'src/app/api/common/clients/base-api';\r\n\r\n\r\n\r\nconst baseUrl = 'companies/';\r\n\r\nexport const companyClient = {\r\n    ...baseModelRequest(baseUrl, companyParser),\r\n    fromName: (name: string): Promise<CompanyDetails> => {\r\n        return baseApiAxios.get<CompanyDetails>(baseUrl + name + '/')\r\n            .then(result => companyDetailsParser(result.data));\r\n    },\r\n\r\n    slots: (slotsParams: SlotRequestParams): Promise<Slot[] | null> => {\r\n        const params = convertMoment(slotsParams);\r\n        return baseApiAxios.get<Slot[]>(baseUrl + 'slots/', {params})\r\n            .then(result => result.data.map((slot, id) => slotParser(id, slot)))\r\n            .catch(error => null);\r\n    }\r\n};\r\n\r\n// const billingUrl = 'billing/';\r\nconst requestsUrl = 'requests/';\r\n\r\nexport const companyRequestClient = {\r\n    ...baseModelRequest<RequestModel>(requestsUrl, requestParser),\r\n\r\n    createAppointment(data: CreateAppointmentRequest) {\r\n        convertMoment(data);\r\n        return baseApiAxios.post<RequestModel>(requestsUrl + 'add/', data)\r\n            .then(result => requestParser(result.data));\r\n    },\r\n\r\n    patch(request: AddNotesRequest) {\r\n        return baseApiAxios.patch<RequestModel>(`${requestsUrl}${request.id}/`, {customerNotes: request.notes})\r\n            .then(result => requestParser(result.data));\r\n    },\r\n\r\n    complete(id: number) {\r\n        return baseApiAxios.patch<RequestModel>(requestsUrl + id + '/confirm/', {})\r\n            .then(result => requestParser(result.data));\r\n    },\r\n\r\n    delete(appointmentId: number) {\r\n        return baseApiAxios.post<RequestModel>(requestsUrl + 'delete/', {appointment: appointmentId})\r\n            .then(result => requestParser(result.data));\r\n    },\r\n\r\n    current(owner: number): Promise<RequestModel> {\r\n        return baseApiAxios.get<RequestModel>(requestsUrl + 'current/', {params: {owner}}).then(\r\n            result => requestParser(result.data)\r\n        );\r\n    },\r\n}\r\n  \r\n","export enum ACTION_TYPES {\r\n    SET_SHOW_DASHBOARD_TOGGLE = 'UI/SET_SHOW_DASHBOARD_TOGGLE',\r\n    TOGGLE_DASHBOARD_SIDENAV = 'UI/TOGGLE_DASHBOARD_SIDENAV',\r\n}\r\n","import moment, {Moment} from 'moment';\r\nimport {call, put, takeEvery, select} from 'redux-saga/effects'\r\nimport {RequestModel} from 'src/app/api/requests';\r\nimport {selectLoggedIn} from 'src/app/store/auth';\r\nimport {selectSelectedDate, selectSelectedServiceId} from 'src/app/store/companies/selectors';\r\nimport {ACTION_TYPES} from './types';\r\nimport {\r\n    addNotesRequestFail,\r\n    addNotesRequestSuccess,\r\n    bookSlotRequestFail,\r\n    bookSlotRequestSuccess,\r\n    companyDetailsRequestFail,\r\n    companyDetailsRequestSuccess,\r\n    confirmCartRequestFail,\r\n    confirmCartRequestSuccess,\r\n    currentCartRequest,\r\n    currentCartRequestFail,\r\n    currentCartRequestSuccess,\r\n    deleteAppointmentRequestFail,\r\n    deleteAppointmentRequestSuccess,\r\n    setCurrentRequest,\r\n    setSelectedDate,\r\n    slotsRequest,\r\n    slotsRequestFail,\r\n    slotsRequestSuccess\r\n} from './actions';\r\nimport {\r\n    companyClient,\r\n    companyRequestClient,\r\n    CompanyDetails,\r\n    Slot,\r\n    SlotRequestParams,\r\n    CreateAppointmentRequest, AddNotesRequest\r\n} from 'src/app/api/companies';\r\nimport {isMobile} from 'react-device-detect';\r\n\r\n\r\nfunction* requestCompanyDetails(action: { type: string, payload: string }) {\r\n    try {\r\n        const company: CompanyDetails = yield call(companyClient.fromName, action.payload);\r\n        yield put(companyDetailsRequestSuccess(company));\r\n    } catch (error) {\r\n        yield put(companyDetailsRequestFail(error));\r\n    }\r\n}\r\n\r\n\r\nfunction* triggerCartRequestIfLoggedIn(action: { type: string, payload: CompanyDetails }) {\r\n    const isLoggedIn: boolean = yield select(selectLoggedIn);\r\n    if (isLoggedIn) {\r\n        yield put(currentCartRequest(action.payload.id))\r\n    }\r\n}\r\n\r\n\r\nfunction* requestCartForCompany(action: { type: string, payload: number }) {\r\n    try {\r\n        const request: RequestModel = yield call(companyRequestClient.current, action.payload);\r\n        yield put(currentCartRequestSuccess());\r\n        yield put(setCurrentRequest(request));\r\n\r\n    } catch (error) {\r\n        yield put(currentCartRequestFail(error));\r\n    }\r\n}\r\n\r\n\r\nfunction* triggerSlotRequest(action: { type: string, payload: number }) {\r\n    const service: number = yield select(selectSelectedServiceId);\r\n    if (service) {\r\n        const start: Moment = yield select(selectSelectedDate);\r\n        const end = start.clone().add(isMobile ? 0 : 1, 'day').endOf('day');\r\n        yield put(slotsRequest({start, end, service}));\r\n    }\r\n}\r\n\r\n\r\nfunction* requestSlots(action: { type: string, payload: SlotRequestParams }) {\r\n    try {\r\n        const slots: Slot[] = yield call(companyClient.slots, action.payload);\r\n        yield put(slotsRequestSuccess(slots));\r\n    } catch (error) {\r\n        yield put(slotsRequestFail());\r\n    }\r\n}\r\n\r\n\r\nfunction* addOneDayToSelectedDate(action: { type: string, payload: number }) {\r\n    const selectedDate: Moment = yield select(selectSelectedDate);\r\n    yield put(setSelectedDate(selectedDate.clone().add(1, 'day')))\r\n}\r\n\r\n\r\nfunction* subtractOneDayToSelectedDate(action: { type: string, payload: number }) {\r\n    const selectedDate: Moment = yield select(selectSelectedDate);\r\n    yield put(setSelectedDate(selectedDate.clone().subtract(1, 'day')))\r\n}\r\n\r\n\r\nfunction* updateSelectedDate(action: { type: string, payload: number }) {\r\n    yield put(setSelectedDate(moment.utc().startOf('day')));\r\n}\r\n\r\n\r\nfunction* requestAddAppointment(action: { type: string, payload: CreateAppointmentRequest }) {\r\n    try {\r\n        const request: RequestModel = yield call(companyRequestClient.createAppointment, action.payload)\r\n        yield put(bookSlotRequestSuccess());\r\n        yield put(setCurrentRequest(request));\r\n    } catch (error) {\r\n        yield put(bookSlotRequestFail());\r\n    }\r\n}\r\n\r\n\r\nfunction* requestRemoveAppointment(action: { type: string, payload: number }) {\r\n    try {\r\n        const request: RequestModel = yield call(companyRequestClient.delete, action.payload)\r\n        yield put(deleteAppointmentRequestSuccess());\r\n        yield put(setCurrentRequest(request));\r\n    } catch (error) {\r\n        yield put(deleteAppointmentRequestFail(error));\r\n    }\r\n}\r\n\r\n\r\nfunction* requestAddNotes(action: { type: string, payload: AddNotesRequest }) {\r\n    try {\r\n        const request: RequestModel = yield call(companyRequestClient.patch, action.payload)\r\n        yield put(addNotesRequestSuccess());\r\n        yield put(setCurrentRequest(request));\r\n    } catch (error) {\r\n        yield put(addNotesRequestFail(error));\r\n    }\r\n}\r\n\r\n\r\nfunction* requestCartConfirmation(action: { type: string, payload: number }) {\r\n    try {\r\n        yield call(companyRequestClient.complete, action.payload);\r\n        yield put(confirmCartRequestSuccess());\r\n        yield put(setCurrentRequest(null));\r\n    } catch (error) {\r\n        yield put(confirmCartRequestFail(error));\r\n    }\r\n}\r\n\r\n\r\nexport function* companiesSaga() {\r\n    yield takeEvery(ACTION_TYPES.COMPANY_DETAILS_REQUEST, requestCompanyDetails);\r\n    yield takeEvery(ACTION_TYPES.COMPANY_DETAILS_REQUEST_SUCCESS, triggerCartRequestIfLoggedIn);\r\n    yield takeEvery(ACTION_TYPES.CURRENT_CART_REQUEST, requestCartForCompany);\r\n    yield takeEvery(ACTION_TYPES.SET_SELECTED_SERVICE_ID, triggerSlotRequest);\r\n    yield takeEvery(ACTION_TYPES.SET_SELECTED_DATE, triggerSlotRequest);\r\n    yield takeEvery(ACTION_TYPES.SLOTS_REQUEST, requestSlots);\r\n    yield takeEvery(ACTION_TYPES.SELECTED_DATE_ADD_ONE, addOneDayToSelectedDate);\r\n    yield takeEvery(ACTION_TYPES.SELECTED_DATE_SUBTRACT_ONE, subtractOneDayToSelectedDate);\r\n    yield takeEvery(ACTION_TYPES.SELECTED_DATE_TODAY, updateSelectedDate);\r\n    yield takeEvery(ACTION_TYPES.BOOK_SLOT_REQUEST, requestAddAppointment);\r\n    yield takeEvery(ACTION_TYPES.DELETE_APPOINTMENT_REQUEST, requestRemoveAppointment);\r\n    yield takeEvery(ACTION_TYPES.ADD_NOTES_REQUEST, requestAddNotes);\r\n    yield takeEvery(ACTION_TYPES.CONFIRM_CART_REQUEST, requestCartConfirmation);\r\n}\r\n","import {action} from 'typesafe-actions';\r\nimport {ACTION_TYPES} from './types';\r\n\r\n\r\nexport const setShowDashboardToggle = (value: boolean) =>\r\n    action(ACTION_TYPES.SET_SHOW_DASHBOARD_TOGGLE, value)\r\n\r\nexport const toggleDashboardSidenav = () =>\r\n    action(ACTION_TYPES.TOGGLE_DASHBOARD_SIDENAV)\r\n","\r\n\r\nexport enum AUTH_ROUTES {\r\n    ROOT = '/auth',\r\n    LOGIN = '/auth/login',\r\n    REGISTER = '/auth/register',\r\n    LOGOUT = '/auth/logout',\r\n}\r\n","import {Reducer} from 'redux';\r\nimport {ACTION_TYPES} from './types';\r\nimport {isMobile} from 'react-device-detect';\r\n\r\n\r\nexport interface UiState {\r\n    showDashboardToggle: boolean;\r\n    sidenavOpen: boolean;\r\n}\r\n\r\nconst initialState: UiState = {\r\n    showDashboardToggle: false,\r\n    sidenavOpen: !isMobile,\r\n}\r\n\r\nconst reducer: Reducer<UiState> = (state = initialState, {type, payload}) => {\r\n    switch (type) {\r\n        case ACTION_TYPES.SET_SHOW_DASHBOARD_TOGGLE:\r\n            return {...state, showDashboardToggle: payload}\r\n        case ACTION_TYPES.TOGGLE_DASHBOARD_SIDENAV:\r\n            return {...state, sidenavOpen: !state.sidenavOpen}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport {reducer as uiReducer};\r\n","import { RootState } from \"../store\"\r\n\r\n\r\nexport const selectShowDashboardToggle: (rootState: RootState) => boolean =\r\n    (rootState) => rootState.ui.showDashboardToggle\r\n\r\nexport const selectSidenavOpen: (rootState: RootState) => boolean =\r\n    (rootState) => rootState.ui.sidenavOpen\r\n","\r\n\r\nexport const ADMIN_ROUTES = {\r\n    ROOT: '/admin',\r\n    HOME: '/admin/home',\r\n    SERVICES: '/admin/services',\r\n    SCHEDULES: '/admin/schedules',\r\n    EMPLOYEES: '/admin/employees',\r\n    CUSTOMERS: '/admin/customers',\r\n    USERS: '/admin/users',\r\n    PERMISSION_GROUPS: '/admin/permission-groups',\r\n    APPOINTMENTS: '/admin/appointments'\r\n}\r\n","import React from 'react';\r\n\r\ninterface KFlexSpacerProps {\r\n    size?: number;\r\n}\r\n\r\nexport const KFlexSpacer: React.FunctionComponent<KFlexSpacerProps> = (\r\n    {\r\n        children,\r\n        size= 2\r\n    }) => {\r\n    const style = {margin: `${size}rem`}\r\n    return (\r\n        <div style={style}>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {FlexAlign, FlexJustify} from 'src/app/shared/components/flex/types';\r\n\r\n\r\ninterface KFlexBoxProps {\r\n    children: React.ReactNode;\r\n    className?: string;\r\n    justify?: FlexJustify;\r\n    align?: FlexAlign;\r\n}\r\n\r\n\r\nexport const KFlexColumn: React.FunctionComponent<KFlexBoxProps> = (\r\n    {\r\n        children,\r\n        justify,\r\n        align,\r\n        className = '',\r\n    }) => {\r\n    className += ` d-flex flex-column`;\r\n    if (align) {\r\n        className += ` align-items-${align}`;\r\n    }\r\n    if (justify) {\r\n        className += ` justify-content-${justify}`;\r\n    }\r\n    return (\r\n        <div className={className}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import React, {HTMLProps} from 'react';\r\nimport {FlexAlign, FlexJustify} from 'src/app/shared/components/flex/types';\r\n\r\ninterface KFlexRowProps extends HTMLProps<any> {\r\n    justify?: FlexJustify;\r\n    align?: FlexAlign;\r\n    flexWrap?: boolean;\r\n}\r\n\r\nexport const KFlexRow: React.FunctionComponent<KFlexRowProps> = (\r\n    {\r\n        children,\r\n        justify,\r\n        align,\r\n        className= '',\r\n        flexWrap = false,\r\n        ...rest\r\n    }) => {\r\n    className += ` d-flex flex-row${flexWrap ? ' flex-wrap' : ''}`;\r\n    if (justify) {\r\n        className += ` justify-content-${justify}`;\r\n    }\r\n    if (align)  {\r\n        className += ` align-items-${align}`;\r\n    }\r\n    return (\r\n        <div className={className} {...rest}>{children}</div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\ninterface KFlexRowItemProps {\r\n    children: React.ReactNode;\r\n    grow?: number;\r\n    basisPercent?: number;\r\n}\r\n\r\ninterface FlexStyle {\r\n    flexGrow?: number;\r\n    flex?: string;\r\n}\r\n\r\nexport const KFlexRowItem: React.FunctionComponent<KFlexRowItemProps> = (\r\n    {\r\n        children,\r\n        grow,\r\n        basisPercent\r\n    }) => {\r\n    const style: FlexStyle = {};\r\n    if (grow) {\r\n        style.flexGrow = grow;\r\n    }\r\n    if (basisPercent) {\r\n        style.flex = `${basisPercent}%`\r\n    }\r\n    return (\r\n        <div style={style}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import {\r\n    ActionCreatorWithoutPayload,\r\n    ActionCreatorWithPayload,\r\n    createAction,\r\n    createEntityAdapter,\r\n    createSelector,\r\n    createSlice, Dictionary,\r\n    EntitySelectors,\r\n    EntityState,\r\n    OutputParametricSelector\r\n} from '@reduxjs/toolkit';\r\nimport {call, put, select, takeEvery} from 'redux-saga/effects';\r\nimport {ApiBaseError} from 'src/app/api/common/api-errors';\r\nimport {ApiListResult} from 'src/app/api/common/api-results';\r\nimport {BaseModelRequest} from 'src/app/api/common/clients/base-django-api';\r\nimport {IReadModel} from 'src/app/api/common/models';\r\nimport {PayloadAction} from 'typesafe-actions';\r\n\r\n\r\ninterface BaseState<TEntity> extends EntityState<TEntity> {\r\n    isInitialized: boolean;\r\n    apiError: ApiBaseError | null;\r\n    editMode: boolean;\r\n    createdEntityId: number | null;\r\n}\r\n\r\nexport interface BaseSelectors<TEntity> extends EntitySelectors<TEntity, any> {\r\n    selectByIds: OutputParametricSelector<any, number[], NonNullable<TEntity>[], (res1: Dictionary<TEntity>, res2: number[]) => NonNullable<TEntity>[]>\r\n    selectIsInitialized: (state: any) => boolean;\r\n    selectApiError: (state: any) => ApiBaseError | null;\r\n    selectEditMode: (state: any) => boolean;\r\n    selectCreatedEntity: (state: any) => TEntity | undefined;\r\n}\r\n\r\nexport interface PatchActionPayload {\r\n    id: number,\r\n    entity: any\r\n}\r\n\r\nexport interface CreateActionPayload {\r\n    entity: any\r\n}\r\n\r\nexport interface BaseActions {\r\n    initializeStore: ActionCreatorWithoutPayload;\r\n    fetchEntities: ActionCreatorWithPayload<object>;\r\n    fetchEntitiesWithSetAll: ActionCreatorWithPayload<object>;\r\n    createEntity: ActionCreatorWithPayload<CreateActionPayload>;\r\n    patchEntity: ActionCreatorWithPayload<PatchActionPayload>;\r\n    deleteEntity: ActionCreatorWithPayload<number>;\r\n    setEditMode: ActionCreatorWithPayload<boolean>;\r\n}\r\n\r\nexport function kCreateBaseStore<TEntity extends IReadModel>(\r\n    sliceName: string,\r\n    client: BaseModelRequest<TEntity>,\r\n    selector: (state: any) => BaseState<TEntity>\r\n) {\r\n\r\n    const adapter = createEntityAdapter<TEntity>({\r\n        selectId: (entity) => entity.id,\r\n        sortComparer: (a, b) => a.name.localeCompare(b.name),\r\n    })\r\n\r\n    const actions: BaseActions = {\r\n        initializeStore: createAction<void>(`${sliceName}/initializeStore`),\r\n        fetchEntities: createAction<object>(`${sliceName}/fetchEntities`),\r\n        fetchEntitiesWithSetAll: createAction<object>(`${sliceName}/fetchEntitiesWithSetAll`),\r\n        createEntity: createAction<CreateActionPayload>(`${sliceName}/createEntity`),\r\n        patchEntity: createAction<PatchActionPayload>(`${sliceName}/patchEntity`),\r\n        deleteEntity: createAction<number>(`${sliceName}/deleteEntity`),\r\n        setEditMode: createAction<any>(`${sliceName}/setEditMode`),\r\n    }\r\n\r\n    const slice = createSlice({\r\n        name: sliceName,\r\n        initialState: adapter.getInitialState({\r\n            isInitialized: false,\r\n            apiError: null,\r\n            editMode: false,\r\n            createdEntityId: null\r\n        }) as BaseState<TEntity>,\r\n        reducers: {\r\n            // @ts-ignore\r\n            upsertMany: adapter.upsertMany,\r\n            // @ts-ignore\r\n            setAll: adapter.setAll,\r\n            // @ts-ignore\r\n            upsertOne: adapter.upsertOne,\r\n            // @ts-ignore\r\n            removeOne: adapter.removeOne,\r\n            setInitialized: (state, action) => {\r\n                state.isInitialized = action.payload\r\n            },\r\n            setApiError: (state, action) => {\r\n                state.apiError = action.payload\r\n            },\r\n            setEditMode: (state, action) => {\r\n                state.editMode = action.payload;\r\n            },\r\n            setCreatedEntityId: (state, action: PayloadAction<string, number>) => {\r\n                state.createdEntityId = action.payload;\r\n            }\r\n        }\r\n    });\r\n\r\n    const adapterSelectors = adapter.getSelectors(selector);\r\n    const selectors: BaseSelectors<TEntity> = {\r\n        ...adapterSelectors,\r\n        selectByIds: createSelector(\r\n            adapterSelectors.selectEntities,\r\n            (state: any, ids: number[]) => ids,\r\n            (entities, ids: number[]) => ids.map(id => entities[id]!).filter(service => !!service)\r\n        ),\r\n        selectIsInitialized: createSelector(selector, store => store.isInitialized),\r\n        selectApiError: createSelector(selector, store => store.apiError),\r\n        selectEditMode: createSelector(selector, store => store.editMode),\r\n        selectCreatedEntity: createSelector(selector, store =>\r\n            store.createdEntityId ? store.entities[store.createdEntityId] : undefined),\r\n    }\r\n\r\n    function* initializeStore(action: { type: string, payload: {} }) {\r\n        const isInitialized: boolean = yield select(selectors.selectIsInitialized);\r\n        if (isInitialized) return;\r\n        yield put(actions.fetchEntities(action.payload))\r\n    }\r\n\r\n    function* fetchEntities(action: { type: string, payload: object }) {\r\n        try {\r\n            const result: ApiListResult<TEntity> = yield call(client.get, action.payload);\r\n            yield put(slice.actions.upsertMany(result.results));\r\n            yield put(slice.actions.setInitialized(true));\r\n        } catch (error) {\r\n            yield put(slice.actions.setApiError(error));\r\n            yield put(slice.actions.setInitialized(false));\r\n        }\r\n    }\r\n\r\n    function* fetchEntitiesWithSetAll(action: { type: string, payload: object }) {\r\n        try {\r\n            const result: ApiListResult<TEntity> = yield call(client.get, action.payload);\r\n            yield put(slice.actions.setAll(result.results));\r\n        } catch (error) {\r\n            yield put(slice.actions.setApiError(error));\r\n        }\r\n    }\r\n\r\n    function* createEntity(action: { type: string, payload: CreateActionPayload }) {\r\n        try {\r\n            const entity: TEntity = yield call(client.post, action.payload.entity);\r\n            yield put(slice.actions.upsertOne(entity));\r\n            yield put(slice.actions.setApiError(null));\r\n            yield put(slice.actions.setEditMode(false));\r\n            yield put(slice.actions.setCreatedEntityId(entity.id));\r\n        } catch (error) {\r\n            yield put(slice.actions.setApiError(error));\r\n        }\r\n    }\r\n\r\n    function* patchEntity(action: { type: string, payload: PatchActionPayload }) {\r\n        try {\r\n            const entity: TEntity = yield call(client.patch, action.payload.id, action.payload.entity);\r\n            yield put(slice.actions.upsertOne(entity));\r\n            yield put(slice.actions.setApiError(null));\r\n            yield put(slice.actions.setEditMode(false));\r\n        } catch (error) {\r\n            yield put(slice.actions.setApiError(error));\r\n        }\r\n    }\r\n\r\n    function* deleteEntity(action: { type: string, payload: number }) {\r\n        try {\r\n            yield call(client.delete, action.payload);\r\n            yield put(slice.actions.removeOne(action.payload));\r\n            yield put(slice.actions.setApiError(null));\r\n            yield put(slice.actions.setEditMode(false));\r\n        } catch (error) {\r\n            yield put(slice.actions.setApiError(error));\r\n        }\r\n    }\r\n\r\n    function* sagas() {\r\n        yield takeEvery(actions.initializeStore.type, initializeStore);\r\n        yield takeEvery(actions.fetchEntities.type, fetchEntities);\r\n        yield takeEvery(actions.fetchEntitiesWithSetAll.type, fetchEntitiesWithSetAll);\r\n        yield takeEvery(actions.createEntity.type, createEntity);\r\n        yield takeEvery(actions.patchEntity.type, patchEntity);\r\n        yield takeEvery(actions.deleteEntity.type, deleteEntity);\r\n    }\r\n\r\n    return {\r\n        actions,\r\n        adapter,\r\n        reducer: slice.reducer,\r\n        slice,\r\n        sagas,\r\n        selectors\r\n    }\r\n}\r\n","import {adminAppointmentClient} from 'src/app/api/appointments';\r\nimport {kCreateBaseStore} from 'src/app/store/admin/common/adapter';\r\n\r\nconst storeName = 'adminAppointments';\r\n\r\nconst {\r\n    actions,\r\n    adapter,\r\n    reducer,\r\n    sagas,\r\n    selectors\r\n} = kCreateBaseStore(storeName, adminAppointmentClient, (state) => state.adminAppointments);\r\n\r\nexport {reducer as appointmentReducer}\r\nexport {actions as appointmentActions}\r\nexport {adapter as appointmentAdapter}\r\nexport {selectors as appointmentSelectors}\r\nexport {sagas as adminAppointmentSaga}\r\n\r\n","import {adminCustomerClient} from 'src/app/api/customers';\r\nimport {kCreateBaseStore} from 'src/app/store/admin/common/adapter';\r\n\r\nconst storeName = 'adminCustomers';\r\n\r\nconst {\r\n    actions,\r\n    adapter,\r\n    reducer,\r\n    sagas,\r\n    selectors\r\n} = kCreateBaseStore(storeName, adminCustomerClient, (state) => state.adminCustomers);\r\n\r\nexport {reducer as customerReducer}\r\nexport {actions as customerActions}\r\nexport {adapter as customerAdapter}\r\nexport {selectors as customerSelectors}\r\nexport {sagas as adminCustomerSaga}\r\n\r\n","import moment from 'moment';\r\n\r\nexport const adminDashboard = 'adminDashboard';\r\n\r\nexport interface AdminDashboardState {\r\n    currentDate: string;\r\n    selectedPanelId: number | null,\r\n    panelHours: number[];\r\n    slotSize: number;\r\n}\r\n\r\nexport const initialState: AdminDashboardState = {\r\n    currentDate: moment.utc().startOf('day').toISOString(),\r\n    selectedPanelId: null,\r\n    panelHours: Array.from(Array(24).keys()),\r\n    slotSize: 6\r\n}\r\n","import {createAction} from '@reduxjs/toolkit';\r\nimport {Moment} from 'moment';\r\nimport {momentToIso} from 'src/app/shared/util/moment-helpers';\r\nimport {adminDashboard} from 'src/app/store/admin/dashboard/state';\r\n\r\nconst setCurrentDate = createAction(\r\n    `${adminDashboard}/setCurrentDate`,\r\n    (value: Moment) => ({payload: momentToIso(value.startOf('day'))})\r\n);\r\n\r\nconst setSelectedPanelId = createAction<number>(`${adminDashboard}/setCurrentPanel`);\r\n\r\nexport const actions = {\r\n    setCurrentDate,\r\n    setSelectedPanelId\r\n}\r\n","import {createReducer} from '@reduxjs/toolkit';\r\nimport {PayloadAction} from 'typesafe-actions';\r\nimport {actions} from './actions';\r\nimport {initialState} from './state';\r\n\r\n\r\nexport const reducer = createReducer(\r\n    initialState,\r\n    (builder) => {\r\n        builder.addCase(actions.setCurrentDate.type, (state, action: PayloadAction<any, string>) => {\r\n            state.currentDate = action.payload;\r\n        });\r\n        builder.addCase(actions.setSelectedPanelId.type, (state, action: PayloadAction<any, number>) => {\r\n            state.selectedPanelId = action.payload;\r\n        });\r\n    }\r\n)\r\n","import baseModelRequest from 'src/app/api/common/clients/base-django-api';\nimport {schedulingPanelParser} from 'src/app/api/scheduling-panels/parsers';\n\nconst baseUrl = 'admin/panels/';\n\nexport const adminSchedulingPanelsClient = {\n    ...baseModelRequest(baseUrl, schedulingPanelParser)\n}\n","import {adminSchedulingPanelsClient} from 'src/app/api/scheduling-panels/clients';\r\nimport {kCreateBaseStore} from 'src/app/store/admin/common/adapter';\r\n\r\nconst storeName = 'adminSchedulingPanels';\r\n\r\nconst {\r\n    actions,\r\n    adapter,\r\n    reducer,\r\n    sagas,\r\n    selectors\r\n} = kCreateBaseStore(storeName, adminSchedulingPanelsClient, (state) => state.adminSchedulingPanels);\r\n\r\nexport {reducer as schedulingPanelReducer}\r\nexport {actions as schedulingPanelActions}\r\nexport {adapter as schedulingPanelAdapter}\r\nexport {selectors as schedulingPanelSelectors}\r\nexport {sagas as adminSchedulingPanelSaga}\r\n\r\n","import {PermissionModel} from 'src/app/api/auth';\r\nimport {SchedulingPanel} from 'src/app/api/scheduling-panels/models';\r\nimport {UpsertSchedulingPanelRequest} from 'src/app/api/scheduling-panels/requests';\r\n\r\n\r\nexport function schedulingPanelParser(data: any): SchedulingPanel {\r\n    return {\r\n        ...data,\r\n        permissionModel: PermissionModel.schedulingpanel,\r\n    }\r\n}\r\n\r\nexport function upsertSchedulingPanelRequestParser(panel: SchedulingPanel | null): UpsertSchedulingPanelRequest {\r\n    return panel ? {name: panel.name, employees: panel.employees} : {employees: [], name: ''}\r\n}\r\n","import {createSelector} from '@reduxjs/toolkit';\r\nimport {stringToMoment} from 'src/app/shared/util/moment-helpers';\r\nimport {schedulingPanelSelectors} from 'src/app/store/admin/panels';\r\nimport {RootState} from 'src/app/store/store';\r\n\r\n\r\nconst baseSelector = (state: RootState) => state.adminDashboard;\r\n\r\nconst selectCurrentDateString = createSelector(\r\n    baseSelector,\r\n    store => store.currentDate\r\n)\r\n\r\nconst selectCurrentDate = createSelector(\r\n    selectCurrentDateString,\r\n    date => stringToMoment(date)\r\n)\r\n\r\nconst selectSelectedPanelId = createSelector(\r\n    baseSelector,\r\n    store => store.selectedPanelId\r\n)\r\n\r\nconst selectSelectedPanel = createSelector(\r\n    (state) => state,\r\n    selectSelectedPanelId,\r\n    (state, id) => id ? schedulingPanelSelectors.selectById(state, id) : null\r\n)\r\n\r\nconst selectPanelHours = createSelector(\r\n    baseSelector,\r\n    store => store.panelHours\r\n)\r\n\r\nconst selectSlotSize = createSelector(\r\n    baseSelector,\r\n    store => store.slotSize\r\n)\r\n\r\n\r\nexport const selectors = {\r\n    selectCurrentDate,\r\n    selectSelectedPanel,\r\n    selectPanelHours,\r\n    selectSlotSize\r\n}\r\n","import {adminEmployeeClient} from 'src/app/api/employees';\r\nimport {kCreateBaseStore} from 'src/app/store/admin/common/adapter';\r\n\r\nconst storeName = 'adminEmployees';\r\n\r\nconst {\r\n    actions,\r\n    adapter,\r\n    reducer,\r\n    sagas,\r\n    slice,\r\n    selectors\r\n} = kCreateBaseStore(storeName, adminEmployeeClient, (state) => state.adminEmployees);\r\n\r\nconst reducerActions = slice.actions;\r\n\r\nexport {reducer as employeeReducer}\r\nexport {actions as employeeActions}\r\nexport {reducerActions as employeeReducerActions}\r\nexport {adapter as employeeAdapter}\r\nexport {selectors as employeeSelectors}\r\nexport {sagas as adminEmployeeSaga}\r\n\r\n","import {PermissionModel} from 'src/app/api/auth';\r\nimport {Permission, PermissionGroup} from 'src/app/api/permissions/models';\r\nimport {UpsertPermissionGroupRequest} from 'src/app/api/permissions/requests';\r\n\r\n\r\nexport function permissionGroupParser(data: any): PermissionGroup {\r\n    return {\r\n        ...data,\r\n        permissionModel: PermissionModel.groupprofile,\r\n        permissions: data.permissions ? data.permissions : []\r\n    }\r\n}\r\n\r\nexport function permissionParser(data: any): Permission {\r\n    return {\r\n        ...data,\r\n    }\r\n}\r\n\r\nexport function upsertPermissionGroupRequestParser(permissionGroup: PermissionGroup | null): UpsertPermissionGroupRequest {\r\n    return permissionGroup ? {\r\n        name: permissionGroup.name,\r\n        permissions: permissionGroup.permissions\r\n    } : {\r\n        name: '',\r\n        permissions: []\r\n    }\r\n}\r\n","import baseApiAxios from 'src/app/api/common/clients/base-api';\nimport baseModelRequest from 'src/app/api/common/clients/base-django-api';\nimport {Permission} from 'src/app/api/permissions/models';\nimport {permissionGroupParser, permissionParser} from 'src/app/api/permissions/parsers';\n\n\nconst baseUrl = 'core/groups/';\n\nexport const adminPermissionGroupClient = {\n    ...baseModelRequest(baseUrl, permissionGroupParser),\n    permissions(): Promise<Permission[]> {\n        return baseApiAxios\n            .get<Permission[]>(baseUrl + 'permissions/')\n            .then(result => result.data.map(permissionParser));\n    }\n}\n\n","import * as yup from 'yup';\r\n\r\nexport interface UpsertPermissionGroupRequest {\r\n  name: string;\r\n  permissions: number[];\r\n}\r\n\r\n\r\nexport interface UpsertPermissionRequest {\r\n    id: number;\r\n    name: string;\r\n    codename: string;\r\n}\r\n\r\nexport const UpsertPermissionRequestValidation = yup.object().shape({\r\n    name: yup.string().required(),\r\n    permissions: yup.array(yup.number()).required().min(1),\r\n});\r\n","import {adminPermissionGroupClient} from 'src/app/api/permissions';\r\nimport {kCreateBaseStore} from 'src/app/store/admin/common/adapter';\r\n\r\nconst storeName = 'adminPermissionGroups';\r\n\r\nconst {\r\n    actions,\r\n    adapter,\r\n    reducer,\r\n    sagas,\r\n    selectors\r\n} = kCreateBaseStore(storeName, adminPermissionGroupClient, (state) => state.adminPermissionGroups);\r\n\r\n\r\nexport {reducer as permissionGroupReducer}\r\nexport {actions as permissionGroupActions}\r\nexport {adapter as permissionGroupAdapter}\r\nexport {selectors as permissionGroupSelectors}\r\nexport {sagas as adminPermissionGroupSaga}\r\n\r\n","import {createAction, createSelector, createSlice} from '@reduxjs/toolkit';\r\nimport {call, put, select, takeEvery} from 'redux-saga/effects';\r\nimport {ApiBaseError} from 'src/app/api/common/api-errors';\r\nimport {adminPermissionGroupClient, Permission} from 'src/app/api/permissions';\r\nimport {RootState} from 'src/app/store/store';\r\nimport {PayloadAction} from 'typesafe-actions';\r\n\r\n\r\ninterface PermissionsState {\r\n    initialized: boolean;\r\n    permissions: Permission[];\r\n    apiError: ApiBaseError | null;\r\n}\r\n\r\nconst initialState: PermissionsState = {\r\n    initialized: false,\r\n    permissions: [],\r\n    apiError: null\r\n}\r\n\r\nconst permissionSlice = createSlice({\r\n    name: 'adminPermissions',\r\n    initialState,\r\n    reducers: {\r\n        setPermissions(state, action: PayloadAction<string, Permission[]>) {\r\n            state.permissions = action.payload;\r\n            state.initialized = true;\r\n        },\r\n        setApiError(state, action: PayloadAction<string, ApiBaseError>) {\r\n            state.apiError = action.payload;\r\n            state.initialized = false;\r\n        }\r\n    }\r\n})\r\n\r\nconst {reducer, actions, name} = permissionSlice;\r\n\r\nconst baseSelector: (rootState: RootState) => PermissionsState =\r\n    (rootState) => rootState.adminPermissions;\r\n\r\nconst selectors = {\r\n    selectAll: createSelector(\r\n        baseSelector,\r\n        state => state.permissions\r\n    ),\r\n    selectIsInitialized: createSelector(\r\n        baseSelector,\r\n        state => state.initialized\r\n    )\r\n}\r\n\r\nexport const permissionsActions = {\r\n    initializeStore: createAction(`${name}/initializeStore`)\r\n}\r\n\r\nfunction* initializeStore(action: { type: string, payload: string }) {\r\n    const isInitialized: boolean = yield select(selectors.selectIsInitialized);\r\n    if (!isInitialized) {\r\n        try {\r\n            const permissions: Permission[] = yield call(adminPermissionGroupClient.permissions);\r\n            yield put(actions.setPermissions(permissions));\r\n        } catch (error) {\r\n            yield put(actions.setApiError(error));\r\n        }\r\n    }\r\n}\r\n\r\nexport function* adminPermissionsSagas() {\r\n    yield takeEvery(permissionsActions.initializeStore.type, initializeStore);\r\n}\r\n\r\nexport {reducer as permissionReducer}\r\nexport {selectors as permissionSelectors}\r\n","import baseModelRequest from 'src/app/api/common/clients/base-django-api';\nimport {scheduleParser} from './parsers';\n\nconst baseUrl = 'admin/schedules/';\n\nexport const adminScheduleClient = {\n    ...baseModelRequest(baseUrl, scheduleParser),\n}\n","export enum ACTION_TYPES {\r\n    EVENTS_REQUEST = 'USERS/EVENTS_REQUEST',\r\n    EVENTS_REQUEST_SUCCESS = 'USERS/EVENTS_REQUEST_SUCCESS',\r\n    EVENTS_REQUEST_FAIL = 'USERS/EVENTS_REQUEST_FAIL',\r\n    SET_SELECTED_EVENT = 'USERS/SET_SELECTED_EVENT',\r\n}\r\n","import {adminScheduleClient, Schedule} from 'src/app/api/schedule';\r\nimport {kCreateBaseStore} from 'src/app/store/admin/common/adapter';\r\n\r\nconst storeName = 'adminSchedules';\r\n\r\nconst {\r\n    actions,\r\n    adapter,\r\n    reducer,\r\n    sagas,\r\n    selectors\r\n} = kCreateBaseStore<Schedule>(storeName, adminScheduleClient, (state) => state.adminSchedules);\r\n\r\nexport {reducer as scheduleReducer}\r\nexport {actions as scheduleActions}\r\nexport {adapter as scheduleAdapter}\r\nexport {selectors as scheduleSelectors}\r\nexport {sagas as adminScheduleSaga}\r\n\r\n","import {adminServiceCategoryClient, ServiceCategory} from 'src/app/api/services';\r\nimport {kCreateBaseStore} from 'src/app/store/admin/common/adapter';\r\n\r\nconst storeName = 'adminServiceCategories';\r\n\r\nconst {\r\n    actions,\r\n    adapter,\r\n    reducer,\r\n    sagas,\r\n    selectors\r\n} = kCreateBaseStore<ServiceCategory>(storeName, adminServiceCategoryClient, (state) => state.adminServiceCategories);\r\n\r\nexport {reducer as serviceCategoryReducer}\r\nexport {actions as serviceCategoryActions}\r\nexport {adapter as serviceCategoryAdapter}\r\nexport {selectors as serviceCategorySelectors}\r\nexport {sagas as adminServiceCategorySaga}\r\n\r\n","import {adminUserClient} from 'src/app/api/users';\r\nimport {kCreateBaseStore} from 'src/app/store/admin/common/adapter';\r\n\r\nconst storeName = 'adminUsers';\r\n\r\nconst {\r\n    actions,\r\n    adapter,\r\n    reducer,\r\n    sagas,\r\n    selectors\r\n} = kCreateBaseStore(storeName, adminUserClient, (state) => state.adminUsers);\r\n\r\nexport {reducer as userReducer}\r\nexport {actions as userActions}\r\nexport {adapter as userAdapter}\r\nexport {selectors as userSelectors}\r\nexport {sagas as adminUserSaga}\r\n\r\n","import {Appointment} from 'src/app/api/appointments';\r\nimport {ApiBaseError} from 'src/app/api/common/api-errors';\r\nimport {RequestModelGetParams} from 'src/app/api/companies';\r\nimport {momentToIso} from 'src/app/shared/util/moment-helpers';\r\nimport {ACTION_TYPES} from 'src/app/store/users/types';\r\nimport {action} from 'typesafe-actions';\r\n\r\n\r\nexport const eventsRequest = (request: RequestModelGetParams) =>\r\n    action(ACTION_TYPES.EVENTS_REQUEST, {start: momentToIso(request.start), end: momentToIso(request.end)})\r\n\r\nexport const eventsRequestSuccess = (start: string, end: string, events: Appointment[]) =>\r\n    action(ACTION_TYPES.EVENTS_REQUEST_SUCCESS, {start, end, events})\r\n\r\nexport const eventsRequestFail = (error: ApiBaseError) =>\r\n    action(ACTION_TYPES.EVENTS_REQUEST_FAIL, error)\r\n\r\nexport const setSelectedEvent = (appointment: Appointment | null) =>\r\n    action(ACTION_TYPES.SET_SELECTED_EVENT, appointment)\r\n","import {Reducer} from 'redux';\r\nimport {CustomerEvent} from 'src/app/api/appointments';\r\nimport {ACTION_TYPES} from './types';\r\n\r\n\r\nexport interface UsersState {\r\n    events: CustomerEvent[] | null;\r\n    selectedEvent: CustomerEvent | null;\r\n    start: string | null;\r\n    end: string | null;\r\n}\r\n\r\nconst initialState: UsersState = {\r\n    events: null,\r\n    selectedEvent: null,\r\n    start: null,\r\n    end: null\r\n}\r\n\r\nconst reducer: Reducer<UsersState> = (state = initialState, {type, payload}) => {\r\n    switch (type) {\r\n        case ACTION_TYPES.EVENTS_REQUEST:\r\n            return {...state}\r\n        case ACTION_TYPES.EVENTS_REQUEST_SUCCESS:\r\n            return {...state, ...payload}\r\n        case ACTION_TYPES.SET_SELECTED_EVENT:\r\n            return {...state, selectedEvent: payload}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport {reducer as usersReducer};\r\n","import {createSelector} from '@reduxjs/toolkit';\r\nimport {RootState} from 'src/app/store/store';\r\n\r\nconst selectStore = (rootState: RootState) => rootState.users;\r\n\r\nexport const selectEvents = createSelector(\r\n    [selectStore],\r\n    (usersState) => usersState.events\r\n)\r\n\r\nexport const selectStart = createSelector(\r\n    [selectStore],\r\n    (usersState) => usersState.start\r\n)\r\n\r\nexport const selectEnd = createSelector(\r\n    [selectStore],\r\n    (usersState) => usersState.end\r\n)\r\n\r\nexport const selectSelectedEvent = createSelector(\r\n    [selectStore],\r\n    (usersState) => usersState.selectedEvent\r\n)\r\n","import {call, put, select, takeEvery} from 'redux-saga/effects';\r\nimport {Appointment, appointmentClient} from 'src/app/api/appointments';\r\nimport {ApiListResult} from 'src/app/api/common/api-results';\r\nimport {eventsRequestFail, eventsRequestSuccess} from 'src/app/store/users/actions';\r\nimport {selectEnd, selectStart} from 'src/app/store/users/selectors';\r\nimport {ACTION_TYPES} from 'src/app/store/users/types';\r\n\r\n\r\nfunction* requestEvents(action: { type: string, payload: { start: string, end: string } }) {\r\n    const start: string = yield select(selectStart);\r\n    const end: string = yield select(selectEnd);\r\n    if (start === action.payload.start && end === action.payload.end) {\r\n        return;\r\n    }\r\n    try {\r\n        const response: ApiListResult<Appointment> = yield call(appointmentClient.get, action.payload);\r\n        yield put(eventsRequestSuccess(action.payload.start, action.payload.end, response.results));\r\n    } catch (error) {\r\n        yield put(eventsRequestFail(error));\r\n    }\r\n}\r\n\r\nexport function* userSaga() {\r\n    yield takeEvery(ACTION_TYPES.EVENTS_REQUEST, requestEvents);\r\n}\r\n","import {createSelector} from '@reduxjs/toolkit';\r\nimport {adminServiceClient, Service} from 'src/app/api/services';\r\nimport {kCreateBaseStore} from 'src/app/store/admin/common/adapter';\r\nimport {serviceCategorySelectors} from '../serviceCategories';\r\n\r\nconst storeName = 'adminServices';\r\n\r\nconst {\r\n    actions,\r\n    adapter,\r\n    reducer,\r\n    sagas,\r\n    selectors\r\n} = kCreateBaseStore<Service>(storeName, adminServiceClient, (state) => state.adminServices);\r\n\r\nconst selectServicesWithCategories = createSelector(\r\n    selectors.selectAll,\r\n    serviceCategorySelectors.selectAll,\r\n    (services, categories) => categories.map(cat =>\r\n        ({...cat, children: services.filter(s => s.category === cat.id)})\r\n    )\r\n)\r\n\r\nconst selectServicesWithCategoriesByIds = createSelector(\r\n    selectors.selectAll,\r\n    serviceCategorySelectors.selectByIds,\r\n    (services, categories) => categories.map(cat =>\r\n        ({...cat, children: services.filter(s => s.category === cat.id)})\r\n    )\r\n)\r\n\r\nexport const serviceSelectors = {\r\n    ...selectors,\r\n    selectServicesWithCategories,\r\n    selectServicesWithCategoriesByIds\r\n};\r\n\r\nexport {reducer as serviceReducer}\r\nexport {actions as serviceActions}\r\nexport {adapter as serviceAdapter}\r\nexport {sagas as adminServiceSaga}\r\n\r\n","import { all, fork } from 'redux-saga/effects'\r\nimport {adminAppointmentSaga} from 'src/app/store/admin/appointments';\r\nimport {adminCustomerSaga} from 'src/app/store/admin/customers';\r\nimport {adminEmployeeSaga} from 'src/app/store/admin/employees';\r\nimport {adminSchedulingPanelSaga} from 'src/app/store/admin/panels';\r\nimport {adminPermissionGroupSaga} from 'src/app/store/admin/permissionGroups';\r\nimport {adminPermissionsSagas} from 'src/app/store/admin/permissions';\r\nimport {adminScheduleSaga} from 'src/app/store/admin/schedules';\r\nimport {adminServiceCategorySaga} from 'src/app/store/admin/serviceCategories';\r\nimport {adminServiceSaga} from 'src/app/store/admin/services';\r\nimport {adminUserSaga} from 'src/app/store/admin/users';\r\nimport {userSaga} from 'src/app/store/users';\r\nimport {authSaga} from './auth';\r\nimport {companiesSaga} from './companies';\r\n\r\n\r\nexport function* rootSaga() {\r\n    yield all([\r\n        fork(authSaga),\r\n        fork(companiesSaga),\r\n        fork(userSaga),\r\n        fork(adminServiceSaga),\r\n        fork(adminServiceCategorySaga),\r\n        fork(adminEmployeeSaga),\r\n        fork(adminCustomerSaga),\r\n        fork(adminScheduleSaga),\r\n        fork(adminUserSaga),\r\n        fork(adminPermissionGroupSaga),\r\n        fork(adminPermissionsSagas),\r\n        fork(adminAppointmentSaga),\r\n        fork(adminSchedulingPanelSaga),\r\n    ])\r\n}\r\n","import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport {appointmentReducer} from 'src/app/store/admin/appointments';\r\nimport {customerReducer} from 'src/app/store/admin/customers';\r\nimport {adminDashboardReducer} from 'src/app/store/admin/dashboard';\r\nimport {employeeReducer} from 'src/app/store/admin/employees';\r\nimport {schedulingPanelReducer} from 'src/app/store/admin/panels';\r\nimport {permissionGroupReducer} from 'src/app/store/admin/permissionGroups';\r\nimport {permissionReducer} from 'src/app/store/admin/permissions';\r\nimport {scheduleReducer} from 'src/app/store/admin/schedules';\r\nimport {serviceCategoryReducer} from 'src/app/store/admin/serviceCategories';\r\nimport {userReducer} from 'src/app/store/admin/users';\r\nimport {authReducer} from 'src/app/store/auth';\r\nimport {companiesReducer} from 'src/app/store/companies';\r\nimport {uiReducer} from 'src/app/store/ui';\r\nimport {usersReducer} from 'src/app/store/users';\r\nimport {rootSaga} from './root-saga';\r\nimport {serviceReducer} from './admin/services';\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        auth: authReducer,\r\n        users: usersReducer,\r\n        ui: uiReducer,\r\n        companies: companiesReducer,\r\n        adminDashboard: adminDashboardReducer,\r\n        adminAppointments: appointmentReducer,\r\n        adminSchedulingPanels: schedulingPanelReducer,\r\n        adminServices: serviceReducer,\r\n        adminServiceCategories: serviceCategoryReducer,\r\n        adminEmployees: employeeReducer,\r\n        adminCustomers: customerReducer,\r\n        adminSchedules: scheduleReducer,\r\n        adminUsers: userReducer,\r\n        adminPermissionGroups: permissionGroupReducer,\r\n        adminPermissions: permissionReducer\r\n    },\r\n    middleware: [sagaMiddleware],\r\n})\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {hasPermission, PermissionModel, PermissionType} from 'src/app/api/auth';\r\nimport {authApi} from \"src/app/api/auth/clients\";\r\nimport {User} from 'src/app/api/users';\r\nimport {useAppSelector} from 'src/app/store';\r\nimport {selectLoadingUser, selectUser, setLoadingUser, setUser} from 'src/app/store/auth';\r\n\r\ninterface AuthAutoLoginProps {\r\n    children: React.ReactNode;\r\n}\r\n\r\nconst AuthAutoLogin: React.FunctionComponent<AuthAutoLoginProps> = (\r\n    {children}\r\n) => {\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(setLoadingUser(true));\r\n        authApi.whoAmI().then(user => {\r\n            dispatch(setUser(user));\r\n        });\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <>\r\n            {children}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AuthAutoLogin;\r\n\r\n\r\nexport function useCurrentUser(): [boolean, User | null] {\r\n    const user = useAppSelector(selectUser);\r\n    const loading = useAppSelector(selectLoadingUser);\r\n    return [loading, user];\r\n}\r\n\r\nexport function useUserHasPermission(type: PermissionType, model?: PermissionModel): boolean {\r\n    const user = useAppSelector(selectUser);\r\n    if (!model) return true;\r\n    return !!user && hasPermission(user, type, model);\r\n}\r\n","import React from 'react';\r\nimport {RouteComponentProps} from 'react-router';\r\nimport {Redirect, Route, useHistory, useLocation} from 'react-router-dom';\r\nimport Spinner from 'reactstrap/es/Spinner';\r\nimport {PermissionModel, PermissionType} from 'src/app/api/auth';\r\nimport {AUTH_ROUTES} from 'src/app/modules/auth/urls';\r\nimport {KFlexRow} from 'src/app/shared/components/flex';\r\nimport {useCurrentUser, useUserHasPermission} from 'src/app/shared/context-providers/auth-auto-login';\r\n\r\n\r\nexport type QueryParams = Record<string, string | number | undefined>;\r\n\r\nexport function useQueryParams(): { [key: string]: string } {\r\n    const params = new URLSearchParams(useLocation().search);\r\n    const result: { [key: string]: string } = {};\r\n    params.forEach(((value, key) => result[key] = value));\r\n    return result;\r\n}\r\n\r\nexport function useKHistory() {\r\n    const history = useHistory();\r\n    const push = (value: string, params?: QueryParams) => history.push(pathWithParams(value, params));\r\n    return {...history, push}\r\n}\r\n\r\n\r\ninterface ProtectedRouteProps {\r\n    path: string;\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n    permissionModel?: PermissionModel;\r\n    permissionType?: PermissionType;\r\n}\r\n\r\nexport const ProtectedRoute: React.FunctionComponent<ProtectedRouteProps> = (\r\n    {\r\n        path,\r\n        component,\r\n        permissionModel,\r\n        permissionType= PermissionType.view,\r\n    }) => {\r\n    const {returnUrl, ...params} = useQueryParams();\r\n    const {location: {pathname}} = useKHistory();\r\n    const [loading, user] = useCurrentUser();\r\n    const hasPermission = useUserHasPermission(permissionType, permissionModel);\r\n\r\n    return (\r\n        <>\r\n            {loading &&\r\n            <KFlexRow className=\"h-100vh\" align={'center'} justify={'center'}>\r\n                Loading\r\n                <Spinner className={\"ml-2\"} color=\"primary\"/>\r\n            </KFlexRow>\r\n            }\r\n            {!loading &&\r\n            <>\r\n                {user && hasPermission &&\r\n                <Route path={path} component={component}/>\r\n                }\r\n                {user && !hasPermission &&\r\n                    <>\r\n                        unauthorized access\r\n                    </>\r\n                }\r\n                {!user &&\r\n                <Redirect to={pathWithParams(AUTH_ROUTES.LOGIN, {...params, returnUrl: pathname})}/>\r\n                }\r\n            </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport function pathWithParams(path: string, queryParams: QueryParams | null | undefined): string {\r\n    return `${path}${queryParams ? createQueryString(queryParams) : ''}`;\r\n}\r\n\r\nfunction createQueryString(params?: QueryParams): string {\r\n    if (!params) return '';\r\n    const url = Object.keys(params)\r\n        .reduce((prev, cur, i) => {\r\n            return params[cur] ? `${prev}${i === 0 ? '?' : '&'}${cur}=${params[cur]}` : prev;\r\n        }, '');\r\n    return encodeURI(url);\r\n}\r\n","import {CompanyDetails, CreateAppointmentRequest} from 'src/app/api/companies';\r\nimport {pathWithParams} from 'src/app/shared/util/router-extensions';\r\n\r\n\r\nexport const companiesUrls = (company: CompanyDetails) => {\r\n    return {\r\n        index: `/c/${company.name}`,\r\n        cart: `/c/${company.name}/cart`,\r\n        book: (params: CreateAppointmentRequest) => pathWithParams(`/c/${company.name}/book`, {...params}),\r\n        checkout: `/c/${company.name}/checkout`,\r\n    }\r\n}\r\n","export const EMPLOYEE_ROUTES = {\r\n    ROOT: '/employee',\r\n}\r\n","import {pathWithParams} from 'src/app/shared/util/router-extensions';\r\n\r\n\r\nexport const USER_ROUTES = {\r\n    ROOT: '/my',\r\n    BOOKING: (date?: string) => pathWithParams('/my/bookings', {date})\r\n}\r\n","import React from 'react';\r\n\r\ninterface AvatarImgProps {\r\n    src: string;\r\n    size?: number;\r\n    className?: string;\r\n    alt?: string;\r\n    id?: string;\r\n}\r\n\r\nconst AvatarImg: React.FunctionComponent<AvatarImgProps> = (\r\n    {\r\n        src,\r\n        size= 7,\r\n        alt,\r\n        className = '',\r\n        id\r\n    }) => {\r\n    const avatarStyle = {\r\n        width: `${size}rem`,\r\n        height: `${size}rem`\r\n    }\r\n    className += \" round-image\";\r\n    return (\r\n        <img className={className} src={src} alt={alt} style={avatarStyle} id={id}/>\r\n    )\r\n}\r\n\r\nexport default AvatarImg;\r\n","import React from 'react';\r\n\r\ninterface KIconProps {\r\n    icon: string;\r\n    color?: string;\r\n    margin?: number;\r\n    onClick?: () => void;\r\n}\r\n\r\nconst KIcon: React.FunctionComponent<KIconProps> = (\r\n    {\r\n        icon,\r\n        color,\r\n        margin = 1,\r\n        onClick,\r\n    }) => {\r\n    const className = `fa fa-${icon} c-${color} mx-${margin}${!onClick ? '' : ' c-pointer'}`;\r\n    return (\r\n        <i className={className} onClick={onClick}/>\r\n    )\r\n}\r\n\r\n\r\nexport default KIcon;\r\n","import React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {Link} from 'react-router-dom';\r\nimport {\r\n    Collapse,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Nav,\r\n    Navbar,\r\n    NavbarBrand,\r\n    NavbarToggler,\r\n    NavItem,\r\n    NavLink,\r\n    UncontrolledDropdown,\r\n} from 'reactstrap';\r\nimport {CompanyDetails} from 'src/app/api/companies';\r\nimport {RequestModel} from 'src/app/api/requests';\r\nimport {User} from 'src/app/api/users';\r\nimport {ADMIN_ROUTES} from 'src/app/modules/admin/urls';\r\nimport {AUTH_ROUTES} from 'src/app/modules/auth/urls';\r\nimport {companiesUrls} from 'src/app/modules/companies/paths';\r\nimport {EMPLOYEE_ROUTES} from 'src/app/modules/employee/urls';\r\nimport {USER_ROUTES} from 'src/app/modules/users/urls';\r\nimport AvatarImg from 'src/app/shared/components/primitives/avatar-img';\r\nimport KIcon from 'src/app/shared/components/primitives/k-icon';\r\n\r\ninterface AppNavbarProps {\r\n    company: CompanyDetails | null;\r\n    cart: RequestModel | null;\r\n    cartIsEmpty: boolean;\r\n    user: User | null;\r\n    menuOpen: boolean;\r\n    toggleMenu: () => void;\r\n    showSidenavToggle: boolean;\r\n    toggleSidenav: () => void;\r\n}\r\n\r\nconst AppNavbar: React.FunctionComponent<AppNavbarProps> = (\r\n    {\r\n        company,\r\n        cart,\r\n        cartIsEmpty,\r\n        user,\r\n        menuOpen,\r\n        toggleMenu,\r\n        showSidenavToggle,\r\n        toggleSidenav,\r\n    }) => {\r\n\r\n    return (\r\n        <header>\r\n            <Navbar className=\"k-shadow-0\" light expand=\"md\">\r\n                {showSidenavToggle &&\r\n                <KIcon onClick={toggleSidenav} margin={2} icon=\"bars\"/>\r\n                }\r\n                <NavbarBrand tag={Link} to=\"/\" className=\"nav-logo\">Kalendario</NavbarBrand>\r\n                <NavbarToggler onClick={toggleMenu}/>\r\n                <Collapse className=\"justify-content-end\" isOpen={menuOpen} navbar>\r\n                    <Nav navbar>\r\n                        {company &&\r\n                        <NavItem>\r\n                            <NavLink tag={Link} to={companiesUrls(company).index}>\r\n                                <AvatarImg src={company.avatar} size={2} id=\"TooltipExample\"/>\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        }\r\n                        {cart &&\r\n                        <NavItem>\r\n                            <NavLink tag={Link} to={companiesUrls(company!).cart} disabled={cartIsEmpty}>\r\n                                <i className=\"fa fa-shopping-cart\"/>\r\n                                <span className=\"badge\">{cart.itemsCount}</span>\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        }\r\n                        {!user &&\r\n                        <>\r\n                            <NavItem>\r\n                                <NavLink tag={Link} to={AUTH_ROUTES.LOGIN}><FormattedMessage\r\n                                    id={'AUTH.LOGIN'}/></NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink tag={Link} to={AUTH_ROUTES.REGISTER}><FormattedMessage\r\n                                    id={'AUTH.REGISTER'}/></NavLink>\r\n                            </NavItem>\r\n                        </>\r\n                        }\r\n                        {user &&\r\n                        <UncontrolledDropdown nav inNavbar>\r\n                            <DropdownToggle nav caret>\r\n                                Menu\r\n                            </DropdownToggle>\r\n                            <DropdownMenu right>\r\n                                <DropdownItem>\r\n                                    <NavLink tag={Link} to={USER_ROUTES.BOOKING()}>\r\n                                        <FormattedMessage id={'USER.BOOKINGS'}/>\r\n                                    </NavLink>\r\n                                </DropdownItem>\r\n                                <DropdownItem divider/>\r\n                                {user.company &&\r\n                                <DropdownItem>\r\n                                    <NavLink tag={Link} to={ADMIN_ROUTES.ROOT}>\r\n                                        <FormattedMessage id={'NAVBAR.ADMIN'}/>\r\n                                    </NavLink>\r\n                                </DropdownItem>\r\n                                }\r\n                                {user.employee &&\r\n                                <DropdownItem>\r\n                                    <NavLink tag={Link} to={EMPLOYEE_ROUTES.ROOT}>\r\n                                        <FormattedMessage id={'NAVBAR.EMPLOYEE'}/>\r\n                                    </NavLink>\r\n                                </DropdownItem>\r\n                                }\r\n                                <DropdownItem divider/>\r\n                                <DropdownItem>\r\n                                    <NavLink tag={Link} to={AUTH_ROUTES.LOGOUT}>\r\n                                        <FormattedMessage id={'AUTH.LOGOUT'}/>\r\n                                    </NavLink>\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        }\r\n                    </Nav>\r\n                </Collapse>\r\n            </Navbar>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default AppNavbar;\r\n","import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {selectUser} from 'src/app/store/auth';\r\nimport {selectCartIsEmpty, selectCompany, selectCurrentRequest} from 'src/app/store/companies';\r\nimport {selectShowDashboardToggle, toggleDashboardSidenav} from 'src/app/store/ui';\r\nimport AppNavbar from './app-navbar';\r\n\r\n\r\nconst AppNavbarContainer: React.FunctionComponent = () => {\r\n    const user = useSelector(selectUser);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const toggleMenu = () => setIsOpen(!isOpen);\r\n    const dispatch = useDispatch()\r\n    const company = useSelector(selectCompany);\r\n    const cart = useSelector(selectCurrentRequest);\r\n    const cartIsEmpty = useSelector(selectCartIsEmpty);\r\n    const showDashboardToggle = useSelector(selectShowDashboardToggle);\r\n    const toggleSidenav = () => dispatch(toggleDashboardSidenav());\r\n\r\n    return (\r\n        <AppNavbar\r\n            company={company}\r\n            cart={cart}\r\n            cartIsEmpty={cartIsEmpty}\r\n            user={user}\r\n            toggleMenu={toggleMenu}\r\n            menuOpen={isOpen}\r\n            showSidenavToggle={showDashboardToggle}\r\n            toggleSidenav={toggleSidenav}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport default AppNavbarContainer;\r\n","import React from 'react';\r\nimport {Button, CSSModule} from 'reactstrap';\r\n\r\ninterface KButtonProps\r\n    extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n    [key: string]: any;\r\n    outline?: boolean;\r\n    active?: boolean;\r\n    block?: boolean;\r\n    color?: string;\r\n    tag?: React.ElementType;\r\n    innerRef?: React.Ref<HTMLButtonElement>;\r\n    size?: string;\r\n    cssModule?: CSSModule;\r\n    close?: boolean;\r\n}\r\n\r\nexport const KButton: React.FunctionComponent<KButtonProps> = (props) => {\r\n    return (\r\n        <Button {...props}/>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Tooltip} from 'reactstrap';\r\n\r\ninterface KTooltipProps {\r\n    id: string;\r\n    text: string;\r\n}\r\n\r\nconst KTooltip: React.FunctionComponent<KTooltipProps> = (\r\n    {\r\n        id,\r\n        text\r\n    }) => {\r\n    const [tooltipOpen, setTooltipOpen] = useState(false);\r\n    const toggle = () => setTooltipOpen(!tooltipOpen);\r\n\r\n    return (\r\n        <Tooltip placement=\"right\" target={id} isOpen={tooltipOpen} toggle={toggle}>\r\n            {text}\r\n        </Tooltip>\r\n    )\r\n}\r\n\r\n\r\nexport default KTooltip;\r\n","import React, {useState} from 'react';\r\nimport KIcon from 'src/app/shared/components/primitives/k-icon';\r\nimport _uniqueId from 'lodash/uniqueId';\r\nimport KTooltip from 'src/app/shared/components/primitives/k-tooltip';\r\n\r\ninterface KIconButtonProps {\r\n    icon: string;\r\n    onClick: () => void;\r\n    color?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const KIconButton: React.FunctionComponent<KIconButtonProps> = (\r\n    {\r\n        icon,\r\n        onClick,\r\n        color,\r\n        disabled\r\n    }) => {\r\n    const [id] = useState(_uniqueId('icon-button-'));\r\n\r\n    return (\r\n        <div\r\n            id={id}\r\n        >\r\n            <button onClick={onClick}\r\n                    disabled={disabled}\r\n                    type=\"button\"\r\n                    className={`c-${color} icon-button mx-1`}\r\n            >\r\n                <KIcon icon={icon}/>\r\n            </button>\r\n            {disabled &&\r\n            <KTooltip id={id} text=\"restricted access\"/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\ninterface KTextButtonProps\r\n    extends React.ButtonHTMLAttributes<HTMLDivElement> {\r\n}\r\n\r\nexport const KTextButton: React.FunctionComponent<KTextButtonProps> = (\r\n    {\r\n        children,\r\n        className,\r\n        onClick,\r\n        ...rest\r\n    }) => {\r\n    return (\r\n        <div className={`m-2 c-pointer ${className}`}\r\n             onClick={onClick}\r\n             {...rest}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {CSSModule} from 'reactstrap';\r\nimport {KButton} from 'src/app/shared/components/primitives/buttons/k-button';\r\n\r\ninterface KRoundedButtonProps\r\n    extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n    [key: string]: any;\r\n    outline?: boolean;\r\n    active?: boolean;\r\n    block?: boolean;\r\n    color?: string;\r\n    tag?: React.ElementType;\r\n    innerRef?: React.Ref<HTMLButtonElement>;\r\n    size?: string;\r\n    cssModule?: CSSModule;\r\n    close?: boolean;\r\n}\r\n\r\nexport const KRoundedButton: React.FunctionComponent<KRoundedButtonProps> = ({children, className = '', ...rest}) => {\r\n    return (\r\n        <KButton className={`${className} btn-round`} {...rest}>\r\n            {children}\r\n        </KButton>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {KFlexColumn} from 'src/app/shared/components/flex';\r\n\r\nexport interface KalendarioContainerProps {\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport const KPageContainer: React.FunctionComponent<KalendarioContainerProps> = (\r\n    {\r\n        children,\r\n    }) => {\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <KFlexColumn>\r\n                {children}\r\n            </KFlexColumn>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport {KFlexRow} from 'src/app/shared/components/flex';\r\n\r\ninterface KShowOnHoverContainerProps {\r\n    children: React.ReactNode;\r\n    className?: string;\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nconst KShowOnHoverContainer: React.FunctionComponent<KShowOnHoverContainerProps> = (\r\n    {\r\n        children,\r\n        className,\r\n        style\r\n    }) => {\r\n    const [showContent, setShowContent] = useState(false);\r\n\r\n    const handleMouseEnter = () => setShowContent(true);\r\n    const handleMouseOut = () => setShowContent(false);\r\n    return (\r\n        <KFlexRow\r\n            align={'center'}\r\n            justify={'center'}\r\n            onMouseEnter={handleMouseEnter}\r\n            onMouseLeave={handleMouseOut}\r\n            className={`${className} position-relative`}\r\n            style={style}\r\n        >\r\n            {showContent &&\r\n            children\r\n            }\r\n        </KFlexRow>\r\n    )\r\n}\r\n\r\n\r\nexport default KShowOnHoverContainer;\r\n","import React, {ReactElement} from 'react';\r\n\r\nexport interface KalendarioCardProps {\r\n    header?: React.ReactNode;\r\n    footer?: ReactElement\r\n    className?: string;\r\n    maxWidth?: number | undefined;\r\n    mwUnit?: string | undefined;\r\n    maxHeight?: number | undefined;\r\n    mhUnit?: string | undefined;\r\n    hasShadow?: boolean;\r\n    hasBorder?: boolean;\r\n    bodiless?: boolean;\r\n}\r\n\r\nexport const KCard: React.FunctionComponent<KalendarioCardProps> = (\r\n    {\r\n        header,\r\n        children,\r\n        footer,\r\n        className = '',\r\n        maxWidth,\r\n        mwUnit = 'px',\r\n        maxHeight,\r\n        mhUnit = 'px',\r\n        hasShadow = true,\r\n        hasBorder = true,\r\n        bodiless = false,\r\n    }) => {\r\n    className += ` card ${hasShadow ? ' company-shadow-1' : ''} ${hasBorder  ? '' : 'border-0'}`\r\n    let style = {};\r\n    if (maxWidth) {\r\n        style = {maxWidth: `${maxWidth}${mwUnit}`};\r\n    }\r\n    let bodyStyle = {}\r\n    if (maxHeight) {\r\n        bodyStyle = {\r\n            maxHeight: `${maxHeight}${mhUnit}`,\r\n            overflow: 'scroll'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={className} style={style}>\r\n            <div className={bodiless ? '' : 'card-body'} style={bodyStyle}>\r\n                {header && <h5 className=\"card-title text-center\">{header}</h5>}\r\n                {children}\r\n            </div>\r\n            {footer &&\r\n            <div className=\"card-footer\">\r\n                {footer}\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport {TreeViewItem} from '.';\r\nimport {KFlexRow} from '../../flex';\r\nimport {KIconButton} from '../buttons';\r\n\r\n\r\ninterface KTreeViewProps {\r\n    items: TreeViewItem[];\r\n    renderComponent: React.FunctionComponent<TreeViewItem>;\r\n}\r\n\r\nexport const KTreeView: React.FunctionComponent<KTreeViewProps> = (\r\n    {\r\n        items,\r\n        renderComponent\r\n    }) => {\r\n    const [openOptions, setOpenOptions] = useState(new Set<number>());\r\n\r\n    const openCloseDrawer = (id: number) => {\r\n        openOptions.has(id) ? openOptions.delete(id) : openOptions.add(id);\r\n        setOpenOptions(new Set(openOptions));\r\n    }\r\n\r\n    return (\r\n        <ul className=\"tree-view ul-none\">\r\n            {items.map(option =>\r\n                <li key={option.id}>\r\n                    <KFlexRow>\r\n                        {option.children &&\r\n                        <KIconButton onClick={() => openCloseDrawer(option.id)} icon={'caret-right'}/>\r\n                        }\r\n                        {renderComponent(option)}\r\n                    </KFlexRow>\r\n                    {option.children && openOptions.has(option.id) &&\r\n                    <KTreeView renderComponent={renderComponent} items={option.children}/>\r\n                    }\r\n                </li>\r\n            )}\r\n        </ul>\r\n    )\r\n}\r\n","import moment, {Moment} from 'moment';\r\nimport React, {useEffect, useState} from 'react';\r\nimport {isMobile} from 'react-device-detect';\r\nimport {useSelector} from 'react-redux';\r\nimport {adminAppointmentClient, Appointment} from 'src/app/api/appointments';\r\nimport {getShift, Schedule} from 'src/app/api/schedule';\r\nimport {KFlexColumn, KFlexRow} from 'src/app/shared/components/flex';\r\nimport {KIconButton, KRoundedButton} from 'src/app/shared/components/primitives/buttons';\r\nimport {KCard} from 'src/app/shared/components/primitives/containers';\r\nimport KIcon from 'src/app/shared/components/primitives/k-icon';\r\nimport {momentToIso, stringToMoment} from 'src/app/shared/util/moment-helpers';\r\nimport {selectUserEmployee} from 'src/app/store/auth';\r\n\r\nfunction dates(startDate: Moment, endDate: Moment): Moment[] {\r\n    const dates = [];\r\n    let controlDate = moment.utc(startDate.toISOString());\r\n    while (controlDate.isBefore(endDate) || controlDate.isSame(endDate)) {\r\n        dates.push(moment.utc(controlDate.toISOString()));\r\n        controlDate = controlDate.clone().add(1, 'day');\r\n    }\r\n    return dates;\r\n}\r\n\r\ninterface EmployeeDashboardDatePickerProps {\r\n    currentDate: Moment;\r\n    dateChange: (date: Moment) => void;\r\n}\r\n\r\nconst EmployeeDashboardDatePicker: React.FunctionComponent<EmployeeDashboardDatePickerProps> = ({\r\n                                                                                                    currentDate,\r\n                                                                                                    dateChange\r\n                                                                                                }) => {\r\n    const timeSpan = isMobile ? 2 : 3;\r\n    const [startDate, setStartDate] = useState(currentDate.clone().startOf('day').subtract(timeSpan, 'day'));\r\n    const [endDate, setEndDate] = useState(currentDate.clone().startOf('day').add(timeSpan, 'day'));\r\n    const week = dates(startDate, endDate);\r\n\r\n    const updateDates = (date: Moment) => {\r\n        dateChange(date);\r\n        if (date > endDate) {\r\n            setStartDate(date.clone());\r\n            setEndDate(date.clone().add(timeSpan * 2, 'day'));\r\n        }\r\n        if (date < startDate) {\r\n            setStartDate(date.clone().subtract(timeSpan * 2, 'day'));\r\n            setEndDate(date.clone());\r\n        }\r\n    }\r\n\r\n    const previousClick = () => {\r\n        updateDates(currentDate.clone().subtract(1, 'day'))\r\n    }\r\n\r\n    const nextClick = () => {\r\n        updateDates(currentDate.clone().add(1, 'day'))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <KFlexRow justify=\"between\" className=\"mb-2\">\r\n                <KIconButton icon=\"chevron-left\" color=\"primary\" onClick={previousClick}/>\r\n                {currentDate.format('MMMM YYYY').toUpperCase()}\r\n                <KIconButton icon=\"chevron-right\" color=\"primary\" onClick={nextClick}/>\r\n            </KFlexRow>\r\n            <KFlexRow justify=\"between\" className=\"mb-2\">\r\n                {week.map((day, index) =>\r\n                    <KFlexColumn key={index} className=\"m-2\" align=\"center\" justify=\"center\">\r\n                        {day.format('ddd').toUpperCase()}\r\n                        <KRoundedButton\r\n                            className=\"mt-2\"\r\n                            color={`${day.date() === currentDate.date() ? 'accent' : 'primary'}`}\r\n                            onClick={() => updateDates(day.clone())}\r\n                        >\r\n                            {day.date()}\r\n                        </KRoundedButton>\r\n                    </KFlexColumn>\r\n                )}\r\n            </KFlexRow>\r\n            <div>\r\n                <hr/>\r\n            </div>\r\n            <KFlexRow justify=\"center\" align=\"center\">\r\n                <KIcon icon=\"calendar\" margin={2}/>\r\n                {currentDate.format('dddd, DD MMM YY')}\r\n            </KFlexRow>\r\n        </>\r\n    )\r\n}\r\n\r\ninterface EmployeeScheduleViewProps {\r\n    date: Moment;\r\n    schedule: Schedule;\r\n}\r\n\r\nconst EmployeeScheduleView: React.FunctionComponent<EmployeeScheduleViewProps> = ({date, schedule}) => {\r\n    const shift = getShift(schedule, date);\r\n    return (\r\n        <KFlexRow justify=\"center\">\r\n            {shift && shift.frames.map((frame, index) =>\r\n                <React.Fragment key={index}>\r\n                    {index !== 0 ? ' |' : ''} {frame.name}\r\n                </React.Fragment>\r\n            )}\r\n            {!shift &&\r\n            <>\r\n                No shift available\r\n            </>\r\n            }\r\n        </KFlexRow>\r\n    )\r\n}\r\n\r\ninterface EmployeeDashboardAppointmentsProps {\r\n    appointment: Appointment;\r\n}\r\n\r\nconst EmployeeDashboardAppointment: React.FunctionComponent<EmployeeDashboardAppointmentsProps> = ({appointment}) => {\r\n    const start = stringToMoment(appointment.start).format('HH:mm')\r\n    const end = stringToMoment(appointment.end).format('HH:mm')\r\n\r\n    const customerNotes = 'customerNotes' in appointment ? appointment.customerNotes : '';\r\n    const customerName = 'customer' in appointment ? appointment.customer?.name : '';\r\n    const serviceName = 'service' in appointment ? appointment.service?.name : '';\r\n\r\n    return (\r\n        <KFlexColumn key={appointment.id}>\r\n            <KFlexRow className=\"font-weight-bolder mb-2\" justify=\"center\">\r\n                {serviceName}\r\n            </KFlexRow>\r\n            <KFlexRow align=\"center\" className=\"mb-2\">\r\n                <KIcon icon=\"clock\" color=\"primary\" margin={2}/> {`${start} - ${end}`}\r\n            </KFlexRow>\r\n            {customerName &&\r\n            <KFlexRow align=\"center\" className=\"mb-2\">\r\n                <KIcon icon=\"address-card\" color=\"primary\" margin={2}/> {customerName}\r\n            </KFlexRow>\r\n            }\r\n            {appointment.internalNotes &&\r\n            <KFlexRow align=\"center\" className=\"mb-2\">\r\n                <KIcon icon=\"sticky-note\" color=\"primary\" margin={2}/> {appointment.internalNotes}\r\n            </KFlexRow>\r\n            }\r\n            {customerNotes &&\r\n            <KFlexRow align=\"center\" className=\"mb-2\">\r\n                <KIcon icon=\"comment-alt\" color=\"primary\" margin={2}/> {customerNotes}\r\n            </KFlexRow>\r\n            }\r\n        </KFlexColumn>\r\n    )\r\n}\r\n\r\nconst EmployeeDashboard: React.FunctionComponent = () => {\r\n    const [currentDate, setCurrentDate] = useState(moment.utc());\r\n    const [appointments, setAppointments] = useState<Appointment[]>([]);\r\n    const employee = useSelector(selectUserEmployee);\r\n\r\n    useEffect(() => {\r\n        adminAppointmentClient.get(\r\n            {\r\n                employee: employee?.id,\r\n                from_date: momentToIso(currentDate.clone().startOf('day')),\r\n                to_date: momentToIso(currentDate.clone().endOf('day')),\r\n            }).then(res => setAppointments(res.results));\r\n    }, [currentDate, employee?.id]);\r\n\r\n\r\n    return (\r\n        <KFlexColumn className=\"h-100vh pt-2\" align=\"center\" justify=\"center\">\r\n            {employee &&\r\n            <KCard className=\"h-100\" maxWidth={600} hasShadow={!isMobile} hasBorder={!isMobile}>\r\n                <KFlexColumn className=\"h-100\">\r\n                    <KFlexRow justify=\"center\" className=\"mb-3\">\r\n                        {employee.name}\r\n                    </KFlexRow>\r\n                    <EmployeeDashboardDatePicker currentDate={currentDate} dateChange={setCurrentDate}/>\r\n                    <div>\r\n                        <hr/>\r\n                    </div>\r\n                    <EmployeeScheduleView schedule={employee.schedule} date={currentDate}/>\r\n                    <div>\r\n                        <hr/>\r\n                    </div>\r\n                    <div className=\"flex-fill overflow-auto\">\r\n                        {appointments.map(appointment => <React.Fragment key={appointment.id}>\r\n                                <EmployeeDashboardAppointment appointment={appointment}/>\r\n                                <hr/>\r\n                            </React.Fragment>\r\n                        )}\r\n                    </div>\r\n                </KFlexColumn>\r\n            </KCard>\r\n            }\r\n        </KFlexColumn>\r\n    )\r\n}\r\n\r\n\r\nexport default EmployeeDashboard;\r\n","import React from 'react';\r\nimport {Switch} from 'react-router-dom';\r\nimport EmployeeDashboard from 'src/app/modules/employee/employee-dashboard';\r\nimport {EMPLOYEE_ROUTES} from 'src/app/modules/employee/urls';\r\nimport {ProtectedRoute} from 'src/app/shared/util/router-extensions';\r\n\r\n\r\nconst EmployeeRoutes: React.FunctionComponent = () => {\r\n    return (\r\n        <Switch>\r\n            <ProtectedRoute path={EMPLOYEE_ROUTES.ROOT}\r\n                            component={EmployeeDashboard}/>\r\n        </Switch>\r\n    )\r\n}\r\n\r\n\r\nexport default EmployeeRoutes;\r\n","import React from 'react';\r\nimport {Input, Label} from 'reactstrap';\r\nimport {KBaseInputProps} from 'src/app/shared/components/primitives/inputs/interfaces';\r\n\r\ninterface KCheckboxProps extends KBaseInputProps {\r\n}\r\n\r\nexport const KCheckbox: React.FunctionComponent<KCheckboxProps> = (\r\n    {\r\n        placeholder,\r\n        name,\r\n        checked,\r\n        value,\r\n        onChange,\r\n        onBlur\r\n    }) => {\r\n    return (\r\n        <Label check>\r\n            <Input type=\"checkbox\"\r\n                   name={name}\r\n                   onChange={onChange}\r\n                   onBlur={onBlur}\r\n                   checked={checked || !!value}\r\n            />\r\n            {placeholder}\r\n        </Label>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {KBaseInputProps} from 'src/app/shared/components/primitives/inputs/interfaces';\r\n\r\ninterface KColorInputProps extends KBaseInputProps {\r\n    value: string;\r\n    name: string;\r\n}\r\n\r\nexport const KColorInput: React.FunctionComponent<KColorInputProps> = (\r\n    {\r\n        value,\r\n        name,\r\n        className,\r\n        onBlur,\r\n        onChange,\r\n    }) => {\r\n    return (\r\n        <input\r\n            className={className}\r\n            name={name}\r\n            onBlur={onBlur}\r\n            type=\"color\"\r\n            onChange={onChange}\r\n            value={value}/>\r\n    )\r\n}\r\n","import moment, {Moment} from 'moment';\r\nimport React from 'react';\r\nimport {Input} from 'reactstrap';\r\nimport {stringToMoment} from 'src/app/shared/util/moment-helpers';\r\n\r\ninterface KDateInputProps {\r\n    value?: Moment;\r\n    onChange?: (value: Moment) => void;\r\n}\r\n\r\nexport const KDateInput: React.FunctionComponent<KDateInputProps> = (\r\n    {\r\n        value,\r\n        onChange\r\n    }) => {\r\n    const useValue = value && moment.isMoment(value) ? value : stringToMoment(value)\r\n    return (\r\n        <Input type='date'\r\n               value={useValue && useValue.format('YYYY-MM-DD')}\r\n               onChange={event => onChange && onChange(moment.utc(event.target.value))}/>\r\n    )\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {timeFromString, TimeOfDay, timeToISOString} from 'src/app/api/common/models';\r\nimport {KBaseInputProps} from 'src/app/shared/components/primitives/inputs/interfaces';\r\nimport {KFlexRow} from 'src/app/shared/components/flex';\r\n\r\ninterface KFormikDurationInputProps extends KBaseInputProps {\r\n    value: string;\r\n    name: string;\r\n}\r\n\r\nexport const KDurationInput: React.FunctionComponent<KFormikDurationInputProps> = (\r\n    {\r\n        value,\r\n        name,\r\n        className,\r\n        onBlur,\r\n        onChange,\r\n        onKeyUp,\r\n    }) => {\r\n    const [timeOfDay, setTimeOfDay] = useState(timeFromString(value));\r\n\r\n    const hourHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        handleChange(e, {hour: +e.target.value, minute: timeOfDay.minute});\r\n    }\r\n\r\n    const minuteHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        handleChange(e, {hour: timeOfDay.hour, minute: +e.target.value})\r\n    }\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLInputElement>, newValue: TimeOfDay) => {\r\n        const type = 'string';\r\n        setTimeOfDay(newValue);\r\n        onChange && onChange({...e, target: {...e.target, type, value: timeToISOString(newValue)}});\r\n    }\r\n\r\n    const style = {\r\n        width: '30%'\r\n    }\r\n\r\n    return (\r\n        <KFlexRow className={className} justify={'center'}>\r\n            <span className=\"mx-2\">hour(s)</span>\r\n            <input\r\n                style={style}\r\n                className=\"input-no-border\"\r\n                name={name}\r\n                onBlur={onBlur}\r\n                onChange={hourHandler}\r\n                type=\"number\"\r\n                value={timeOfDay.hour}/>\r\n            <span className=\"mx-2\">min(s)</span>\r\n            <input\r\n                style={style}\r\n                className=\"input-no-border\"\r\n                name={name}\r\n                onBlur={onBlur}\r\n                onChange={minuteHandler}\r\n                type=\"number\"\r\n                max={60}\r\n                value={timeOfDay.minute}/>\r\n        </KFlexRow>\r\n    )\r\n}\r\n","import React, {ChangeEventHandler} from 'react';\r\nimport {Input} from 'reactstrap';\r\nimport {InputType} from 'reactstrap/es/Input';\r\n\r\ninterface KInputProps {\r\n    className?: string;\r\n    type?: InputType;\r\n    placeholder?: string;\r\n    value?: string | ReadonlyArray<string> | number;\r\n    onChange?: ChangeEventHandler<HTMLInputElement>;\r\n}\r\n\r\nexport const KInput: React.FunctionComponent<KInputProps> = (\r\n    {\r\n        className,\r\n        type,\r\n        placeholder,\r\n        value,\r\n        onChange,\r\n        children\r\n    }) => {\r\n    return (\r\n        <Input className={className}\r\n               type={type}\r\n               value={value}\r\n               placeholder={placeholder}\r\n               onChange={onChange}>\r\n            {children}\r\n        </Input>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FormGroup} from 'reactstrap';\r\nimport {KBaseInputProps, MultiSelectOption} from 'src/app/shared/components/primitives/inputs/interfaces';\r\nimport { KCard, KTreeView } from '../containers';\r\nimport { KCheckbox } from './k-checkbox';\r\n\r\n// @ts-ignore\r\ninterface KMultiSelectProps extends KBaseInputProps {\r\n    name: string;\r\n    value: number[];\r\n    options: MultiSelectOption[];\r\n}\r\n\r\nexport const KMultiSelectInput: React.FunctionComponent<KMultiSelectProps> = (\r\n    {\r\n        name,\r\n        value,\r\n        options,\r\n        onChange,\r\n        onBlur,\r\n    }) => {\r\n    const values = new Set<number>(value);\r\n\r\n    const handleCheckboxChange = (option: MultiSelectOption) => (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (option.children && isOptionChecked(option)) {\r\n            option.children.forEach(option => values.delete(option.id));\r\n        } else if (option.children) {\r\n            option.children.forEach(option => values.add(option.id));\r\n        } else if (values.has(option.id)) {\r\n            values.delete(option.id);\r\n        } else {\r\n            values.add(option.id);\r\n        }\r\n        onChange && onChange({...e, target: {...e.target, name, value: Array.from(values)}});\r\n    }\r\n\r\n    const isOptionChecked = (option: MultiSelectOption) => {\r\n        return !option.children ? values.has(option.id) : option.children.every(option => values.has(option.id));\r\n    }\r\n\r\n    return (\r\n        <KCard hasShadow={false}\r\n               maxHeight={30}\r\n               bodiless={true}\r\n               mhUnit={'vh'}\r\n        >\r\n            <KTreeView items={options}\r\n                       renderComponent={(option) =>\r\n                           <FormGroup check>\r\n                               <KCheckbox placeholder={option.name}\r\n                                          name={name}\r\n                                          onBlur={onBlur}\r\n                                          onChange={handleCheckboxChange(option)}\r\n                                          checked={isOptionChecked(option)}\r\n                               />\r\n                           </FormGroup>\r\n                       }\r\n            />\r\n        </KCard>\r\n    )\r\n}\r\n","import moment, {Moment} from 'moment';\r\nimport React from 'react';\r\nimport {Button} from 'reactstrap';\r\nimport {KFlexColumn, KFlexRow} from 'src/app/shared/components/flex';\r\nimport {KDateInput} from 'src/app/shared/components/primitives/inputs';\r\nimport {KIconButton} from 'src/app/shared/components/primitives/buttons';\r\nimport {useAppDispatch, useAppSelector} from 'src/app/store';\r\nimport {adminDashboardActions, adminDashboardSelectors} from 'src/app/store/admin/dashboard';\r\nimport styles from './scheduling-date-selector.module.scss';\r\n\r\nconst SchedulingDateSelector: React.FunctionComponent = () => {\r\n    const currentDate = useAppSelector(adminDashboardSelectors.selectCurrentDate);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const handleNextClick = () => {\r\n        dispatch(adminDashboardActions.setCurrentDate(currentDate.clone().add(1, 'day')));\r\n    }\r\n    const handleTodayClick = () => {\r\n        dispatch(adminDashboardActions.setCurrentDate(moment.utc()));\r\n    }\r\n    const handlePreviousClick = () => {\r\n        dispatch(adminDashboardActions.setCurrentDate(currentDate.clone().subtract(1, 'day')));\r\n    }\r\n\r\n    const handleDateChange = (value: Moment) => {\r\n        dispatch(adminDashboardActions.setCurrentDate(value));\r\n    }\r\n\r\n    return (\r\n        <KFlexRow className={styles.dateSelectorContainer} align={'center'}>\r\n            <Button color=\"primary\" size=\"sm\" onClick={handleTodayClick}>Today</Button>\r\n            <KIconButton icon=\"chevron-left\" color=\"accent\" onClick={handlePreviousClick}/>\r\n            <KIconButton icon=\"chevron-right\" color=\"accent\" onClick={handleNextClick}/>\r\n            {currentDate.format('dddd')}\r\n            <KFlexColumn align=\"center\" className=\"ml-2\">\r\n                <KDateInput value={currentDate} onChange={handleDateChange}/>\r\n            </KFlexColumn>\r\n        </KFlexRow>\r\n    )\r\n}\r\n\r\n\r\nexport default SchedulingDateSelector;\r\n","import {Duration, Moment} from 'moment';\r\nimport {useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppointmentQueryParams} from 'src/app/api/appointments';\r\nimport {momentToIso} from 'src/app/shared/util/moment-helpers';\r\nimport {useAppDispatch, useAppSelector} from 'src/app/store';\r\nimport {appointmentActions} from 'src/app/store/admin/appointments';\r\nimport {adminDashboardSelectors} from 'src/app/store/admin/dashboard';\r\nimport {employeeSelectors} from 'src/app/store/admin/employees';\r\n\r\n\r\nexport function useSelectPanelEmployees() {\r\n    const selectedPanel = useAppSelector(adminDashboardSelectors.selectSelectedPanel)\r\n    return useAppSelector(state => employeeSelectors.selectByIds(state, selectedPanel?.employees || []));\r\n}\r\n\r\n\r\nexport function useReloadAppointmentsEffect() {\r\n    const selectedPanel = useAppSelector(adminDashboardSelectors.selectSelectedPanel)\r\n    const currentDate = useSelector(adminDashboardSelectors.selectCurrentDate);\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        const params: AppointmentQueryParams = {\r\n            from_date: momentToIso(currentDate),\r\n            to_date: momentToIso(currentDate.clone().add(1, 'day')),\r\n            employees: selectedPanel?.employees || []\r\n        };\r\n        dispatch(appointmentActions.fetchEntitiesWithSetAll(params));\r\n\r\n    }, [selectedPanel, currentDate, dispatch]);\r\n\r\n}\r\n\r\n\r\nexport function useHoursConverter(value: Moment | Duration): string {\r\n    const slotSize = useAppSelector(adminDashboardSelectors.selectSlotSize);\r\n    return `${(value.hours() + (value.minutes() / 60)) * slotSize}rem`;\r\n}\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {useHoursConverter} from 'src/app/modules/admin/appointments/employee-panel/hooks';\r\nimport {momentIsToday, momentToday} from 'src/app/shared/util/moment-helpers';\r\nimport {adminDashboardSelectors} from 'src/app/store/admin/dashboard';\r\nimport styles from './employee-panel.module.scss';\r\n\r\n\r\nconst TimeLineContainer: React.FunctionComponent = () => {\r\n    const currentDate = useSelector(adminDashboardSelectors.selectCurrentDate);\r\n    const isToday = momentIsToday(currentDate)\r\n    const today = momentToday();\r\n    const style: React.CSSProperties = {\r\n        top: useHoursConverter(today)\r\n    }\r\n\r\n    return (\r\n        <div className=\"position-relative\">\r\n            {isToday &&\r\n            <div style={style} className={styles.currentTimeLine}/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TimeLineContainer;\r\n","import React from 'react';\r\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from 'reactstrap';\r\n\r\nexport interface KModalButtonProps {\r\n    text: string;\r\n    color: 'primary' | 'secondary' | 'danger';\r\n    onClick: () => void;\r\n}\r\n\r\ninterface KModalProps {\r\n    body: React.ReactNode;\r\n    isOpen: boolean;\r\n    header?: React.ReactNode;\r\n    buttons?: KModalButtonProps[];\r\n    backdrop?: boolean;\r\n    scrollable?: boolean;\r\n    onCancel?: () => void\r\n}\r\n\r\nconst KModal: React.FunctionComponent<KModalProps> = (\r\n    {\r\n        header,\r\n        body,\r\n        buttons,\r\n        backdrop = true,\r\n        scrollable = true,\r\n        isOpen,\r\n        onCancel\r\n    }) => {\r\n    return (\r\n        <Modal isOpen={isOpen}\r\n               toggle={onCancel}\r\n               backdrop={backdrop}\r\n               scrollable={scrollable}\r\n        >\r\n            {header &&\r\n            <ModalHeader toggle={onCancel}>\r\n                {header}\r\n            </ModalHeader>\r\n            }\r\n            <ModalBody className={\"m-2\"}>\r\n                {body}\r\n            </ModalBody>\r\n            {buttons &&\r\n            <ModalFooter>\r\n                {buttons.map((button, key) =>\r\n                    <Button key={key}\r\n                            color={button.color}\r\n                            onClick={button.onClick}\r\n                    >\r\n                        {button.text}</Button>)}\r\n            </ModalFooter>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default KModal;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {adminAppointmentClient, AppointmentHistory} from 'src/app/api/appointments';\r\nimport {KFlexColumn, KFlexRow} from 'src/app/shared/components/flex';\r\nimport KModal from 'src/app/shared/components/modal/k-modal';\r\nimport {KCard} from 'src/app/shared/components/primitives/containers';\r\nimport KIcon from 'src/app/shared/components/primitives/k-icon';\r\nimport {useTimeFormatter} from 'src/app/shared/util/time-formater';\r\n\r\ninterface AppointmentHistoryItemProps {\r\n    appointment: AppointmentHistory;\r\n}\r\n\r\nconst AppointmentHistoryItem: React.FunctionComponent<AppointmentHistoryItemProps> = ({appointment}) => {\r\n    const timeFormatter = useTimeFormatter();\r\n    const historyDate = appointment.historyDate ? timeFormatter(appointment.historyDate) : null;\r\n\r\n    return (\r\n        <KCard hasShadow={false}\r\n               className=\"my-2 small\"\r\n               bodiless={true}\r\n               footer={\r\n                   <KFlexRow className=\"small\" justify=\"between\">\r\n                       <KFlexColumn>{appointment.historyUser?.name}</KFlexColumn>\r\n                       <KFlexColumn>{historyDate}</KFlexColumn>\r\n                   </KFlexRow>\r\n               }\r\n        >\r\n            <KFlexRow align=\"center\" justify=\"center\">\r\n                {timeFormatter(appointment.start)}\r\n                <KIcon icon=\"clock\" color=\"primary\" margin={2}/>\r\n                {timeFormatter(appointment.end)}\r\n            </KFlexRow>\r\n            <KFlexRow align=\"center\">\r\n                <KIcon icon=\"user\" color=\"primary\" margin={2}/> {appointment.employee.name}\r\n            </KFlexRow>\r\n            {appointment.service &&\r\n            <KFlexRow align=\"center\">\r\n                <KIcon icon=\"magic\" color=\"primary\" margin={2}/> {appointment.service.name}\r\n            </KFlexRow>\r\n            }\r\n            {appointment.customer &&\r\n            <KFlexRow align=\"center\">\r\n                <KIcon icon=\"address-card\" color=\"primary\" margin={2}/> {appointment.customer.name}\r\n            </KFlexRow>\r\n            }\r\n            {appointment.internalNotes &&\r\n            <KFlexRow align=\"center\" className=\"mb-2\">\r\n                <KIcon icon=\"sticky-note\" color=\"primary\" margin={2}/> {appointment.internalNotes}\r\n            </KFlexRow>\r\n            }\r\n            {appointment.customerNotes &&\r\n            <KFlexRow align=\"center\" className=\"mb-2\">\r\n                <KIcon icon=\"comment-alt\" color=\"primary\" margin={2}/> {appointment.customerNotes}\r\n            </KFlexRow>\r\n            }\r\n        </KCard>\r\n    )\r\n}\r\n\r\ninterface AppointmentHistoryContainerProps {\r\n    id: number;\r\n    isOpen: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\nconst AppointmentHistoryContainer: React.FunctionComponent<AppointmentHistoryContainerProps> = (\r\n    {\r\n        id,\r\n        isOpen,\r\n        onClose\r\n    }) => {\r\n    const [appointments, setAppointments] = useState<AppointmentHistory[]>([]);\r\n\r\n    useEffect(() => {\r\n        adminAppointmentClient.history(id)\r\n            .then(res => {\r\n                setAppointments(res.results);\r\n            });\r\n    }, [id]);\r\n\r\n    return (\r\n        <KModal body={\r\n            <KFlexColumn>\r\n                {appointments.map(appointment => <AppointmentHistoryItem key={appointment.id}\r\n                                                                         appointment={appointment}/>\r\n                )}\r\n            </KFlexColumn>\r\n        }\r\n                header=\"history\"\r\n                onCancel={onClose}\r\n                isOpen={isOpen}>\r\n\r\n        </KModal>\r\n    )\r\n}\r\n\r\n\r\nexport default AppointmentHistoryContainer;\r\n","import moment, {Moment} from 'moment';\r\n\r\n\r\nexport const useTimeFormatter = () => {\r\n    return (value: Moment | string) => moment.utc(value).format('DD/MM/YYYY HH:mm');\r\n}\r\n","import React from 'react';\r\nimport {PermissionModel, PermissionType} from 'src/app/api/auth';\r\nimport {KIconButton} from 'src/app/shared/components/primitives/buttons';\r\nimport {useUserHasPermission} from 'src/app/shared/context-providers/auth-auto-login';\r\n\r\ninterface AdminButtonProps {\r\n    type: PermissionType;\r\n    model: PermissionModel;\r\n    onClick: () => void;\r\n}\r\n\r\nfunction iconColor(type: PermissionType): string {\r\n    switch (type) {\r\n        case PermissionType.add:\r\n            return 'primary';\r\n        case PermissionType.change:\r\n            return 'accent-light';\r\n        case PermissionType.delete:\r\n            return 'danger';\r\n        case PermissionType.view:\r\n            return 'primary';\r\n\r\n    }\r\n}\r\n\r\nfunction iconType(type: PermissionType): string {\r\n    switch (type) {\r\n        case PermissionType.add:\r\n            return 'plus';\r\n        case PermissionType.change:\r\n            return 'edit';\r\n        case PermissionType.delete:\r\n            return 'trash';\r\n        case PermissionType.view:\r\n            return 'eye';\r\n\r\n    }\r\n}\r\n\r\nconst AdminButton: React.FunctionComponent<AdminButtonProps> = (\r\n    {\r\n        type,\r\n        model,\r\n        onClick\r\n    }) => {\r\n    const hasPermission = useUserHasPermission(type, model);\r\n    const icon = iconType(type);\r\n    const color = iconColor(type)\r\n    return (\r\n        <>\r\n            <KIconButton color={color}\r\n                         icon={icon}\r\n                         onClick={onClick}\r\n                         disabled={!hasPermission}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AdminButton;\r\n","import React, {useState} from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {AnyAction} from 'redux';\r\nimport KModal, {KModalButtonProps} from 'src/app/shared/components/modal/k-modal';\r\nimport {useAppDispatch} from 'src/app/store';\r\n\r\ninterface ConfirmationModalProps {\r\n    messageId?: string;\r\n    isOpen: boolean;\r\n    onConfirm: () => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nconst DeleteConfirmationModal: React.FunctionComponent<ConfirmationModalProps> = (\r\n    {\r\n        messageId = \"COMMON.SURE-DELETE\",\r\n        isOpen,\r\n        onCancel,\r\n        onConfirm\r\n\r\n    }) => {\r\n\r\n    const buttons: KModalButtonProps[] = [\r\n        {\r\n            text: 'confirm',\r\n            color: 'primary',\r\n            onClick: onConfirm\r\n        },\r\n        {\r\n            text: 'cancel',\r\n            color: 'danger',\r\n            onClick: onCancel\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <KModal\r\n            body={<FormattedMessage id={messageId}/>}\r\n            isOpen={isOpen}\r\n            buttons={buttons}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport function useConfirmationModal(onConfirm: (id: number) => void): [(id: number) => void, JSX.Element] {\r\n    const [id, setId] = useState<number | null>(null);\r\n\r\n    const handleConfirm = () => {\r\n        onConfirm(id!);\r\n        setId(null);\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setId(null);\r\n    }\r\n\r\n    const modal = <DeleteConfirmationModal isOpen={!!id}\r\n                                           onConfirm={handleConfirm}\r\n                                           onCancel={handleCancel}/>\r\n\r\n    return [setId, modal]\r\n}\r\n\r\nexport function UseConfirmationModalWithDispatch(onConfirm: (id: number) => AnyAction): [(id: number) => void, JSX.Element] {\r\n    const dispatch = useAppDispatch();\r\n    const handleConfirmClick = (id: number) => dispatch(onConfirm(id));\r\n    return useConfirmationModal(handleConfirmClick);\r\n}\r\n\r\nexport default DeleteConfirmationModal;\r\n","import React from 'react';\r\nimport {PermissionModel, PermissionType} from 'src/app/api/auth';\r\nimport {IReadModel} from 'src/app/api/common/models';\r\nimport AdminButton from 'src/app/shared/admin/admin-button';\r\nimport {UseConfirmationModalWithDispatch} from 'src/app/shared/components/modal/delete-confirmation-modal';\r\nimport {BaseActions} from 'src/app/store/admin/common/adapter';\r\n\r\ninterface DeleteButtonProps {\r\n    entity: IReadModel;\r\n    modelType: PermissionModel;\r\n    baseActions: BaseActions;\r\n}\r\n\r\nconst DeleteButton: React.FunctionComponent<DeleteButtonProps> = (\r\n    {\r\n        entity,\r\n        modelType,\r\n        baseActions\r\n    }) => {\r\n    const [setDeleteId, confirmDeleteModal] = UseConfirmationModalWithDispatch(baseActions.deleteEntity);\r\n\r\n    const handleDeleteClick = (id: number) => () => {\r\n        setDeleteId(id);\r\n    }\r\n    return (\r\n        <>\r\n            {confirmDeleteModal}\r\n            <AdminButton type={PermissionType.delete}\r\n                         model={modelType}\r\n                         onClick={handleDeleteClick(entity.id)}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default DeleteButton;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {IReadModel} from 'src/app/api/common/models';\r\nimport {AdminEditContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport KModal from 'src/app/shared/components/modal/k-modal';\r\nimport {useAppDispatch, useAppSelector} from 'src/app/store';\r\nimport {BaseActions, BaseSelectors} from 'src/app/store/admin/common/adapter';\r\n\r\nexport function useEditModal<TEntity extends IReadModel>(\r\n    baseSelectors: BaseSelectors<TEntity>,\r\n    baseActions: BaseActions,\r\n    EditContainer: React.FunctionComponent<AdminEditContainerProps<TEntity>>\r\n): [(entity: TEntity | null) => () => void, JSX.Element, TEntity | undefined] {\r\n    const [selectedEntity, setSelectedEntity] = useState<TEntity | null>(null);\r\n    const apiError = useAppSelector(baseSelectors.selectApiError);\r\n    const editMode = useAppSelector(baseSelectors.selectEditMode);\r\n    const createdEntity = useAppSelector(baseSelectors.selectCreatedEntity)\r\n    const dispatch = useAppDispatch();\r\n\r\n    const handleEditCancel = () => {\r\n        setSelectedEntity(null);\r\n        dispatch(baseActions.setEditMode(false));\r\n    }\r\n\r\n    const handleSubmit = (entity: any) => {\r\n        if (!selectedEntity || selectedEntity.id === 0) {\r\n            dispatch(baseActions.createEntity({entity}));\r\n        } else {\r\n            dispatch(baseActions.patchEntity({id: selectedEntity.id, entity}));\r\n        }\r\n    }\r\n\r\n    const openModal = (entity: TEntity | null) => () => {\r\n        setSelectedEntity(entity);\r\n        dispatch(baseActions.setEditMode(true));\r\n    }\r\n\r\n    const modal = <KModal body={<EditContainer entity={selectedEntity}\r\n                                               apiError={apiError}\r\n                                               onSubmit={handleSubmit}\r\n                                               onCancel={handleEditCancel}/>}\r\n                          isOpen={editMode}/>\r\n\r\n    return [openModal, modal, createdEntity]\r\n}\r\n\r\n\r\nexport function useSelectAll<TEntity>(baseSelectors: BaseSelectors<TEntity>, baseActions: BaseActions) {\r\n    const dispatch = useAppDispatch();\r\n    useEffect(() => {\r\n        dispatch(baseActions.initializeStore());\r\n    }, [baseActions, dispatch]);\r\n    return useAppSelector(baseSelectors.selectAll);\r\n}\r\n\r\n/**\r\n * a shortcut effect to dispatch the initialize store action\r\n * @param baseActions The base action for the store that needs to be initialized\r\n */\r\nexport function useInitializeEffect(baseActions: BaseActions) {\r\n    const dispatch = useAppDispatch();\r\n    useEffect(() => {\r\n        dispatch(baseActions.initializeStore());\r\n    }, [baseActions, dispatch]);\r\n}\r\n","import {useFormikContext} from 'formik';\r\nimport React, {useEffect} from 'react';\r\nimport {ApiValidationError} from 'src/app/api/common/api-errors';\r\n\r\ninterface KFormikErrorHandlerProps {\r\n    apiError: ApiValidationError | null;\r\n}\r\n\r\nconst KFormikErrorHandler: React.FunctionComponent<KFormikErrorHandlerProps> = (\r\n    {\r\n        apiError,\r\n    }) => {\r\n    const formik = useFormikContext();\r\n    useEffect(() => {\r\n        if (apiError?.detail) {\r\n            Object.keys(apiError.detail).forEach(key => {\r\n                if (key !== 'nonFieldErrors' && Array.isArray(apiError.detail[key])) {\r\n                    const error = apiError.detail[key].reduce(((previousValue, currentValue) => previousValue + currentValue), '');\r\n                    formik.setFieldError(key,  error);\r\n                }\r\n            })\r\n        }\r\n    }, [apiError, formik]);\r\n\r\n\r\n    return (\r\n        <></>\r\n    )\r\n}\r\n\r\n\r\nexport default KFormikErrorHandler;\r\n","import React from 'react';\r\n\r\ninterface CurrencyProps {\r\n    value: number;\r\n}\r\n\r\nexport const KCurrency: React.FunctionComponent<CurrencyProps> = (\r\n    {\r\n        value\r\n    }) => {\r\n    return (\r\n        <>{value.toFixed(2)} €</>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {FormGroup} from 'reactstrap';\r\n\r\ninterface ErrorMessageProps {\r\n    message: string | null | undefined;\r\n}\r\n\r\nexport const KErrorMessage: React.FunctionComponent<ErrorMessageProps> = (\r\n    {\r\n        message\r\n    }) => {\r\n    return (\r\n        <FormGroup>\r\n            <div className=\"text-danger\">{message}</div>\r\n        </FormGroup>\r\n    )\r\n}\r\n","import React, {HTMLProps} from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {KButton} from 'src/app/shared/components/primitives';\r\n\r\ninterface KFormikCancelProps extends HTMLProps<any> {\r\n    onClick: () => void;\r\n    className?: string;\r\n}\r\n\r\nconst KFormikCancel: React.FunctionComponent<KFormikCancelProps> = (\r\n    {\r\n        onClick,\r\n        className,\r\n    }) => {\r\n    return (\r\n        <KButton className={className}\r\n                 onClick={onClick}\r\n                 color=\"danger\"\r\n                 type=\"button\">\r\n            <FormattedMessage id=\"COMMON.FORM.CANCEL\"/>\r\n        </KButton>\r\n    )\r\n}\r\n\r\n\r\nexport default KFormikCancel;\r\n","import {useFormikContext} from 'formik';\r\nimport React from 'react';\r\nimport {KButton} from '../primitives';\r\n\r\nexport interface KFormikSubmitProps {\r\n    text?: React.ReactNode;\r\n    className?: string;\r\n    isBlock?: boolean;\r\n}\r\n\r\nexport const KFormikSubmit: React.FunctionComponent<KFormikSubmitProps> = (\r\n    {\r\n        text = 'Submit',\r\n        className = '',\r\n        isBlock = false\r\n    }) => {\r\n    const formik = useFormikContext();\r\n    className += \" btn-primary\";\r\n    if (isBlock) {\r\n        className += ' btn-block';\r\n    }\r\n    return (\r\n        <KButton\r\n            color=\"primary\"\r\n            disabled={!formik.isValid}\r\n            className={className}\r\n            type=\"submit\">{text}\r\n        </KButton>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {KFlexRow} from 'src/app/shared/components/flex';\r\nimport KFormikCancel from 'src/app/shared/components/forms/k-formik-cancel';\r\nimport {KFormikSubmit} from 'src/app/shared/components/forms/k-formik-submit';\r\n\r\ninterface KFormikStandardButtonsProps {\r\n    onCancel: () => void;\r\n}\r\n\r\nconst KFormikStandardButtons: React.FunctionComponent<KFormikStandardButtonsProps> = (\r\n    {\r\n        onCancel\r\n    }) => {\r\n    return (\r\n        <KFlexRow align={'baseline'} justify={'end'}>\r\n            <KFormikSubmit className=\"mr-2\"/>\r\n            <KFormikCancel className=\"m-0\" onClick={onCancel}/>\r\n        </KFlexRow>\r\n    )\r\n}\r\n\r\n\r\nexport default KFormikStandardButtons;\r\n","import {Formik} from 'formik';\r\nimport {FormikHelpers, FormikProps} from 'formik/dist/types';\r\nimport React from 'react';\r\nimport {Form, FormGroup} from 'reactstrap';\r\nimport {ApiValidationError} from 'src/app/api/common/api-errors';\r\nimport KFormikErrorHandler from 'src/app/shared/components/forms/k-formik-error-handler';\r\nimport KFormikStandardButtons from 'src/app/shared/components/forms/k-formik-standard-buttons';\r\n\r\nexport interface KFormikFormProps<Values> {\r\n    initialValues: Values;\r\n    apiError: ApiValidationError | null;\r\n    validationSchema?: any | (() => any);\r\n    onSubmit: (values: Values, formikHelpers: FormikHelpers<Values>) => void;\r\n    onCancel?: () => void;\r\n    children: ((props: FormikProps<Values>) => React.ReactNode) | React.ReactNode;\r\n    errors?: string[];\r\n}\r\n\r\nexport function KFormikForm<Values>(\r\n    {\r\n        initialValues,\r\n        apiError,\r\n        onSubmit,\r\n        onCancel,\r\n        children,\r\n        validationSchema\r\n    }: KFormikFormProps<Values>) {\r\n    let errors: string[] = [];\r\n    if (apiError?.detail && apiError.detail['nonFieldErrors']) {\r\n        errors = apiError.detail['nonFieldErrors'];\r\n    }\r\n    return (\r\n        <Formik initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={onSubmit}>\r\n            {(formik) => (\r\n                <Form className=\"is-invalid\" onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    formik.handleSubmit(e);\r\n                }}>\r\n                    <FormGroup className=\"text-danger\">\r\n                        {errors.map((error, key) => <div key={key}>{error}</div>)}\r\n                    </FormGroup>\r\n                    <KFormikErrorHandler apiError={apiError}/>\r\n\r\n                    {typeof children == 'function'\r\n                        ? (children as (props: FormikProps<Values>) => React.ReactNode)(formik)\r\n                        : children}\r\n\r\n                    {onCancel &&\r\n                    <KFormikStandardButtons onCancel={onCancel}/>\r\n                    }\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\n","\r\n\r\nexport function camelCaseToWords(value: string) {\r\n    const result = value.replace( /([A-Z])/g, \" $1\" );\r\n    return result.charAt(0).toUpperCase() + result.slice(1);\r\n}\r\n","import {ErrorMessage, Field, FieldInputProps, useFormikContext} from 'formik';\r\nimport * as React from 'react';\r\nimport {FormFeedback, FormGroup, Label} from 'reactstrap';\r\nimport {KFormikInputBaseProps} from 'src/app/shared/components/forms/interfaces';\r\nimport {KCheckbox, KColorInput, KDurationInput, KMultiSelectInput} from 'src/app/shared/components/primitives/inputs';\r\nimport {MultiSelectOption} from 'src/app/shared/components/primitives/inputs/interfaces';\r\nimport {camelCaseToWords} from 'src/app/shared/util/string-extensions';\r\n\r\nexport interface KFormikInputProps extends KFormikInputBaseProps {\r\n    options?: MultiSelectOption[];\r\n    multiple?: boolean;\r\n    emptyOption?: boolean;\r\n    as?: string;\r\n    className?: string;\r\n}\r\n\r\nfunction inputAs(as: string,\r\n                 options: { id: number; name: string }[] | undefined\r\n): string | React.FunctionComponent<any> {\r\n    switch (as) {\r\n        case 'duration':\r\n            return KDurationInput\r\n        case 'color':\r\n            return KColorInput\r\n        case 'multi-select':\r\n            return (fieldProps: FieldInputProps<any>) =>\r\n                <KMultiSelectInput\r\n                    name={fieldProps.name}\r\n                    value={fieldProps.value}\r\n                    onChange={fieldProps.onChange}\r\n                    onBlur={fieldProps.onBlur}\r\n                    options={options || []}\r\n                />\r\n        case 'checkbox':\r\n            return KCheckbox\r\n        default:\r\n            return as;\r\n    }\r\n}\r\n\r\nexport const KFormikInput: React.FunctionComponent<KFormikInputProps> = (\r\n    {\r\n        name,\r\n        placeholder,\r\n        type,\r\n        options,\r\n        multiple = false,\r\n        emptyOption = true,\r\n        as = 'input',\r\n        className = '',\r\n    }\r\n) => {\r\n    const formik = useFormikContext();\r\n    const fieldMeta = formik.getFieldMeta(name);\r\n    const fieldHelpers = formik.getFieldHelpers(name);\r\n    const fieldClassName = `form-control ${(fieldMeta.error && fieldMeta.touched) ? ' is-invalid' : ''} ${multiple ? ' form-select form-control' : ''}`\r\n    const isCheckbox = as === 'checkbox';\r\n    const inputType = React.useMemo(() => inputAs(as, options), [options, as]);\r\n\r\n    const handleOnEmptySelect = () => fieldHelpers.setValue(null);\r\n\r\n    return (\r\n        <FormGroup className={className} check={isCheckbox}>\r\n            {!isCheckbox &&\r\n            <Label for={name} className=\"ml-1 mb-1\">{placeholder || camelCaseToWords(name)}</Label>\r\n            }\r\n            <Field className={fieldClassName}\r\n                   as={inputType}\r\n                   id={name}\r\n                   name={name}\r\n                   type={type}\r\n                   multiple={multiple}\r\n                   placeholder={placeholder || name}>\r\n                {options &&\r\n                <>\r\n                    {emptyOption && !multiple && <option onClick={handleOnEmptySelect} value=\"\"/>}\r\n                    {options.map((option) =>\r\n                        <option key={option.id} value={option.id}>{option.name}</option>)\r\n                    }\r\n                </>\r\n                }\r\n            </Field>\r\n            <FormFeedback>\r\n                <ErrorMessage name={name}/>\r\n            </FormFeedback>\r\n        </FormGroup>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {Customer, saveCustomerRequestParser} from 'src/app/api/customers';\r\nimport {AdminEditContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport {KFormikForm, KFormikInput} from 'src/app/shared/components/forms';\r\nimport * as yup from 'yup';\r\n\r\nconst CustomerUpsertForm: React.FunctionComponent<AdminEditContainerProps<Customer>> = (\r\n    {\r\n        entity,\r\n        apiError,\r\n        onSubmit,\r\n        onCancel\r\n    }) => {\r\n    const validation = yup.object().shape({\r\n        firstName: yup.string().required(),\r\n        lastName: yup.string().required(),\r\n        email: yup.string().required().email(),\r\n    });\r\n\r\n    return (\r\n        <KFormikForm initialValues={saveCustomerRequestParser(entity)}\r\n                     apiError={apiError}\r\n                     onSubmit={onSubmit}\r\n                     onCancel={onCancel}\r\n                     validationSchema={validation}\r\n        >\r\n            <KFormikInput name=\"firstName\"/>\r\n            <KFormikInput name=\"lastName\"/>\r\n            <KFormikInput name=\"email\"/>\r\n            <KFormikInput name=\"phone\"/>\r\n            <KFormikInput as=\"textarea\" name=\"warning\"/>\r\n        </KFormikForm>\r\n    )\r\n}\r\n\r\n\r\nexport default CustomerUpsertForm;\r\n","import {useFormikContext} from 'formik';\r\nimport React, {useEffect, useState} from 'react';\r\nimport AsyncSelect from 'react-select/async';\r\nimport {FormGroup, Label} from 'reactstrap';\r\nimport {adminCustomerClient, Customer} from 'src/app/api/customers';\r\nimport CustomerUpsertForm from 'src/app/modules/admin/customers/customer-upsert-form';\r\nimport {useEditModal} from 'src/app/shared/admin/hooks';\r\nimport {KFlexColumn, KFlexRow} from 'src/app/shared/components/flex';\r\nimport {KIconButton} from 'src/app/shared/components/primitives/buttons';\r\nimport KIcon from 'src/app/shared/components/primitives/k-icon';\r\nimport {customerActions, customerSelectors} from 'src/app/store/admin/customers';\r\n\r\ninterface FormikCustomerInput {\r\n    initialCustomer: Customer | null;\r\n}\r\n\r\nexport const KFormikCustomerInput: React.FunctionComponent<FormikCustomerInput> = ({initialCustomer}) => {\r\n    const [customer, setCustomer] = useState<Customer | null>(initialCustomer);\r\n    const [openModal, modal, createdCustomer] = useEditModal(customerSelectors, customerActions, CustomerUpsertForm);\r\n    const formik = useFormikContext();\r\n    const {setValue} = formik.getFieldHelpers('customer');\r\n\r\n    useEffect(() => {\r\n        if (createdCustomer) {\r\n            setCustomer(createdCustomer);\r\n            setValue(createdCustomer.id);\r\n        }\r\n    }, [createdCustomer, setValue]);\r\n\r\n    const promiseOptions = (value: string) => adminCustomerClient.get({search: value}).then(res => res.results);\r\n\r\n    const navigateToPage = (selectedCustomer: Customer | null) => {\r\n        setCustomer(selectedCustomer);\r\n        setValue(selectedCustomer?.id || null);\r\n    }\r\n\r\n\r\n    return (\r\n        <FormGroup>\r\n            {modal}\r\n            <Label>Customer</Label>\r\n            <FormGroup>\r\n                <KFlexRow align={'center'}>\r\n                    <AsyncSelect className={\"flex-fill\"}\r\n                                 cacheOptions\r\n                                 defaultOptions\r\n                                 backspaceRemovesValue\r\n                                 defaultInputValue={initialCustomer?.name}\r\n                                 getOptionValue={(option) => option.id.toString()}\r\n                                 getOptionLabel={(option) => option.name}\r\n                                 formatOptionLabel={(option) =>\r\n                                     <KFlexColumn justify={'between'} className={option.warning ? 'bg-danger' : ''}>\r\n                                         <span className=\"font-bold\">{option.name}</span> {option.email}\r\n                                     </KFlexColumn>\r\n                                 }\r\n                                 onChange={navigateToPage}\r\n                                 loadOptions={promiseOptions}/>\r\n                    <KIconButton color=\"primary\" icon={'plus'} onClick={openModal(null)}/>\r\n                </KFlexRow>\r\n            </FormGroup>\r\n\r\n            {customer &&\r\n            <KFlexColumn>\r\n                <KFlexRow justify={'between'}>\r\n                    <KFlexRow className={\"mb-2\"} align={'center'}>\r\n                        <KIcon margin={2} color=\"primary\" icon={'user'}/>\r\n                        {customer.name}\r\n                    </KFlexRow>\r\n                    <KFlexRow align={'center'}>\r\n                        <KIcon margin={2} color=\"primary\" icon={'phone'}/>\r\n                        {customer.phone}\r\n                    </KFlexRow>\r\n                </KFlexRow>\r\n                <KFlexRow align={'center'}>\r\n                    <KIcon margin={2} color=\"primary\" icon={'at'}/>\r\n                    {customer.email}\r\n                </KFlexRow>\r\n            </KFlexColumn>\r\n            }\r\n        </FormGroup>\r\n    )\r\n}\r\n","import {useFormikContext} from 'formik';\r\nimport {Moment} from 'moment';\r\nimport React from 'react';\r\nimport Datetime from 'react-datetime';\r\nimport {FormGroup} from 'reactstrap';\r\nimport {momentToIso, stringToMoment} from 'src/app/shared/util/moment-helpers';\r\n\r\ninterface KDatetimeInput {\r\n    name: string\r\n}\r\n\r\nconst KFormikDatetimeInput: React.FunctionComponent<KDatetimeInput> = (\r\n    {\r\n        name,\r\n    }) => {\r\n    const formik = useFormikContext();\r\n\r\n    const handleDateChange = (e: Moment | string) => {\r\n        formik.getFieldHelpers(name).setValue(momentToIso(e as Moment));\r\n    }\r\n\r\n    return (\r\n        <FormGroup>\r\n            <Datetime\r\n                inputProps={{\r\n                    name: name,\r\n                    className: 'form-control',\r\n                }}\r\n                initialValue={stringToMoment(formik.getFieldProps(name).value)}\r\n                onChange={handleDateChange}\r\n            />\r\n        </FormGroup>\r\n    )\r\n}\r\n\r\n\r\nexport default KFormikDatetimeInput;\r\n","import {useFormikContext} from 'formik';\r\nimport moment, {Moment} from 'moment';\r\nimport React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {FormGroup, Input, Label} from 'reactstrap';\r\nimport {CustomerAppointment} from 'src/app/api/appointments';\r\nimport {timeToString} from 'src/app/api/common/models';\r\nimport {KFlexColumn, KFlexRow} from 'src/app/shared/components/flex';\r\nimport {KFormikCustomerInput, KFormikInput} from 'src/app/shared/components/forms';\r\nimport {KDateInput} from 'src/app/shared/components/primitives/inputs';\r\nimport {stringToMoment} from 'src/app/shared/util/moment-helpers';\r\nimport {useAppSelector} from 'src/app/store';\r\nimport {employeeSelectors} from 'src/app/store/admin/employees';\r\nimport {serviceSelectors} from 'src/app/store/admin/services';\r\n\r\nfunction addHours(date: Moment, time: string): string {\r\n    const momentTime = moment.utc(time, 'HH:mm')\r\n    return date.clone()\r\n        .add(momentTime.hour(), 'hour')\r\n        .add(momentTime.minutes(), 'minutes')\r\n        .toISOString();\r\n}\r\n\r\nfunction useDateHelper(name: string): [Moment, (value: Moment) => void, string, (event: ChangeEvent<HTMLInputElement>) => void] {\r\n    const formik = useFormikContext();\r\n    const {value} = formik.getFieldMeta<string>(name);\r\n    const {setValue} = formik.getFieldHelpers(name);\r\n\r\n    const momentValue = stringToMoment(value);\r\n    const [time, setTime] = useState(momentValue.format('HH:mm'));\r\n\r\n    useEffect(() => {\r\n        const momentValue = stringToMoment(value);\r\n        setTime(momentValue.format('HH:mm'))\r\n    }, [value]);\r\n\r\n    const handleDateChange = (value: Moment) => {\r\n        setValue((addHours(value.startOf('day'), time)));\r\n\r\n    }\r\n    const handleTimeChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTime(e.target.value);\r\n        setValue((addHours(momentValue.startOf('day'), e.target.value)));\r\n\r\n    }\r\n\r\n\r\n    return [momentValue, handleDateChange, time, handleTimeChange]\r\n}\r\n\r\nconst FormikStartEndTimeInput: React.FunctionComponent = () => {\r\n    const [start, handleDateChange, startTime, handleStartTimeChange] = useDateHelper('start');\r\n    const [, handleEndDateChange, endTime, handleEndTimeChange] = useDateHelper('end');\r\n\r\n    return (\r\n        <>\r\n            <FormGroup>\r\n                <KFlexColumn>\r\n                    <Label>Date</Label>\r\n                    <KDateInput value={start}\r\n                                onChange={(e) => {\r\n                                    handleDateChange(e);\r\n                                    handleEndDateChange(e);\r\n                                }}/>\r\n                </KFlexColumn>\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <KFlexRow align={'center'} justify={'center'}>\r\n                    <KFlexColumn className=\"w-100\">\r\n                        Start\r\n                        <Input value={startTime} onChange={handleStartTimeChange} type={'time'}/>\r\n                    </KFlexColumn>\r\n                    <KFlexColumn className=\"w-100\">\r\n                        Finish\r\n                        <Input value={endTime} onChange={handleEndTimeChange} type={'time'}/>\r\n                    </KFlexColumn>\r\n                </KFlexRow>\r\n            </FormGroup>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction useEmployeeServices() {\r\n    const formik = useFormikContext();\r\n    const employeeId = formik.getFieldProps<number>('employee').value;\r\n    const [employeeServices, setEmployeeServices] = useState<number[]>([]);\r\n    const employeeEntities = useAppSelector(employeeSelectors.selectEntities);\r\n\r\n    useEffect(() => {\r\n        setEmployeeServices(employeeEntities[employeeId]?.services || [])\r\n    }, [employeeEntities, employeeId]);\r\n\r\n    return useAppSelector((state) => serviceSelectors.selectByIds(state, employeeServices));\r\n}\r\n\r\nfunction useUpdateEndTimeOnServiceChangeEffect() {\r\n    const formik = useFormikContext();\r\n    const serviceId = formik.getFieldProps<number>('service').value;\r\n    const [initialId, setInitialId] = useState(serviceId);\r\n    const service = useAppSelector((state) => serviceSelectors.selectById(state, serviceId));\r\n    const {value} = formik.getFieldProps('start');\r\n    const {setValue} = formik.getFieldHelpers('end');\r\n\r\n    useEffect(() => {\r\n        if (service && serviceId !== initialId) {\r\n            setInitialId(serviceId);\r\n            setValue(addHours(stringToMoment(value), timeToString(service.duration)))\r\n        }\r\n    }, [initialId, service, serviceId, setValue, value]);\r\n}\r\n\r\ninterface CustomerAppointmentUpsertFormProps {\r\n    appointment: CustomerAppointment | null;\r\n}\r\n\r\nconst CustomerAppointmentUpsertForm: React.FunctionComponent<CustomerAppointmentUpsertFormProps> = ({appointment}) => {\r\n    const employees = useAppSelector(employeeSelectors.selectAll);\r\n    const services = useEmployeeServices();\r\n    useUpdateEndTimeOnServiceChangeEffect();\r\n\r\n    return (\r\n        <>\r\n            <FormikStartEndTimeInput/>\r\n            <KFormikInput name=\"employee\" as={'select'} options={employees}/>\r\n            <KFormikInput name=\"service\" as={'select'} options={services}/>\r\n            <KFormikCustomerInput initialCustomer={appointment?.customer || null}/>\r\n            <KFormikInput name=\"internalNotes\" as={'textarea'}/>\r\n            <KFormikInput placeholder=\"Allow Overlapping\" name=\"ignoreAvailability\" as={'checkbox'}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default CustomerAppointmentUpsertForm;\r\n","import React, {useState} from 'react';\r\nimport {\r\n    Appointment,\r\n    CustomerAppointment,\r\n    EventType,\r\n    upsertCustomerAppointmentRequestParser,\r\n    UpsertCustomerAppointmentRequestValidation,\r\n    upsertEmployeeEventRequestParser,\r\n    UpsertEmployeeEventRequestValidation\r\n} from 'src/app/api/appointments';\r\nimport {PermissionModel} from 'src/app/api/auth';\r\nimport AppointmentHistoryContainer from 'src/app/modules/admin/appointments/appointment-history-container';\r\nimport DeleteButton from 'src/app/shared/admin/delete-button';\r\nimport {useInitializeEffect} from 'src/app/shared/admin/hooks';\r\nimport {AdminEditContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport {KFlexRow} from 'src/app/shared/components/flex';\r\nimport {KFormikForm, KFormikInput} from 'src/app/shared/components/forms';\r\nimport KFormikDatetimeInput from 'src/app/shared/components/forms/k-formik-datetime-input';\r\nimport {KIconButton} from 'src/app/shared/components/primitives/buttons';\r\nimport {appointmentActions} from 'src/app/store/admin/appointments';\r\nimport {serviceActions} from 'src/app/store/admin/services';\r\nimport CustomerAppointmentUpsertForm from './customer-appointment-upsert-form';\r\n\r\nconst AppointmentUpsertForm: React.FunctionComponent<AdminEditContainerProps<Appointment>> = (\r\n    {\r\n        entity,\r\n        apiError,\r\n        onSubmit,\r\n        onCancel\r\n    }) => {\r\n    const isAppointment = entity?.type === EventType.CustomerAppointment;\r\n    const validationSchema = isAppointment ? UpsertCustomerAppointmentRequestValidation : UpsertEmployeeEventRequestValidation;\r\n    const initialValues = isAppointment ? upsertCustomerAppointmentRequestParser(entity) : upsertEmployeeEventRequestParser(entity);\r\n    const [showHistory, setShowHistory] = useState(false);\r\n    useInitializeEffect(serviceActions);\r\n\r\n    const handleHistoryClick = () => {\r\n        setShowHistory(true);\r\n    };\r\n\r\n    const handleHistoryCloseClick = () => {\r\n        setShowHistory(false);\r\n    };\r\n\r\n    return (\r\n        <KFormikForm initialValues={initialValues}\r\n                     apiError={apiError}\r\n                     onSubmit={onSubmit}\r\n                     onCancel={onCancel}\r\n                     validationSchema={validationSchema}\r\n        >\r\n            {entity && entity.id !== 0 &&\r\n            <KFlexRow justify=\"end\">\r\n                <DeleteButton entity={entity}\r\n                              modelType={PermissionModel.appointment}\r\n                              baseActions={appointmentActions}/>\r\n                <KIconButton icon=\"history\"\r\n                             color=\"primary\"\r\n                             onClick={handleHistoryClick}/>\r\n                <AppointmentHistoryContainer id={entity.id} isOpen={showHistory} onClose={handleHistoryCloseClick}/>\r\n            </KFlexRow>\r\n            }\r\n            {isAppointment &&\r\n            <CustomerAppointmentUpsertForm appointment={entity as CustomerAppointment}/>\r\n            }\r\n            {!isAppointment &&\r\n            <>\r\n                <KFormikDatetimeInput name=\"start\"/>\r\n                <KFormikDatetimeInput name=\"end\"/>\r\n                <KFormikInput name=\"internalNotes\" as={'textarea'}/>\r\n                <KFormikInput placeholder=\"Allow Overlapping\" name=\"ignoreAvailability\" as={'checkbox'}/>\r\n            </>\r\n            }\r\n        </KFormikForm>\r\n    )\r\n}\r\n\r\n\r\nexport default AppointmentUpsertForm;\r\n","import React from 'react';\r\nimport {SchedulingPanel} from 'src/app/api/scheduling-panels/models';\r\nimport {upsertSchedulingPanelRequestParser} from 'src/app/api/scheduling-panels/parsers';\r\nimport {useSelectAll} from 'src/app/shared/admin/hooks';\r\nimport {AdminEditContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport {KFormikForm, KFormikInput} from 'src/app/shared/components/forms';\r\nimport {employeeActions, employeeSelectors} from 'src/app/store/admin/employees';\r\n\r\nconst SchedulingPanelForm: React.FunctionComponent<AdminEditContainerProps<SchedulingPanel>> = (\r\n    {\r\n        entity,\r\n        apiError,\r\n        onSubmit,\r\n        onCancel\r\n    }) => {\r\n    const employees = useSelectAll(employeeSelectors, employeeActions);\r\n\r\n    return (\r\n        <KFormikForm initialValues={upsertSchedulingPanelRequestParser(entity)}\r\n                     apiError={apiError}\r\n                     onSubmit={onSubmit}\r\n                     onCancel={onCancel}\r\n        >\r\n            <KFormikInput name=\"name\"/>\r\n            <KFormikInput name=\"employees\" as=\"multi-select\" options={employees}/>\r\n        </KFormikForm>\r\n    )\r\n}\r\n\r\n\r\nexport default SchedulingPanelForm;\r\n","import React, {useEffect, useState} from 'react';\r\nimport SchedulingPanelForm from 'src/app/modules/admin/appointments/scheduling-panels/scheduling-panel-form';\r\nimport {useEditModal, useSelectAll} from 'src/app/shared/admin/hooks';\r\nimport {KFlexRow} from 'src/app/shared/components/flex';\r\nimport {UseConfirmationModalWithDispatch} from 'src/app/shared/components/modal/delete-confirmation-modal';\r\nimport {KTextButton, KIconButton} from 'src/app/shared/components/primitives/buttons';\r\nimport {useAppDispatch} from 'src/app/store';\r\nimport {adminDashboardActions} from 'src/app/store/admin/dashboard';\r\nimport {schedulingPanelActions, schedulingPanelSelectors} from 'src/app/store/admin/panels';\r\n\r\n\r\nconst SchedulingPanelsSelector: React.FunctionComponent = () => {\r\n    const dispatch = useAppDispatch();\r\n    const schedulingPanels = useSelectAll(schedulingPanelSelectors, schedulingPanelActions);\r\n    const [selectedIndex, setSelectedIndex] = useState<number>(0);\r\n    const [setDeleteId, confirmDeleteModal] = UseConfirmationModalWithDispatch(schedulingPanelActions.deleteEntity);\r\n    const [openModal, formModal] = useEditModal(schedulingPanelSelectors, schedulingPanelActions, SchedulingPanelForm);\r\n\r\n\r\n    useEffect(() => {\r\n        if (schedulingPanels && schedulingPanels[selectedIndex]) {\r\n            dispatch(adminDashboardActions.setSelectedPanelId(schedulingPanels[selectedIndex].id));\r\n        }\r\n    }, [dispatch, schedulingPanels, selectedIndex])\r\n\r\n    const handlePanelClick = (index: number) => () => {\r\n        setSelectedIndex(index);\r\n        dispatch(adminDashboardActions.setSelectedPanelId(schedulingPanels[index].id));\r\n    }\r\n\r\n    const handleDeleteClick = () => {\r\n        setDeleteId(schedulingPanels[selectedIndex].id);\r\n    }\r\n\r\n    return (\r\n        <KFlexRow className=\"m-2\" align={'center'}>\r\n            {confirmDeleteModal}\r\n            {formModal}\r\n            {schedulingPanels.map((panel, i) =>\r\n                <KTextButton key={i}\r\n                             className={selectedIndex === i ? 'underline-accent' : ''}\r\n                             onClick={handlePanelClick(i)}\r\n                >{panel.name}</KTextButton>)\r\n            }\r\n            <KIconButton color=\"primary\" icon=\"plus\" onClick={openModal(null)}/>\r\n            <KIconButton color=\"accent\" icon=\"edit\" onClick={openModal(schedulingPanels[selectedIndex])}/>\r\n            <KIconButton color=\"danger\" icon=\"trash\" onClick={handleDeleteClick}/>\r\n        </KFlexRow>\r\n    )\r\n}\r\n\r\n\r\nexport default SchedulingPanelsSelector;\r\n","import {Moment} from 'moment';\r\nimport React from 'react';\r\nimport {Appointment, blankCustomerAppointment} from 'src/app/api/appointments';\r\nimport {Employee} from 'src/app/api/employees';\r\nimport {KIconButton} from 'src/app/shared/components/primitives/buttons';\r\n\r\ninterface CreateAppointmentButtonsProps {\r\n    employee: Employee;\r\n    onCreateClick: (entity: Appointment | null) => () => void;\r\n    currentDate: Moment;\r\n    hour: number;\r\n    minute: number;\r\n}\r\n\r\nconst CreateAppointmentButtons: React.FunctionComponent<CreateAppointmentButtonsProps> = (\r\n    {\r\n        employee,\r\n        onCreateClick,\r\n        currentDate,\r\n        hour,\r\n        minute\r\n    }) => {\r\n    const employeeId = employee.id;\r\n    const selectedTime = () => currentDate.clone().add(hour, 'hour').add(minute, 'minute');\r\n    const handleAddClick = () =>\r\n        onCreateClick(blankCustomerAppointment(employeeId, selectedTime()))();\r\n    const handleLockClick = () =>\r\n        onCreateClick(blankCustomerAppointment(employeeId, selectedTime().add(minute, 'minute')))();\r\n\r\n    return (\r\n        <>\r\n            <KIconButton color=\"primary\" icon={'plus'} onClick={handleAddClick}/>\r\n            <KIconButton color=\"accent\" icon={'lock'} onClick={handleLockClick}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateAppointmentButtons;\r\n","import moment from 'moment';\r\nimport React from 'react';\r\nimport {Appointment, CustomerAppointment} from 'src/app/api/appointments';\r\nimport {Employee} from 'src/app/api/employees';\r\nimport styles from 'src/app/modules/admin/appointments/employee-panel/employee-panel.module.scss';\r\nimport {useHoursConverter} from 'src/app/modules/admin/appointments/employee-panel/hooks';\r\nimport {useAppSelector} from 'src/app/store';\r\nimport {appointmentSelectors} from 'src/app/store/admin/appointments';\r\n\r\ninterface EventProps {\r\n    appointment: Appointment;\r\n    onClick: () => void;\r\n}\r\n\r\n\r\nconst Event: React.FunctionComponent<EventProps> = (\r\n    {\r\n        appointment,\r\n        onClick\r\n    }) => {\r\n    const start = moment.utc(appointment.start);\r\n    const end = moment.utc(appointment.end);\r\n\r\n    const customerAppointment = 'customer' in appointment && appointment.customer ? appointment as CustomerAppointment : null;\r\n\r\n\r\n    const duration = moment.duration(end.diff(start));\r\n\r\n    const backgroundColor = customerAppointment ? customerAppointment.service.color : '#FFFFFF';\r\n    const title = customerAppointment ? customerAppointment.customer.name : appointment.internalNotes;\r\n    const subTitle = customerAppointment ? customerAppointment.service.name : '';\r\n\r\n    const style: React.CSSProperties = {\r\n        top: useHoursConverter(start),\r\n        height: useHoursConverter(duration),\r\n        backgroundColor,\r\n    }\r\n\r\n    return (\r\n        <div style={style}\r\n             className={styles.panelEvent}\r\n             onClick={onClick}\r\n        >\r\n            <div>\r\n                {title}\r\n            </div>\r\n            {subTitle}\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface EventsContainerProps {\r\n    employee: Employee;\r\n    onSelect: (entity: Appointment | null) => () => void\r\n}\r\n\r\nconst EventsContainer: React.FunctionComponent<EventsContainerProps> = (\r\n    {\r\n        employee,\r\n        onSelect\r\n    }) => {\r\n    const appointments = useAppSelector(appointmentSelectors.selectAll);\r\n\r\n    const employeeAppointments = React.useMemo(() =>\r\n            appointments.filter(appointment => appointment.employee.id === employee.id)\r\n        , [appointments, employee.id]\r\n    )\r\n\r\n    return (\r\n        <div className=\"position-relative\">\r\n            {employeeAppointments.map(appointment =>\r\n                <Event key={appointment.id}\r\n                       appointment={appointment}\r\n                       onClick={onSelect(appointment)}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default EventsContainer;\r\n","import React from 'react';\r\nimport {Appointment} from 'src/app/api/appointments';\r\nimport {timeToString} from 'src/app/api/common/models';\r\nimport {Employee} from 'src/app/api/employees';\r\nimport {getShift} from 'src/app/api/schedule';\r\nimport {isAvailable} from 'src/app/api/shifts';\r\nimport {useSelectPanelEmployees} from 'src/app/modules/admin/appointments/employee-panel/hooks';\r\nimport {KFlexColumn, KFlexRow} from 'src/app/shared/components/flex';\r\nimport KShowOnHoverContainer from 'src/app/shared/components/primitives/containers/k-show-on-hover-container';\r\nimport {useAppSelector} from 'src/app/store';\r\nimport {adminDashboardSelectors} from 'src/app/store/admin/dashboard';\r\nimport {scheduleSelectors} from 'src/app/store/admin/schedules';\r\nimport CreateAppointmentButtons from './create-appointment-buttons';\r\nimport styles from './employee-panel.module.scss';\r\nimport EventsContainer from './event-container';\r\n\r\nconst PanelHours: React.FunctionComponent = () => {\r\n    const hours = useAppSelector(adminDashboardSelectors.selectPanelHours);\r\n    const slotSize = useAppSelector(adminDashboardSelectors.selectSlotSize);\r\n\r\n    const style: React.CSSProperties = {\r\n        minHeight: `${slotSize / 2}rem`,\r\n        height: `${slotSize / 2}rem`,\r\n        textAlign: 'right',\r\n        position: 'relative',\r\n        top: '-0.75rem'\r\n    }\r\n    return (\r\n        <KFlexColumn className={`sticky-top-left bg-white-gray ${styles.borderRight}`}>\r\n            {hours.map((hour, i) =>\r\n                <React.Fragment key={i}>\r\n                    <div style={style} className={styles.sideItem}>\r\n                        {timeToString({hour, minute: 0})}\r\n                    </div>\r\n                    <div style={style}/>\r\n                </React.Fragment>\r\n            )}\r\n        </KFlexColumn>\r\n    )\r\n}\r\n\r\ninterface EmployeePanelProps {\r\n    employee: Employee;\r\n    onCreateClick: (entity: Appointment | null) => () => void;\r\n}\r\n\r\nconst EmployeePanelBody: React.FunctionComponent<EmployeePanelProps> = (\r\n    {\r\n        employee,\r\n        onCreateClick\r\n    }) => {\r\n    const currentDate = useAppSelector(adminDashboardSelectors.selectCurrentDate);\r\n    const schedule = useAppSelector(state => scheduleSelectors.selectById(state, employee.schedule));\r\n    const hours = useAppSelector(adminDashboardSelectors.selectPanelHours);\r\n    const slotSize = useAppSelector(adminDashboardSelectors.selectSlotSize);\r\n    const style = {\r\n        height: `${slotSize / 2}rem`,\r\n    }\r\n\r\n    function backgroundColor(hour: number, minute: number) {\r\n        return schedule && getShift(schedule, currentDate)?.frames\r\n            .some(frame => isAvailable(frame, hour, minute)) ? '' : styles.unavailableSlot;\r\n    }\r\n\r\n    return (\r\n        <KFlexColumn>\r\n            {hours.map((hour, i) =>\r\n                <React.Fragment key={i}>\r\n                    <KShowOnHoverContainer className={`${styles.middleItem} ${backgroundColor(hour, 0)}`}\r\n                                           style={style}\r\n                    >\r\n                        <CreateAppointmentButtons employee={employee}\r\n                                                  onCreateClick={onCreateClick}\r\n                                                  currentDate={currentDate}\r\n                                                  hour={hour}\r\n                                                  minute={0}/>\r\n                    </KShowOnHoverContainer>\r\n                    <KShowOnHoverContainer className={`${styles.middleItem} ${backgroundColor(hour, 30)}`}\r\n                                           style={style}\r\n                    >\r\n                        <CreateAppointmentButtons employee={employee}\r\n                                                  onCreateClick={onCreateClick}\r\n                                                  currentDate={currentDate}\r\n                                                  hour={hour}\r\n                                                  minute={30}/>\r\n                    </KShowOnHoverContainer>\r\n                </React.Fragment>\r\n            )}\r\n        </KFlexColumn>\r\n    )\r\n}\r\n\r\nexport interface EmployeePanelsBodyContainerProps {\r\n    onSelect: (entity: Appointment | null) => () => void\r\n}\r\n\r\nexport const EmployeePanelsBodyContainer: React.FunctionComponent<EmployeePanelsBodyContainerProps> = ({onSelect}) => {\r\n    const employees = useSelectPanelEmployees();\r\n    return (\r\n        <KFlexRow>\r\n            <>\r\n                <PanelHours/>\r\n                {employees.map(employee =>\r\n                    <React.Fragment key={employee.id}>\r\n                        <EventsContainer onSelect={onSelect} employee={employee}/>\r\n                        <EmployeePanelBody onCreateClick={onSelect} employee={employee}/>\r\n                    </React.Fragment>\r\n                )}\r\n            </>\r\n        </KFlexRow>\r\n    )\r\n}\r\n\r\n","import {TimeFrame} from './models';\r\n\r\n\r\nexport function isAvailable(frame: TimeFrame, hour: number, minute: number) {\r\n    const start = frame.start.hour + frame.start.minute / 60;\r\n    const end = frame.end.hour + frame.end.minute / 60;\r\n    const value = hour + minute / 60;\r\n    return start <= value && end > value;\r\n}\r\n","import React from 'react';\r\n\r\ninterface KFillerProps {\r\n    className?: string;\r\n}\r\n\r\nconst KFiller: React.FunctionComponent<KFillerProps> = (props) => {\r\n    const style: React.CSSProperties = {\r\n        boxSizing: 'content-box'\r\n    }\r\n    return (\r\n        <div style={style} {...props}/>\r\n    )\r\n}\r\n\r\n\r\nexport default KFiller;\r\n","import React from 'react';\r\nimport {Appointment} from 'src/app/api/appointments';\r\nimport {Employee} from 'src/app/api/employees';\r\nimport CreateAppointmentButtons from 'src/app/modules/admin/appointments/employee-panel/create-appointment-buttons';\r\nimport {useSelectPanelEmployees} from 'src/app/modules/admin/appointments/employee-panel/hooks';\r\nimport {KFlexColumn, KFlexRow} from 'src/app/shared/components/flex';\r\nimport AvatarImg from 'src/app/shared/components/primitives/avatar-img';\r\nimport KFiller from 'src/app/shared/components/primitives/k-filler';\r\nimport {useAppSelector} from 'src/app/store';\r\nimport {adminDashboardSelectors} from 'src/app/store/admin/dashboard';\r\nimport styles from './employee-panel.module.scss';\r\n\r\ninterface EmployeePanelHeaderProps {\r\n    employee: Employee;\r\n    onCreateClick: (entity: Appointment | null) => () => void;\r\n}\r\n\r\nconst EmployeePanelHeader: React.FunctionComponent<EmployeePanelHeaderProps> = (\r\n    {\r\n        employee,\r\n        onCreateClick\r\n    }) => {\r\n    const currentDate = useAppSelector(adminDashboardSelectors.selectCurrentDate);\r\n\r\n    return (\r\n        <KFlexColumn className={`${styles.panelItem} py-3`} align={'center'} justify={'center'}>\r\n            {employee.name}\r\n            <AvatarImg className=\"m-1\" size={4} key={employee.id} src={employee.photoUrl}/>\r\n            <KFlexRow>\r\n                <CreateAppointmentButtons employee={employee}\r\n                                          currentDate={currentDate}\r\n                                          onCreateClick={onCreateClick}\r\n                                          hour={0}\r\n                                          minute={0}/>\r\n            </KFlexRow>\r\n        </KFlexColumn>\r\n    )\r\n}\r\n\r\ninterface EmployeePanelHeadersContainerProps {\r\n    onCreateClick: (entity: Appointment | null) => () => void;\r\n}\r\n\r\nexport const EmployeePanelHeadersContainer: React.FunctionComponent<EmployeePanelHeadersContainerProps> = (\r\n    {\r\n        onCreateClick\r\n    }) => {\r\n    const employees = useSelectPanelEmployees();\r\n\r\n    return (\r\n        <KFlexRow>\r\n            <KFiller className={`sticky-top-left bg-white-gray ${styles.borderRight}`}>\r\n                <div className={styles.sideItem}/>\r\n            </KFiller>\r\n            {employees.map(employee =>\r\n                <EmployeePanelHeader key={employee.id} employee={employee} onCreateClick={onCreateClick}/>\r\n            )}\r\n        </KFlexRow>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {Appointment} from 'src/app/api/appointments';\r\nimport SchedulingDateSelector from 'src/app/modules/admin/appointments/date-selector/scheduling-date-selector';\r\nimport TimeLineContainer from 'src/app/modules/admin/appointments/employee-panel/TimeLineContainer';\r\nimport AppointmentUpsertForm from 'src/app/modules/admin/appointments/forms/appointment-upsert-form';\r\nimport SchedulingPanelsSelector from 'src/app/modules/admin/appointments/scheduling-panels/scheduling-panels-selector';\r\nimport {useEditModal, useInitializeEffect} from 'src/app/shared/admin/hooks';\r\nimport {KFlexColumn} from 'src/app/shared/components/flex';\r\nimport {appointmentActions, appointmentSelectors} from 'src/app/store/admin/appointments';\r\nimport {employeeActions} from 'src/app/store/admin/employees';\r\nimport {scheduleActions} from 'src/app/store/admin/schedules';\r\nimport {\r\n    EmployeePanelHeadersContainer,\r\n    EmployeePanelsBodyContainer,\r\n    useReloadAppointmentsEffect\r\n} from './employee-panel';\r\n\r\n\r\nconst AppointmentsContainer: React.FunctionComponent = () => {\r\n    useInitializeEffect(employeeActions);\r\n    useInitializeEffect(scheduleActions);\r\n    useReloadAppointmentsEffect();\r\n    const [openModal, formModal] = useEditModal<Appointment>(appointmentSelectors, appointmentActions, AppointmentUpsertForm);\r\n\r\n    return (\r\n        <KFlexColumn>\r\n            {formModal}\r\n            <KFlexColumn className=\"sticky-top bg-white-gray\">\r\n                <SchedulingPanelsSelector/>\r\n                <SchedulingDateSelector/>\r\n                <EmployeePanelHeadersContainer onCreateClick={openModal}/>\r\n            </KFlexColumn>\r\n            <TimeLineContainer/>\r\n            <EmployeePanelsBodyContainer onSelect={openModal}/>\r\n        </KFlexColumn>\r\n    )\r\n}\r\n\r\n\r\nexport default AppointmentsContainer;\r\n","import React from 'react';\r\n\r\nexport const KDefaultColumnFilter: React.FunctionComponent = () => {\r\n    return (\r\n        <></>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {ColumnInstance, Row, TablePropGetter, TableProps} from 'react-table';\r\n\r\ninterface KTableBodyProps<D extends object> {\r\n    getTableBodyProps: (propGetter?: TablePropGetter<D>) => TableProps;\r\n    rows: Array<Row<D>>;\r\n    prepareRow: (row: Row<D>) => void;\r\n    visibleColumns: Array<ColumnInstance<D>>;\r\n    renderRowSubComponent?: (row: Row<D>) => React.ReactNode;\r\n}\r\n\r\nfunction KTableBody<D extends object>(\r\n    {\r\n        getTableBodyProps,\r\n        rows,\r\n        prepareRow,\r\n        visibleColumns,\r\n        renderRowSubComponent\r\n    }: KTableBodyProps<D>) {\r\n    return (\r\n        <tbody {...getTableBodyProps()}>\r\n        {rows.map((row, i) => {\r\n            prepareRow(row)\r\n            return (\r\n                <React.Fragment key={i}>\r\n                    <tr {\r\n                            // @ts-ignore\r\n                            ...renderRowSubComponent ? row.getToggleRowExpandedProps() : row.getRowProps()\r\n                        }>\r\n                        {row.cells.map(cell =>\r\n                            <td style={{verticalAlign: 'middle'}} {...cell.getCellProps()}>\r\n                                {cell.render('Cell')}\r\n                            </td>\r\n                        )}\r\n                    </tr>\r\n                    {renderRowSubComponent &&\r\n                    // @ts-ignore\r\n                    row.isExpanded ? (\r\n                        <tr {...row.getRowProps()}>\r\n                            <td colSpan={visibleColumns.length}>\r\n                                {renderRowSubComponent(row)}\r\n                            </td>\r\n                        </tr>\r\n                    ) : null\r\n                    }\r\n                </React.Fragment>\r\n            )\r\n        })}\r\n        </tbody>\r\n    )\r\n}\r\n\r\n\r\nexport default KTableBody;\r\n","import React from 'react';\r\nimport {HeaderGroup} from 'react-table';\r\n\r\ninterface KTableHeaderProps<D extends object> {\r\n    headerGroups: Array<HeaderGroup<D>>;\r\n}\r\n\r\nfunction KTableHeader<D extends object>({headerGroups}: KTableHeaderProps<D>) {\r\n    return (\r\n        <thead>\r\n        {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                    <th {...column.getHeaderProps()}>\r\n                        {column.render('Header')}\r\n                        {/* Render the columns filter UI */}\r\n                        <div>\r\n                            {\r\n                                // @ts-ignore\r\n                                column.canFilter ? column.render('Filter') : null\r\n                            }\r\n                        </div>\r\n                    </th>\r\n                ))}\r\n            </tr>\r\n        ))}\r\n        </thead>\r\n    )\r\n}\r\n\r\n\r\nexport default KTableHeader;\r\n","import React from 'react';\r\nimport {Column, Row, useExpanded, useFilters, useTable} from 'react-table';\r\nimport {Table} from 'reactstrap';\r\nimport {KDefaultColumnFilter} from 'src/app/shared/components/tables/k-default-column-filter';\r\nimport KTableBody from 'src/app/shared/components/tables/k-table-body';\r\nimport KTableHeader from 'src/app/shared/components/tables/k-table-header';\r\nimport style from './k-table.module.scss';\r\n\r\ninterface KTableProps<D extends object> {\r\n    columns: Array<Column<D>>\r\n    data: D[]\r\n    renderRowSubComponent?: (row: Row<D>) => React.ReactNode\r\n    hover?: boolean;\r\n    stripped?: boolean;\r\n    extraPrepare?: (row: Row<D>) => void;\r\n}\r\n\r\nfunction KTable<D extends object>(\r\n    {\r\n        columns,\r\n        data,\r\n        renderRowSubComponent,\r\n        hover = false,\r\n        stripped = false,\r\n        extraPrepare,\r\n    }: KTableProps<D>) {\r\n    const filterTypes = React.useMemo(\r\n        () => ({\r\n            text: (rows: any[], id: number, filterValue: string) => {\r\n                return rows.filter(row => {\r\n                    const rowValue = row.values[id]\r\n                    return rowValue !== undefined\r\n                        ? String(rowValue)\r\n                            .toLowerCase()\r\n                            .startsWith(filterValue.toLowerCase())\r\n                        : true\r\n                })\r\n            },\r\n        }),\r\n        []\r\n    )\r\n    const defaultColumn = React.useMemo(() => ({Filter: KDefaultColumnFilter,}), [])\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        visibleColumns,\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            // @ts-ignore\r\n            defaultColumn,\r\n            filterTypes,\r\n            autoResetFilters: false\r\n        },\r\n        useFilters,\r\n        useExpanded,\r\n    )\r\n\r\n    const customPrepareRow = (row: Row<D>) => {\r\n        prepareRow(row);\r\n        extraPrepare && extraPrepare(row);\r\n    }\r\n\r\n\r\n    return (\r\n        <Table className={style.fixedHeaders} hover={hover} striped={stripped} {...getTableProps()}>\r\n            <KTableHeader headerGroups={headerGroups}\r\n            />\r\n            <KTableBody getTableBodyProps={getTableBodyProps}\r\n                        rows={rows}\r\n                        prepareRow={customPrepareRow}\r\n                        visibleColumns={visibleColumns}\r\n                        renderRowSubComponent={renderRowSubComponent}\r\n            />\r\n        </Table>\r\n    )\r\n}\r\n\r\n\r\nexport default KTable;\r\n","import React from 'react';\r\nimport {KInput} from '../primitives/inputs';\r\n\r\ninterface KTextColumnFilterProps {\r\n    column: {\r\n        filterValue: string;\r\n        setFilter: (value: string | undefined) => void;\r\n        Header: string\r\n    },\r\n    onChangeSideEffect?: (value: string) => void;\r\n}\r\n\r\nconst KTextColumnFilter: React.FunctionComponent<KTextColumnFilterProps> = (\r\n    {\r\n        column: {filterValue, Header, setFilter},\r\n        onChangeSideEffect\r\n    }) => {\r\n    const onChange = (value: string) => {\r\n        setFilter(value || undefined)\r\n        if (onChangeSideEffect) onChangeSideEffect(value)\r\n    }\r\n    return (\r\n        <KInput\r\n            value={filterValue || ''}\r\n            onChange={e => {\r\n                onChange(e.target.value)\r\n            }}\r\n            placeholder={`Search ${Header}`}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport default KTextColumnFilter;\r\n","import {Customer} from 'src/app/api/customers';\r\nimport React, {useMemo} from 'react';\r\nimport {AdminTableContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport KTable from 'src/app/shared/components/tables/k-table';\r\nimport KTextColumnFilter from 'src/app/shared/components/tables/k-text-column-filter';\r\n\r\nconst CustomersTable: React.FunctionComponent<AdminTableContainerProps<Customer>> = (\r\n    {\r\n        entities,\r\n        buttonsColumn,\r\n        filter,\r\n    }) => {\r\n    const columns =\r\n        useMemo(() => [\r\n            {\r\n                Header: 'Name',\r\n                accessor: 'name',\r\n                Filter: (cell: any) => <KTextColumnFilter {...cell} onChangeSideEffect={filter}/>\r\n            },\r\n            {\r\n                Header: 'Email',\r\n                accessor: 'email',\r\n            },\r\n            {\r\n                Header: 'Phone',\r\n                accessor: 'phone',\r\n            },\r\n            buttonsColumn\r\n        ], [buttonsColumn, filter])\r\n\r\n    return (\r\n        <KTable columns={columns}\r\n                data={entities}\r\n                extraPrepare={(row) => {\r\n                    row.getRowProps = () => ({key: row.original.id, className: row.original.warning ? 'bg-danger' : ''});\r\n                }}/>\r\n    )\r\n}\r\n\r\n\r\nexport default CustomersTable;\r\n","import React, {useEffect} from 'react';\r\nimport {PermissionModel, PermissionType} from 'src/app/api/auth';\r\nimport {IReadModel} from 'src/app/api/common/models';\r\nimport DeleteButton from 'src/app/shared/admin/delete-button';\r\nimport {useEditModal} from 'src/app/shared/admin/hooks';\r\nimport {AdminEditContainerProps, AdminTableContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport {useAppDispatch, useAppSelector} from 'src/app/store';\r\nimport {BaseActions, BaseSelectors} from 'src/app/store/admin/common/adapter';\r\nimport {KFlexRow} from '../components/flex';\r\nimport AdminButton from './admin-button';\r\n\r\ninterface AdminListEditContainerProps<TEntity> {\r\n    baseSelectors: BaseSelectors<TEntity>;\r\n    baseActions: BaseActions;\r\n    modelType: PermissionModel;\r\n    filter?: (value: string | undefined) => void;\r\n    EditContainer: React.FunctionComponent<AdminEditContainerProps<TEntity>>;\r\n    ListContainer: React.FunctionComponent<AdminTableContainerProps<TEntity>>;\r\n}\r\n\r\nfunction AdminListEditContainer<TEntity extends IReadModel>(\r\n    {\r\n        baseSelectors,\r\n        baseActions,\r\n        filter,\r\n        modelType,\r\n        EditContainer,\r\n        ListContainer\r\n    }: AdminListEditContainerProps<TEntity>) {\r\n    const dispatch = useAppDispatch();\r\n    const entities = useAppSelector(baseSelectors.selectAll)\r\n    const [openModal, formModal] = useEditModal(baseSelectors, baseActions, EditContainer);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(baseActions.initializeStore())\r\n    }, [baseActions, dispatch]);\r\n\r\n\r\n    const buttons = (entity: TEntity) =>\r\n        <KFlexRow align=\"end\" justify=\"end\">\r\n            <AdminButton type={PermissionType.change}\r\n                         model={modelType}\r\n                         onClick={openModal(entity)}/>\r\n            <DeleteButton entity={entity}\r\n                          modelType={modelType}\r\n                          baseActions={baseActions}/>\r\n        </KFlexRow>\r\n\r\n    const buttonsColumn = {\r\n        Header: () =>\r\n            <KFlexRow justify={'end'}>\r\n                <AdminButton type={PermissionType.add}\r\n                             model={modelType}\r\n                             onClick={openModal(null)}/>\r\n            </KFlexRow>,\r\n        id: 'buttons',\r\n        Cell: (value: any) => buttons(value.row.original)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {formModal}\r\n            <ListContainer entities={entities}\r\n                           filter={filter}\r\n                           buttonsColumn={buttonsColumn}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AdminListEditContainer;\r\n","import React from 'react';\r\nimport {PermissionModel} from 'src/app/api/auth';\r\nimport CustomerUpsertForm from 'src/app/modules/admin/customers/customer-upsert-form';\r\nimport CustomersTable from 'src/app/modules/admin/customers/customers-table';\r\nimport AdminListEditContainer from 'src/app/shared/admin/admin-list-edit-container';\r\nimport {useAppDispatch} from 'src/app/store';\r\nimport {customerActions, customerSelectors} from 'src/app/store/admin/customers';\r\n\r\n\r\nconst CustomersContainer: React.FunctionComponent = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const filter = (value: string | undefined) => {\r\n        dispatch(customerActions.fetchEntities({search: value}));\r\n    }\r\n\r\n    return (\r\n            <AdminListEditContainer baseSelectors={customerSelectors}\r\n                                    baseActions={customerActions}\r\n                                    filter={filter}\r\n                                    modelType={PermissionModel.customer}\r\n                                    EditContainer={CustomerUpsertForm}\r\n                                    ListContainer={CustomersTable}/>\r\n    )\r\n}\r\n\r\n\r\nexport default CustomersContainer;\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {Employee, upsertEmployeeRequestParser, UpsertEmployeeRequestValidation} from 'src/app/api/employees';\r\nimport {AdminEditContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport {KFlexColumn, KFlexRow} from 'src/app/shared/components/flex';\r\nimport {KFormikForm, KFormikInput} from 'src/app/shared/components/forms';\r\nimport AvatarImg from 'src/app/shared/components/primitives/avatar-img';\r\nimport {useAppDispatch} from 'src/app/store';\r\nimport {scheduleActions, scheduleSelectors} from 'src/app/store/admin/schedules';\r\nimport {serviceCategoryActions} from 'src/app/store/admin/serviceCategories';\r\nimport {serviceActions, serviceSelectors} from 'src/app/store/admin/services';\r\n\r\nconst EmployeeUpsertForm: React.FunctionComponent<AdminEditContainerProps<Employee>> = (\r\n    {\r\n        entity,\r\n        apiError,\r\n        onSubmit,\r\n        onCancel\r\n    }) => {\r\n    const schedules = useSelector(scheduleSelectors.selectAll)\r\n    const services = useSelector(serviceSelectors.selectServicesWithCategories)\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(scheduleActions.initializeStore());\r\n        dispatch(serviceActions.initializeStore());\r\n        dispatch(serviceCategoryActions.initializeStore());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <KFormikForm initialValues={upsertEmployeeRequestParser(entity)}\r\n                     apiError={apiError}\r\n                     onSubmit={onSubmit}\r\n                     onCancel={onCancel}\r\n                     validationSchema={UpsertEmployeeRequestValidation}\r\n        >\r\n            {entity?.photoUrl &&\r\n            <KFlexRow className=\"mb-2\" justify={'between'} align={'center'}>\r\n                <KFlexRow className=\"flex-fill mr-2\" justify={'center'} align={'center'}>\r\n                    <AvatarImg size={5} src={entity.photoUrl}/>\r\n                </KFlexRow>\r\n                <KFlexColumn>\r\n                    <KFormikInput name=\"firstName\"/>\r\n                    <KFormikInput name=\"lastName\"/>\r\n                </KFlexColumn>\r\n            </KFlexRow>\r\n            }\r\n            <KFormikInput name=\"email\"/>\r\n            <KFormikInput name=\"phone\"/>\r\n            <KFormikInput name=\"instagram\"/>\r\n            <KFormikInput name=\"schedule\" as={'select'} options={schedules}/>\r\n            <KFormikInput name=\"services\" as={'multi-select'} options={services}/>\r\n        </KFormikForm>\r\n    )\r\n}\r\n\r\n\r\nexport default EmployeeUpsertForm;\r\n","import React, {useEffect} from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {KCard, KTreeView} from 'src/app/shared/components/primitives/containers';\r\nimport {useAppDispatch, useAppSelector} from 'src/app/store';\r\nimport {serviceCategoryActions} from 'src/app/store/admin/serviceCategories';\r\nimport {serviceActions, serviceSelectors} from 'src/app/store/admin/services';\r\n\r\ninterface ServicesCardProps {\r\n    serviceIds: number[];\r\n}\r\n\r\nconst ServicesCard: React.FunctionComponent<ServicesCardProps> = (\r\n    {\r\n        serviceIds\r\n    }) => {\r\n    const dispatch = useAppDispatch();\r\n    const categories = useAppSelector((state: any) =>\r\n        serviceSelectors.selectServicesWithCategoriesByIds(state, serviceIds))\r\n\r\n    useEffect(() => {\r\n        dispatch(serviceActions.initializeStore())\r\n        dispatch(serviceCategoryActions.initializeStore())\r\n    }, [dispatch]);\r\n\r\n\r\n    return (\r\n        <KCard\r\n            header={<FormattedMessage id=\"ADMIN.COMMON.SERVICES\"/>}\r\n            maxWidth={500}\r\n            maxHeight={30}\r\n            mhUnit={'vh'}\r\n            hasShadow={false}\r\n        >\r\n            <KTreeView\r\n                items={categories}\r\n                renderComponent={(props => <>{props.name}</>)}\r\n            />\r\n        </KCard>\r\n    )\r\n}\r\n\r\n\r\nexport default ServicesCard;\r\n","import React from 'react';\r\nimport {Employee} from 'src/app/api/employees';\r\nimport ServicesCard from 'src/app/modules/admin/employees/services-card';\r\nimport {KFlexRow} from 'src/app/shared/components/flex';\r\n\r\ninterface EmployeeRowExpandedProps {\r\n    employee: Employee;\r\n}\r\n\r\nconst EmployeeRowExpanded: React.FunctionComponent<EmployeeRowExpandedProps> = (\r\n    {\r\n        employee\r\n    }) => {\r\n    return (\r\n        <KFlexRow>\r\n            <ServicesCard serviceIds={employee.services}/>\r\n        </KFlexRow>\r\n    )\r\n}\r\n\r\n\r\nexport default EmployeeRowExpanded;\r\n","import React, {useState} from 'react';\r\nimport ImageUploader from 'react-images-upload';\r\nimport {KFlexColumn, KFlexRow} from 'src/app/shared/components/flex';\r\nimport KModal from 'src/app/shared/components/modal/k-modal';\r\nimport AvatarImg from 'src/app/shared/components/primitives/avatar-img';\r\nimport {KButton} from 'src/app/shared/components/primitives/buttons';\r\nimport styles from './editable-avatar-img.module.scss';\r\n\r\ninterface EditableAvatarImgProps {\r\n    src: string;\r\n    size: number;\r\n    onSubmit: (file: File) => Promise<boolean>;\r\n}\r\n\r\nconst EditableAvatarImg: React.FunctionComponent<EditableAvatarImgProps> = (\r\n    {\r\n        src,\r\n        size,\r\n        onSubmit\r\n    }) => {\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [file, setFile] = useState<File | null>(null);\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const avatarStyle: React.CSSProperties = {\r\n        width: `${size}rem`,\r\n        height: `${size}rem`,\r\n    }\r\n\r\n    const handleFileChange = (files: File[], pictures: string[]) => files.length > 0 && setFile(files[0])\r\n    const handleCancel = () => setModalOpen(false);\r\n    const handleSubmit = () => file && onSubmit(file).then(res => {\r\n        if (!res) setError('server error try again later');\r\n        setModalOpen(!res)\r\n    })\r\n\r\n\r\n    const imageUploader =\r\n        <ImageUploader\r\n            withIcon={true}\r\n            singleImage={true}\r\n            withPreview={true}\r\n            buttonText='Choose images'\r\n            onChange={handleFileChange}\r\n            imgExtension={['.jpg', 'jpeg', '.png']}\r\n            maxFileSize={5242880}\r\n        />\r\n\r\n    const modalBody =\r\n        <>\r\n            {imageUploader}\r\n            {error &&\r\n            <div className=\"c-danger\">\r\n                {error}\r\n            </div>\r\n            }\r\n            <KFlexRow className=\"w-100\" justify={'end'}>\r\n                <KButton onClick={handleSubmit} color=\"primary\" className=\"mr-2\">Submit</KButton>\r\n                <KButton onClick={handleCancel} color=\"danger\">Cancel</KButton>\r\n            </KFlexRow>\r\n        </>\r\n\r\n    const modal = <KModal body={modalBody} isOpen={modalOpen}/>\r\n\r\n    return (\r\n        <KFlexColumn className=\"position-relative\" justify={'center'}>\r\n            {modal}\r\n            <AvatarImg src={src} size={size}/>\r\n            <KButton type=\"button\"\r\n                     onClick={() => setModalOpen(true)}\r\n                     style={avatarStyle}\r\n                     className={`${styles.btnOverlay} round-image`}>\r\n                    edit\r\n            </KButton>\r\n        </KFlexColumn>\r\n    )\r\n}\r\n\r\nexport default EditableAvatarImg;\r\n","import React, {useMemo} from 'react';\r\nimport {adminEmployeeClient, Employee} from 'src/app/api/employees';\r\nimport EmployeeRowExpanded from 'src/app/modules/admin/employees/employee-row-expanded';\r\nimport {AdminTableContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport EditableAvatarImg from 'src/app/shared/components/primitives/containers/editable-avatar-img';\r\nimport KIcon from 'src/app/shared/components/primitives/k-icon';\r\nimport KTable from 'src/app/shared/components/tables/k-table';\r\nimport KTextColumnFilter from 'src/app/shared/components/tables/k-text-column-filter';\r\nimport {useAppDispatch} from 'src/app/store';\r\nimport {employeeReducerActions} from 'src/app/store/admin/employees';\r\n\r\n\r\nconst EmployeesTable: React.FunctionComponent<AdminTableContainerProps<Employee>> = (\r\n    {\r\n        entities,\r\n        buttonsColumn,\r\n        filter,\r\n    }) => {\r\n    const dispatch = useAppDispatch();\r\n\r\n\r\n    const columns = useMemo(() => {\r\n        const handleFileSubmit = (entity: Employee, file: File) =>\r\n            adminEmployeeClient.uploadProfilePicture(entity.id, file)\r\n                .then(res => {\r\n                    dispatch(employeeReducerActions.upsertOne({...entity, photoUrl: res.url}));\r\n                    return true;\r\n                })\r\n                .catch(error => false);\r\n\r\n        return [\r\n            {\r\n                // Make an expander cell\r\n                Header: () => null, // No header\r\n                id: 'expander', // It needs an ID\r\n                Cell: (value: any) => (\r\n                    <span>\r\n                    {value.row.isExpanded ? <KIcon icon=\"caret-down\"/> : <KIcon icon=\"caret-right\"/>}\r\n                </span>\r\n                ),\r\n            },\r\n            {\r\n                Header: 'Photo',\r\n                accessor: 'photoUrl',\r\n                Cell: (value: any) => <EditableAvatarImg src={value.cell.value}\r\n                                                         onSubmit={(file) => handleFileSubmit(value.row.original, file)}\r\n                                                         size={3}/>\r\n            },\r\n            {\r\n                Header: 'Name',\r\n                accessor: 'name',\r\n                Filter: KTextColumnFilter\r\n            },\r\n            {\r\n                Header: 'Email',\r\n                accessor: 'email',\r\n                Filter: KTextColumnFilter\r\n            },\r\n            {\r\n                Header: 'Phone',\r\n                accessor: 'phone',\r\n                Filter: KTextColumnFilter\r\n            },\r\n            {\r\n                Header: 'Instagram',\r\n                accessor: 'instagram',\r\n            },\r\n            buttonsColumn\r\n        ]\r\n    }, [buttonsColumn, dispatch])\r\n\r\n\r\n    const renderRowSubComponent = React.useCallback(\r\n        (row: any) => <EmployeeRowExpanded employee={row.original}/>, [])\r\n\r\n    return (\r\n        <KTable columns={columns}\r\n                data={entities}\r\n                renderRowSubComponent={renderRowSubComponent}\r\n                hover={true}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport default EmployeesTable;\r\n","import React from 'react';\r\nimport {PermissionModel} from 'src/app/api/auth';\r\nimport EmployeeUpsertForm from 'src/app/modules/admin/employees/employee-upsert-form';\r\nimport EmployeesTable from 'src/app/modules/admin/employees/employees-table';\r\nimport AdminListEditContainer from 'src/app/shared/admin/admin-list-edit-container';\r\nimport {employeeActions, employeeSelectors} from 'src/app/store/admin/employees';\r\n\r\n\r\nconst EmployeesContainer: React.FunctionComponent = () => {\r\n    return (\r\n        <AdminListEditContainer baseSelectors={employeeSelectors}\r\n                                baseActions={employeeActions}\r\n                                modelType={PermissionModel.employee}\r\n                                EditContainer={EmployeeUpsertForm}\r\n                                ListContainer={EmployeesTable}/>\r\n    )\r\n}\r\n\r\n\r\nexport default EmployeesContainer;\r\n","import React, {useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {\r\n    PermissionGroup,\r\n    upsertPermissionGroupRequestParser,\r\n    UpsertPermissionRequestValidation\r\n} from 'src/app/api/permissions';\r\nimport {AdminEditContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport {KFormikForm, KFormikInput} from 'src/app/shared/components/forms';\r\nimport {useAppDispatch} from 'src/app/store';\r\nimport {permissionsActions, permissionSelectors} from 'src/app/store/admin/permissions';\r\n\r\n\r\nconst PermissionGroupUpsertForm: React.FunctionComponent<AdminEditContainerProps<PermissionGroup>> = (\r\n    {\r\n        entity,\r\n        apiError,\r\n        onSubmit,\r\n        onCancel\r\n    }) => {\r\n    const dispatch = useAppDispatch();\r\n    const permissions = useSelector(permissionSelectors.selectAll)\r\n\r\n    useEffect(() => {\r\n        dispatch(permissionsActions.initializeStore());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <KFormikForm initialValues={upsertPermissionGroupRequestParser(entity)}\r\n                     apiError={apiError}\r\n                     onSubmit={onSubmit}\r\n                     onCancel={onCancel}\r\n                     validationSchema={UpsertPermissionRequestValidation}\r\n        >\r\n            <KFormikInput name=\"name\"/>\r\n            <KFormikInput name=\"permissions\" as={'multi-select'} options={permissions}/>\r\n        </KFormikForm>\r\n    )\r\n}\r\n\r\n\r\nexport default PermissionGroupUpsertForm;\r\n","import {PermissionGroup} from 'src/app/api/permissions';\r\nimport React, {useMemo} from 'react';\r\nimport {AdminTableContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport KTable from 'src/app/shared/components/tables/k-table';\r\nimport KTextColumnFilter from 'src/app/shared/components/tables/k-text-column-filter';\r\n\r\nconst PermissionGroupsTable: React.FunctionComponent<AdminTableContainerProps<PermissionGroup>> = (\r\n    {\r\n        entities,\r\n        buttonsColumn,\r\n        filter,\r\n    }) => {\r\n    const columns =\r\n        useMemo(() => [\r\n            {\r\n                Header: 'Name',\r\n                accessor: 'name',\r\n                Filter: (cell: any) => <KTextColumnFilter {...cell} onChangeSideEffect={filter}/>\r\n            },\r\n            buttonsColumn\r\n        ], [buttonsColumn, filter])\r\n\r\n    return (\r\n        <KTable columns={columns} data={entities}/>\r\n    )\r\n}\r\n\r\n\r\nexport default PermissionGroupsTable;\r\n","import React from 'react';\r\nimport {PermissionModel} from 'src/app/api/auth';\r\nimport PermissionGroupUpsertForm from 'src/app/modules/admin/permissionGroups/permission-group-upsert-form';\r\nimport PermissionGroupsTable from 'src/app/modules/admin/permissionGroups/permission-groups-table';\r\nimport AdminListEditContainer from 'src/app/shared/admin/admin-list-edit-container';\r\nimport {permissionGroupActions, permissionGroupSelectors} from 'src/app/store/admin/permissionGroups';\r\n\r\n\r\nconst PermissionGroupsContainer: React.FunctionComponent = () => {\r\n    return (\r\n            <AdminListEditContainer baseSelectors={permissionGroupSelectors}\r\n                                    baseActions={permissionGroupActions}\r\n                                    modelType={PermissionModel.groupprofile}\r\n                                    EditContainer={PermissionGroupUpsertForm}\r\n                                    ListContainer={PermissionGroupsTable}/>\r\n    )\r\n}\r\n\r\n\r\nexport default PermissionGroupsContainer;\r\n\r\n\r\n","import React from 'react';\r\nimport {Shift} from 'src/app/api/shifts';\r\nimport {KFlexColumn} from 'src/app/shared/components/flex';\r\n\r\ninterface ShiftCellProps {\r\n    shift: Shift;\r\n}\r\n\r\nconst ShiftCell: React.FunctionComponent<ShiftCellProps> = (\r\n    {\r\n        shift\r\n    }) => {\r\n    return (\r\n        <KFlexColumn>\r\n            {shift.frames.map((frame, key) => <div key={key}>{frame.name}</div>)}\r\n        </KFlexColumn>\r\n    )\r\n}\r\n\r\n\r\nexport default ShiftCell;\r\n","import {Schedule} from 'src/app/api/schedule';\r\nimport React, {useMemo} from 'react';\r\nimport {AdminTableContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport KTable from 'src/app/shared/components/tables/k-table';\r\nimport KTextColumnFilter from 'src/app/shared/components/tables/k-text-column-filter';\r\nimport ShiftCell from './shift-cell';\r\n\r\nconst SchedulesTable: React.FunctionComponent<AdminTableContainerProps<Schedule>> = (\r\n    {\r\n        entities,\r\n        buttonsColumn,\r\n    }) => {\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Name',\r\n                accessor: 'name',\r\n                Filter: KTextColumnFilter\r\n            },\r\n            ...['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'].map(day => (\r\n                {\r\n                    Header: day.toUpperCase(),\r\n                    accessor: day,\r\n                    Cell: (value: any) => <ShiftCell shift={value.cell.value}/>\r\n                }\r\n            )),\r\n            buttonsColumn\r\n        ],\r\n        [buttonsColumn]\r\n    )\r\n\r\n    return (\r\n        <KTable columns={columns} data={entities}/>\r\n    )\r\n}\r\n\r\n\r\nexport default SchedulesTable;\r\n","import {useFormikContext} from 'formik';\r\nimport React, {useState} from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {timeFromString, timeToString} from 'src/app/api/common/models';\r\nimport {UpsertScheduleRequestFrame} from 'src/app/api/schedule/requests';\r\nimport {KFlexColumn} from 'src/app/shared/components/flex';\r\nimport {KFormikInput} from 'src/app/shared/components/forms';\r\nimport KModal from 'src/app/shared/components/modal/k-modal';\r\nimport {KIconButton} from 'src/app/shared/components/primitives/buttons';\r\nimport KShowOnHoverContainer from 'src/app/shared/components/primitives/containers/k-show-on-hover-container';\r\nimport styles from './schedule-formik-input.module.scss';\r\n\r\ninterface ScheduleFrameProps {\r\n    frame: UpsertScheduleRequestFrame;\r\n    onClick: () => void;\r\n}\r\n\r\nconst ScheduleFrame: React.FunctionComponent<ScheduleFrameProps> = (\r\n    {\r\n        frame,\r\n        onClick\r\n    }) => {\r\n    const [start, end] = [timeFromString(frame.start), timeFromString(frame.end)];\r\n    const top = +(start.hour + 1 + start.minute / 60) * 3\r\n    const height = ((end.hour + end.minute / 60) - (start.hour + start.minute / 60)) * 3\r\n\r\n    return (\r\n        <div className={`${styles.frameBox} bg-accent c-pointer`}\r\n             onClick={onClick}\r\n             style={{\r\n                 top: `${top}rem`,\r\n                 height: `${height}rem`\r\n             }}/>\r\n    )\r\n}\r\n\r\ninterface ScheduleFormikInputProps {\r\n    name: string;\r\n\r\n}\r\n\r\nconst ScheduleFormikInput: React.FunctionComponent<ScheduleFormikInputProps> = (\r\n    {\r\n        name\r\n    }) => {\r\n    const formik = useFormikContext();\r\n    const accessor = `${name}.frames`;\r\n    const formikValues = formik.getFieldProps<UpsertScheduleRequestFrame[]>(accessor);\r\n    const formikHelpers = formik.getFieldHelpers(accessor);\r\n    const [selectedIndex, setSelectedIndex] = useState<number | null>(null);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    const isMonday = name === 'mon';\r\n    const hours = Array.from(Array(24).keys());\r\n    const className = `${styles.lineCell} ${isMonday ? '' : styles.borderLeft}`;\r\n\r\n    const handleAddClick = (hour: number) => () => {\r\n        const newFrame = {start: timeToString({hour, minute: 0}), end: timeToString({hour: hour + 1, minute: 0})};\r\n        const values = [...formikValues.value, newFrame];\r\n        formikHelpers.setValue(values);\r\n        setSelectedIndex(values.length - 1);\r\n        setIsModalOpen(true);\r\n    }\r\n\r\n    const handleFrameClick = (index: number) => () => {\r\n        setSelectedIndex(index);\r\n        setIsModalOpen(true);\r\n    }\r\n\r\n    const handleModalCancel = () => {\r\n        setIsModalOpen(false);\r\n        setSelectedIndex(null);\r\n    }\r\n\r\n    const handleModalDelete = () => {\r\n        const toDelete = selectedIndex!;\r\n        setIsModalOpen(false);\r\n        setSelectedIndex(null);\r\n        formikValues.value.splice(toDelete, 1);\r\n    }\r\n\r\n    const hourCell = (hour: number) =>\r\n        <KFlexColumn className=\"position-relative\">\r\n            {isMonday && <div className={styles.hourBox}>{timeToString({hour, minute: 0})}</div>}\r\n            <KShowOnHoverContainer className={className}>\r\n                <KIconButton color=\"primary\" onClick={handleAddClick(hour)} icon=\"plus-square\"/>\r\n            </KShowOnHoverContainer>\r\n        </KFlexColumn>\r\n\r\n    const modal = <KModal header={<FormattedMessage id=\"ADMIN.SCHEDULE.EDIT-FRAME-MODAL\"/>}\r\n                          body={\r\n                              <>\r\n                                  {accessor &&\r\n                                  <>\r\n                                      <KFormikInput placeholder=\"Start\"\r\n                                                    name={`${accessor}[${selectedIndex}].start`}\r\n                                                    type=\"time\"/>\r\n                                      <KFormikInput placeholder=\"End\"\r\n                                                    name={`${accessor}[${selectedIndex}].end`}\r\n                                                    type=\"time\"/>\r\n                                  </>\r\n                                  }\r\n                              </>\r\n                          }\r\n                          onCancel={handleModalCancel}\r\n                          isOpen={isModalOpen}\r\n                          buttons={[\r\n                              {text: 'confirm', onClick: handleModalCancel, color: 'primary'},\r\n                              {text: 'delete', onClick: handleModalDelete, color: 'danger'}\r\n                          ]}\r\n    />\r\n\r\n    return (\r\n        <>\r\n            <KFlexColumn className=\"position-relative\" align={'center'}>\r\n                <div className={className}>{name}</div>\r\n                {formikValues.value.map((frame, i) =>\r\n                    <ScheduleFrame key={i}\r\n                                   frame={frame}\r\n                                   onClick={handleFrameClick(i)}/>\r\n                )}\r\n                {hours.map((hour, i) => hourCell(hour))}\r\n            </KFlexColumn>\r\n            {modal}\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default ScheduleFormikInput;\r\n","import React from 'react';\r\nimport {FormGroup} from 'reactstrap';\r\nimport {Schedule, upsertScheduleRequestParser} from 'src/app/api/schedule';\r\nimport ScheduleFormikInput from 'src/app/modules/admin/schedules/schedule-shift-input/schedule-formik-input';\r\nimport {AdminEditContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport {KFlexRow} from 'src/app/shared/components/flex';\r\nimport {KFormikForm, KFormikInput} from 'src/app/shared/components/forms';\r\n\r\n\r\nconst ScheduleUpsertForm: React.FunctionComponent<AdminEditContainerProps<Schedule>> = (\r\n    {\r\n        entity,\r\n        apiError,\r\n        onSubmit,\r\n        onCancel\r\n    }) => {\r\n    return (\r\n        <KFormikForm initialValues={upsertScheduleRequestParser(entity)}\r\n                     apiError={apiError}\r\n                     onCancel={onCancel}\r\n                     onSubmit={onSubmit}>\r\n            <KFormikInput name=\"name\"/>\r\n            <FormGroup>\r\n                <KFlexRow align={'center'} justify={'center'}>\r\n                    <ScheduleFormikInput name=\"mon\"/>\r\n                    <ScheduleFormikInput name=\"tue\"/>\r\n                    <ScheduleFormikInput name=\"wed\"/>\r\n                    <ScheduleFormikInput name=\"thu\"/>\r\n                    <ScheduleFormikInput name=\"fri\"/>\r\n                    <ScheduleFormikInput name=\"sat\"/>\r\n                    <ScheduleFormikInput name=\"sun\"/>\r\n                </KFlexRow>\r\n            </FormGroup>\r\n        </KFormikForm>\r\n    )\r\n}\r\n\r\n\r\nexport default ScheduleUpsertForm;\r\n","import React from 'react';\r\nimport {PermissionModel} from 'src/app/api/auth';\r\nimport SchedulesTable from 'src/app/modules/admin/schedules/schedules-table';\r\nimport ScheduleUpsertForm from 'src/app/modules/admin/services/schedule-upsert-form';\r\nimport AdminListEditContainer from 'src/app/shared/admin/admin-list-edit-container';\r\nimport {scheduleActions, scheduleSelectors} from 'src/app/store/admin/schedules';\r\n\r\n\r\ninterface SchedulesContainerProps {\r\n}\r\n\r\nconst SchedulesContainer: React.FunctionComponent<SchedulesContainerProps> = () => {\r\n    return (\r\n            <AdminListEditContainer baseSelectors={scheduleSelectors}\r\n                                    baseActions={scheduleActions}\r\n                                    modelType={PermissionModel.schedule}\r\n                                    EditContainer={ScheduleUpsertForm}\r\n                                    ListContainer={SchedulesTable}/>\r\n    )\r\n}\r\n\r\n\r\nexport default SchedulesContainer;\r\n","import React from 'react';\r\nimport {\r\n    createUpsertServiceCategoryRequest,\r\n    ServiceCategory,\r\n    UpsertServiceCategoryRequestValidation\r\n} from 'src/app/api/services';\r\nimport {AdminEditContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport {KFormikForm, KFormikInput} from 'src/app/shared/components/forms';\r\n\r\nconst ServiceCategoryUpsertForm: React.FunctionComponent<AdminEditContainerProps<ServiceCategory>> = (\r\n    {\r\n        entity,\r\n        apiError,\r\n        onSubmit,\r\n        onCancel\r\n    }) => {\r\n    return (\r\n        <KFormikForm initialValues={createUpsertServiceCategoryRequest(entity)}\r\n                     apiError={apiError}\r\n                     onSubmit={onSubmit}\r\n                     onCancel={onCancel}\r\n                     validationSchema={UpsertServiceCategoryRequestValidation}\r\n        >\r\n            <KFormikInput name=\"name\"/>\r\n            <KFormikInput name=\"color\" as=\"color\"/>\r\n        </KFormikForm>\r\n    )\r\n}\r\n\r\n\r\nexport default ServiceCategoryUpsertForm;\r\n","import React from 'react';\r\nimport {PermissionModel, PermissionType} from 'src/app/api/auth';\r\nimport {createUpsertServiceRequest, Service} from 'src/app/api/services';\r\nimport {UpsertServiceRequestValidation} from 'src/app/api/services/requests';\r\nimport AdminButton from 'src/app/shared/admin/admin-button';\r\nimport {useEditModal} from 'src/app/shared/admin/hooks';\r\nimport {AdminEditContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport {KFlexRow} from 'src/app/shared/components/flex';\r\nimport {KFormikForm, KFormikInput} from 'src/app/shared/components/forms';\r\nimport {useAppSelector} from 'src/app/store';\r\nimport {serviceCategoryActions, serviceCategorySelectors} from 'src/app/store/admin/serviceCategories';\r\nimport ServiceCategoryUpsertForm from './service-category-upsert-form';\r\n\r\nconst ServiceUpsertForm: React.FunctionComponent<AdminEditContainerProps<Service>> = (\r\n    {\r\n        entity,\r\n        apiError,\r\n        onSubmit,\r\n        onCancel\r\n    }) => {\r\n    const serviceCategories = useAppSelector(serviceCategorySelectors.selectAll)\r\n    const [openModal, modal] = useEditModal(serviceCategorySelectors, serviceCategoryActions, ServiceCategoryUpsertForm);\r\n\r\n    const serviceCategory = (id: number) => serviceCategories.find(sc => sc.id === id) || null\r\n\r\n    return (\r\n        <KFormikForm initialValues={createUpsertServiceRequest(entity)}\r\n                     apiError={apiError}\r\n                     onSubmit={onSubmit}\r\n                     onCancel={onCancel}\r\n                     validationSchema={UpsertServiceRequestValidation}\r\n        >\r\n            {(formik) =>\r\n                <>\r\n                    {modal}\r\n                    <KFlexRow align={'center'} justify={'center'}>\r\n                        <KFormikInput className=\"flex-fill\" name=\"category\" as={'select'} options={serviceCategories}/>\r\n                        <AdminButton type={PermissionType.change}\r\n                                     model={PermissionModel.servicecategory}\r\n                                     onClick={openModal(serviceCategory(formik.getFieldProps('category').value))}/>\r\n                        <AdminButton type={PermissionType.add}\r\n                                     model={PermissionModel.servicecategory}\r\n                                     onClick={openModal(null)}/>\r\n                    </KFlexRow>\r\n                    <KFormikInput name=\"name\"/>\r\n                    <KFormikInput name=\"duration\" as=\"duration\"/>\r\n                    <KFormikInput name=\"color\" as=\"color\"/>\r\n                    <KFormikInput name=\"description\"/>\r\n                    <KFormikInput name=\"cost\" type=\"number\"/>\r\n                </>\r\n            }\r\n\r\n        </KFormikForm>\r\n    )\r\n}\r\n\r\n\r\nexport default ServiceUpsertForm;\r\n","import React from 'react';\r\n\r\ninterface KColorBoxProps {\r\n    backgroundColor: string;\r\n}\r\n\r\nconst KColorBox: React.FunctionComponent<KColorBoxProps> = (\r\n    {\r\n        backgroundColor\r\n    }) => {\r\n    const style = {\r\n        backgroundColor,\r\n        minHeight: '2em',\r\n        minWidth: '5em',\r\n        borderRadius: '2px',\r\n    }\r\n    return (\r\n        <div style={style}/>\r\n    )\r\n}\r\n\r\n\r\nexport default KColorBox;\r\n","import React from 'react';\r\nimport {KInput} from 'src/app/shared/components/primitives/inputs';\r\n\r\ninterface FilterOption {\r\n    id: number | string;\r\n    name: string | number;\r\n}\r\n\r\ninterface KSelectColumnFilterProps {\r\n    column: {\r\n        filterValue: string;\r\n        setFilter: (value: string | undefined) => void;\r\n        preFilteredRows: any[];\r\n        id: any;\r\n    },\r\n    options?: FilterOption[];\r\n}\r\n\r\nexport const KSelectColumnFilter: React.FunctionComponent<KSelectColumnFilterProps> = (\r\n    {\r\n        column: {\r\n            filterValue,\r\n            setFilter,\r\n            preFilteredRows,\r\n            id\r\n        },\r\n        options\r\n    }) => {\r\n\r\n    const rowOptions = React.useMemo(() => {\r\n        const options = new Set<number | string>()\r\n        preFilteredRows.forEach(row => {\r\n            options.add(row.values[id])\r\n        })\r\n        return Array.from(options).map(opt => ({id: opt, name: opt}));\r\n    }, [id, preFilteredRows])\r\n\r\n    const usedOptions = options || rowOptions;\r\n\r\n    return (\r\n        <KInput\r\n            type=\"select\"\r\n            value={filterValue}\r\n            onChange={e => setFilter(e?.target.value || undefined)}\r\n        >\r\n            <option value=\"\">All</option>\r\n            {usedOptions.map((option, i) => (\r\n                <option key={i} value={option.id}>\r\n                    {option.name}\r\n                </option>\r\n            ))}\r\n        </KInput>\r\n    )\r\n}\r\n","import React, {useEffect, useMemo} from 'react';\r\nimport {timeToString} from 'src/app/api/common/models';\r\nimport {Service} from 'src/app/api/services';\r\nimport {AdminTableContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport KColorBox from 'src/app/shared/components/primitives/KColorBox';\r\nimport {KSelectColumnFilter} from 'src/app/shared/components/tables/k-select-column-filter';\r\nimport KTable from 'src/app/shared/components/tables/k-table';\r\nimport KTextColumnFilter from 'src/app/shared/components/tables/k-text-column-filter';\r\nimport {useAppDispatch, useAppSelector} from 'src/app/store';\r\nimport {serviceCategoryActions, serviceCategorySelectors} from 'src/app/store/admin/serviceCategories';\r\n\r\n\r\nconst ServicesTable: React.FunctionComponent<AdminTableContainerProps<Service>> = (\r\n    {\r\n        entities,\r\n        buttonsColumn,\r\n        filter,\r\n    }) => {\r\n    const serviceCategories = useAppSelector(serviceCategorySelectors.selectAll)\r\n    const serviceCategoryDict = useAppSelector(serviceCategorySelectors.selectEntities)\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(serviceCategoryActions.initializeStore());\r\n    }, [dispatch]);\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                Header: 'category',\r\n                accessor: 'category',\r\n                Filter: (props: any) => <KSelectColumnFilter {...props} options={serviceCategories}/>,\r\n                Cell: (value: any) => <>{serviceCategoryDict[value.cell.value]?.name}</>\r\n            },\r\n            {\r\n                Header: 'Name',\r\n                accessor: 'name',\r\n                Filter: KTextColumnFilter\r\n            },\r\n            {\r\n                Header: 'Duration',\r\n                accessor: 'duration',\r\n                Cell: (value: any) => timeToString(value.cell.value)\r\n            },\r\n            {\r\n                Header: 'Color',\r\n                accessor: 'color',\r\n                Cell: (value: any) => <KColorBox backgroundColor={value.cell.value}/>\r\n\r\n            },\r\n            {\r\n                Header: 'Description',\r\n                accessor: 'description',\r\n            },\r\n            {\r\n                Header: 'Price',\r\n                accessor: 'price',\r\n            },\r\n            buttonsColumn\r\n        ],\r\n        [buttonsColumn, serviceCategories, serviceCategoryDict]\r\n    )\r\n\r\n    return (\r\n        <KTable columns={columns} data={entities}/>\r\n    )\r\n}\r\n\r\n\r\nexport default ServicesTable;\r\n","import React from 'react';\r\nimport {PermissionModel} from 'src/app/api/auth';\r\nimport ServiceUpsertForm from 'src/app/modules/admin/services/service-upsert-form';\r\nimport ServicesTable from 'src/app/modules/admin/services/services-table';\r\nimport AdminListEditContainer from 'src/app/shared/admin/admin-list-edit-container';\r\nimport {serviceActions, serviceSelectors} from 'src/app/store/admin/services';\r\n\r\n\r\ninterface ServicesContainerProps {\r\n}\r\n\r\nconst ServicesContainer: React.FunctionComponent<ServicesContainerProps> = () => {\r\n    return (\r\n        <AdminListEditContainer baseSelectors={serviceSelectors}\r\n                                baseActions={serviceActions}\r\n                                modelType={PermissionModel.service}\r\n                                EditContainer={ServiceUpsertForm}\r\n                                ListContainer={ServicesTable}/>\r\n    )\r\n}\r\n\r\n\r\nexport default ServicesContainer;\r\n","import {User} from 'src/app/api/users';\r\nimport React, {useMemo} from 'react';\r\nimport {AdminTableContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport KTable from 'src/app/shared/components/tables/k-table';\r\nimport KTextColumnFilter from 'src/app/shared/components/tables/k-text-column-filter';\r\n\r\nconst UsersTable: React.FunctionComponent<AdminTableContainerProps<User>> = (\r\n    {\r\n        entities,\r\n        buttonsColumn,\r\n        filter,\r\n    }) => {\r\n    const columns =\r\n        useMemo(() => [\r\n            {\r\n                Header: 'Name',\r\n                accessor: 'name',\r\n                Filter: (cell: any) => <KTextColumnFilter {...cell} onChangeSideEffect={filter}/>\r\n            },\r\n            {\r\n                Header: 'Email',\r\n                accessor: 'email',\r\n            },\r\n            {\r\n                Header: 'Phone',\r\n                accessor: 'phone',\r\n            },\r\n            buttonsColumn\r\n        ], [buttonsColumn, filter])\r\n\r\n    return (\r\n        <KTable columns={columns} data={entities}/>\r\n    )\r\n}\r\n\r\n\r\nexport default UsersTable;\r\n","import React, {useState} from 'react';\r\nimport {Button, FormGroup} from 'reactstrap';\r\nimport {ApiValidationError} from 'src/app/api/common/api-errors';\r\nimport {\r\n    adminUserClient,\r\n    ChangeUserPasswordRequest,\r\n    changeUserPasswordRequestParser,\r\n    ChangeUserPasswordValidation\r\n} from 'src/app/api/users';\r\nimport {KFormikForm, KFormikInput} from 'src/app/shared/components/forms';\r\nimport KModal from 'src/app/shared/components/modal/k-modal';\r\n\r\ninterface ChangePasswordFormProps {\r\n    apiError: ApiValidationError | null;\r\n    onSubmit: (value: ChangeUserPasswordRequest) => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nconst ChangePasswordForm: React.FunctionComponent<ChangePasswordFormProps> = (\r\n    {\r\n        apiError,\r\n        onSubmit,\r\n        onCancel\r\n    }) => {\r\n\r\n    return (\r\n        <KFormikForm initialValues={changeUserPasswordRequestParser()}\r\n                     apiError={apiError}\r\n                     onSubmit={onSubmit}\r\n                     onCancel={onCancel}\r\n                     validationSchema={ChangeUserPasswordValidation}\r\n        >\r\n            <KFormikInput name=\"password1\" type=\"password\"/>\r\n            <KFormikInput name=\"password2\" type=\"password\"/>\r\n            <KFormikInput name=\"userPassword\" type=\"password\"/>\r\n        </KFormikForm>\r\n    )\r\n}\r\n\r\ninterface ChangePasswordContainerProps {\r\n    id: number;\r\n}\r\n\r\nconst ChangePasswordContainer: React.FunctionComponent<ChangePasswordContainerProps> = ({id}) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [apiError, setApiError] = useState<ApiValidationError | null>(null);\r\n\r\n    const handleButtonClick = () => {\r\n        setIsOpen(true)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsOpen(false);\r\n    }\r\n    const handleSubmit = (form: ChangeUserPasswordRequest) => {\r\n        adminUserClient.changePassword(id, form)\r\n            .then(res => setIsOpen(false))\r\n            .catch(apiError => {\r\n                console.log(apiError);\r\n                setApiError(apiError);\r\n            });\r\n    }\r\n\r\n    const form = <ChangePasswordForm\r\n        apiError={apiError}\r\n        onSubmit={handleSubmit}\r\n        onCancel={handleCancel}/>\r\n\r\n    return (\r\n        <>\r\n            <KModal body={form} isOpen={isOpen}/>\r\n            <FormGroup>\r\n                <Button block={true} color={'primary'} type={'button'} onClick={handleButtonClick}> change password</Button>\r\n            </FormGroup>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChangePasswordContainer;\r\n","import React from 'react';\r\nimport {upsertUserRequestParser, UpsertUserRequestValidation, User} from 'src/app/api/users';\r\nimport ChangePasswordForm from 'src/app/modules/admin/users/change-password-form';\r\nimport {useSelectAll} from 'src/app/shared/admin/hooks';\r\nimport {AdminEditContainerProps} from 'src/app/shared/admin/interfaces';\r\nimport {KFormikForm, KFormikInput} from 'src/app/shared/components/forms';\r\nimport {employeeActions, employeeSelectors} from 'src/app/store/admin/employees';\r\nimport {permissionGroupActions, permissionGroupSelectors} from 'src/app/store/admin/permissionGroups';\r\n\r\n\r\nconst UsersUpsertForm: React.FunctionComponent<AdminEditContainerProps<User>> = (\r\n    {\r\n        entity,\r\n        apiError,\r\n        onSubmit,\r\n        onCancel\r\n    }) => {\r\n    const employees = useSelectAll(employeeSelectors, employeeActions);\r\n    const groups = useSelectAll(permissionGroupSelectors, permissionGroupActions);\r\n\r\n    return (\r\n        <KFormikForm initialValues={upsertUserRequestParser(entity)}\r\n                     apiError={apiError}\r\n                     onSubmit={onSubmit}\r\n                     onCancel={onCancel}\r\n                     validationSchema={UpsertUserRequestValidation}\r\n        >\r\n            {entity?.id &&\r\n            <ChangePasswordForm id={entity.id}/>\r\n            }\r\n            <KFormikInput name=\"firstName\"/>\r\n            <KFormikInput name=\"lastName\"/>\r\n            <KFormikInput name=\"email\"/>\r\n            <KFormikInput name=\"groups\" as={'multi-select'} options={groups}/>\r\n            <KFormikInput name=\"employee\" as={'select'} options={employees}/>\r\n        </KFormikForm>\r\n    )\r\n}\r\n\r\n\r\nexport default UsersUpsertForm;\r\n","import React from 'react';\r\nimport {PermissionModel} from 'src/app/api/auth';\r\nimport UsersTable from 'src/app/modules/admin/users/users-table';\r\nimport UsersUpsertForm from 'src/app/modules/admin/users/users-upsert-form';\r\nimport AdminListEditContainer from 'src/app/shared/admin/admin-list-edit-container';\r\nimport {useAppDispatch} from 'src/app/store';\r\nimport {customerActions} from 'src/app/store/admin/customers';\r\nimport {userActions, userSelectors} from 'src/app/store/admin/users';\r\n\r\n\r\nconst UsersContainer: React.FunctionComponent = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const filter = (value: string | undefined) => {\r\n        dispatch(customerActions.fetchEntities({search: value}));\r\n    }\r\n\r\n    return (\r\n            <AdminListEditContainer baseSelectors={userSelectors}\r\n                                    baseActions={userActions}\r\n                                    filter={filter}\r\n                                    modelType={PermissionModel.user}\r\n                                    EditContainer={UsersUpsertForm}\r\n                                    ListContainer={UsersTable}/>\r\n    )\r\n}\r\n\r\n\r\nexport default UsersContainer;\r\n\r\n\r\n","import React from 'react';\r\n\r\ninterface KDashboardContentProps {\r\n    children: React.ReactNode;\r\n}\r\n\r\nconst KDashboardContent: React.FunctionComponent<KDashboardContentProps> = (\r\n    {\r\n        children\r\n    }) => {\r\n    return (\r\n        <div className=\"dashboard-content\">\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default KDashboardContent;\r\n","import React from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\nimport {PermissionModel, PermissionType} from 'src/app/api/auth';\r\nimport KIcon from 'src/app/shared/components/primitives/k-icon';\r\nimport {useUserHasPermission} from 'src/app/shared/context-providers/auth-auto-login';\r\nimport {useKHistory} from 'src/app/shared/util/router-extensions';\r\n\r\nexport interface SideBarLinkItem {\r\n    name: string;\r\n    url: string;\r\n    icon: string | undefined;\r\n    permissionModel?: PermissionModel;\r\n}\r\n\r\nexport interface SideBarLinks {\r\n    [key: string]: SideBarLinkItem[]\r\n}\r\n\r\ninterface KDashboardSidebarProps {\r\n    links: SideBarLinks;\r\n    isOpen: boolean;\r\n}\r\n\r\nexport interface KDashboardSidebarLinkProps extends SideBarLinkItem {\r\n    isOpen: boolean;\r\n}\r\n\r\n\r\nconst KDashboardSidebarLink: React.FunctionComponent<KDashboardSidebarLinkProps> = (\r\n    {\r\n        isOpen,\r\n        name,\r\n        url,\r\n        icon,\r\n        permissionModel\r\n    }) => {\r\n    const {location: {pathname}} = useKHistory();\r\n    const hasPermission = useUserHasPermission(PermissionType.view, permissionModel);\r\n\r\n    return (\r\n        <>\r\n            {hasPermission &&\r\n            <li className=\"sidebar-list-item\" key={name}>\r\n                <Link to={url}\r\n                      className={`sidebar-link ${pathname === url ? ' active' : 'text-muted'}`}\r\n                >\r\n                    {icon && <KIcon icon={icon}/>}\r\n                    {isOpen &&\r\n                    <span className=\"sidebar-link-title\">{name}</span>\r\n                    }\r\n                </Link>\r\n            </li>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst KDashboardSidebar: React.FunctionComponent<KDashboardSidebarProps> = (\r\n    {\r\n        links,\r\n        isOpen\r\n    }) => {\r\n\r\n    return (\r\n        <div className={`sidebar ${isOpen ? 'open' : 'closed'} k-shadow-0 py-3`}>\r\n            {Object.keys(links).map(key => {\r\n                return (\r\n                    <React.Fragment key={key}>\r\n                        <h6 className=\"sidebar-heading\">{key}</h6>\r\n                        <ul className=\"list-clear\">\r\n                            {links[key].map(({name, url, icon, permissionModel}, k) =>\r\n                                <KDashboardSidebarLink isOpen={isOpen}\r\n                                                       key={k}\r\n                                                       name={name}\r\n                                                       url={url}\r\n                                                       icon={icon}\r\n                                                       permissionModel={permissionModel}/>\r\n                            )}\r\n                        </ul>\r\n                    </React.Fragment>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default KDashboardSidebar;\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport KDashboardContent from 'src/app/shared/components/dashboard/k-dashboard-content';\r\nimport KDashboardSidebar, {SideBarLinks} from 'src/app/shared/components/dashboard/k-dashboard-sidebar';\r\nimport {KFlexRow} from 'src/app/shared/components/flex';\r\nimport {selectSidenavOpen, setShowDashboardToggle} from 'src/app/store/ui';\r\n\r\ninterface DashboardContainerProps {\r\n    links: SideBarLinks;\r\n    children?: React.ReactNode;\r\n}\r\n\r\nconst KDashboardContainer: React.FunctionComponent<DashboardContainerProps> = (\r\n    {\r\n        links,\r\n        children\r\n    }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setShowDashboardToggle(true));\r\n        return () => {\r\n            dispatch(setShowDashboardToggle(false));\r\n        };\r\n    }, [dispatch]);\r\n\r\n    const isOpen = useSelector(selectSidenavOpen);\r\n\r\n    return (\r\n        <KFlexRow align={'stretch'}>\r\n            <KDashboardSidebar\r\n                links={links}\r\n                isOpen={isOpen}\r\n            />\r\n            <KDashboardContent>\r\n                {children}\r\n            </KDashboardContent>\r\n        </KFlexRow>\r\n    )\r\n}\r\n\r\n\r\nexport default KDashboardContainer;\r\n","import React from 'react';\r\nimport {useIntl} from 'react-intl';\r\nimport {Switch} from 'react-router-dom';\r\nimport {PermissionModel} from 'src/app/api/auth';\r\nimport AppointmentsContainer from 'src/app/modules/admin/appointments/appointments-container';\r\nimport CustomersContainer from 'src/app/modules/admin/customers/customers-container';\r\nimport EmployeesContainer from 'src/app/modules/admin/employees/employees-container';\r\nimport PermissionGroupsContainer from 'src/app/modules/admin/permissionGroups/permission-groups-container';\r\nimport SchedulesContainer from 'src/app/modules/admin/schedules/schedules-container';\r\nimport ServicesContainer from 'src/app/modules/admin/services/services-container';\r\nimport {ADMIN_ROUTES} from 'src/app/modules/admin/urls';\r\nimport UsersContainer from 'src/app/modules/admin/users/users-container';\r\nimport KDashboardContainer from 'src/app/shared/components/dashboard/k-dashboard-container';\r\nimport {SideBarLinks} from 'src/app/shared/components/dashboard/k-dashboard-sidebar';\r\nimport {ProtectedRoute} from 'src/app/shared/util/router-extensions';\r\n\r\n\r\nconst AdminRoutes: React.FunctionComponent = () => {\r\n    const intl = useIntl();\r\n    const links: SideBarLinks = ({\r\n        'Main': [\r\n            // [intl.formatMessage({id: 'ADMIN.COMMON.HOME'}), ADMIN_ROUTES.HOME, 'home'],\r\n            {\r\n                name: intl.formatMessage({id: 'ADMIN.COMMON.SERVICES'}),\r\n                url: ADMIN_ROUTES.SERVICES,\r\n                icon: 'magic',\r\n                permissionModel: PermissionModel.service\r\n            },\r\n            {\r\n                name: intl.formatMessage({id: 'ADMIN.COMMON.SCHEDULES'}),\r\n                url: ADMIN_ROUTES.SCHEDULES,\r\n                icon: 'calendar-alt',\r\n                permissionModel: PermissionModel.schedule\r\n            },\r\n            {\r\n                name: intl.formatMessage({id: 'ADMIN.COMMON.EMPLOYEES'}),\r\n                url: ADMIN_ROUTES.EMPLOYEES,\r\n                icon: 'people-carry',\r\n                permissionModel: PermissionModel.employee\r\n            },\r\n            {\r\n                name: intl.formatMessage({id: 'ADMIN.COMMON.CUSTOMERS'}),\r\n                url: ADMIN_ROUTES.CUSTOMERS,\r\n                icon: 'address-card',\r\n                permissionModel: PermissionModel.customer\r\n            },\r\n            {\r\n                name: intl.formatMessage({id: 'ADMIN.COMMON.APPOINTMENTS'}),\r\n                url: ADMIN_ROUTES.APPOINTMENTS,\r\n                icon: 'address-book',\r\n                permissionModel: PermissionModel.appointment\r\n            },\r\n        ],\r\n        'Manage': [\r\n\r\n            {\r\n                name: intl.formatMessage({id: 'ADMIN.COMMON.USERS'}),\r\n                url: ADMIN_ROUTES.USERS,\r\n                icon: 'users',\r\n                permissionModel: PermissionModel.user\r\n            },\r\n            {\r\n                name: intl.formatMessage({id: 'ADMIN.COMMON.PERMISSION-GROUPS'}),\r\n                url: ADMIN_ROUTES.PERMISSION_GROUPS,\r\n                icon: 'users-slash',\r\n                permissionModel: PermissionModel.groupprofile\r\n            },\r\n        ]\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {links &&\r\n            <KDashboardContainer links={links}>\r\n                <Switch>\r\n                    <ProtectedRoute permissionModel={PermissionModel.service}\r\n                                    path={ADMIN_ROUTES.SERVICES}\r\n                                    component={ServicesContainer}/>\r\n\r\n                    <ProtectedRoute permissionModel={PermissionModel.employee}\r\n                                    path={ADMIN_ROUTES.EMPLOYEES}\r\n                                    component={EmployeesContainer}/>\r\n\r\n                    <ProtectedRoute permissionModel={PermissionModel.customer}\r\n                                    path={ADMIN_ROUTES.CUSTOMERS}\r\n                                    component={CustomersContainer}/>\r\n\r\n                    <ProtectedRoute permissionModel={PermissionModel.schedule}\r\n                                    path={ADMIN_ROUTES.SCHEDULES}\r\n                                    component={SchedulesContainer}/>\r\n\r\n                    <ProtectedRoute permissionModel={PermissionModel.user}\r\n                                    path={ADMIN_ROUTES.USERS}\r\n                                    component={UsersContainer}/>\r\n\r\n                    <ProtectedRoute permissionModel={PermissionModel.groupprofile}\r\n                                    path={ADMIN_ROUTES.PERMISSION_GROUPS}\r\n                                    component={PermissionGroupsContainer}/>\r\n\r\n                    <ProtectedRoute permissionModel={PermissionModel.appointment}\r\n                                    path={ADMIN_ROUTES.APPOINTMENTS}\r\n                                    component={AppointmentsContainer}/>\r\n\r\n                    <ProtectedRoute permissionModel={PermissionModel.service}\r\n                                    path={ADMIN_ROUTES.ROOT}\r\n                                    component={ServicesContainer}/>\r\n                </Switch>\r\n            </KDashboardContainer>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AdminRoutes;\r\n","import React from 'react';\r\nimport {Company} from 'src/app/api/companies';\r\nimport { KFlexRow } from 'src/app/shared/components/flex';\r\nimport AvatarImg from 'src/app/shared/components/primitives/avatar-img';\r\n\r\ninterface CompanyAvatarProps {\r\n    company: Company;\r\n}\r\n\r\nconst CompanyAvatar: React.FunctionComponent<CompanyAvatarProps> = (\r\n    {company}) => {\r\n    return (\r\n        <KFlexRow align=\"center\">\r\n            <AvatarImg src={company.avatar}/>\r\n            <div className=\"ml-2\">\r\n                <h3 className=\"pb-0 c-pointer\">{company.name}</h3>\r\n                <div className=\"c-accent\">\r\n                    {company.address}\r\n                </div>\r\n            </div>\r\n        </KFlexRow>\r\n    );\r\n}\r\n\r\nexport default CompanyAvatar;\r\n","import React from 'react';\r\nimport {CustomerRequestAppointment} from 'src/app/api/appointments';\r\nimport {KFlexColumn, KFlexRow} from 'src/app/shared/components/flex';\r\nimport AvatarImg from 'src/app/shared/components/primitives/avatar-img';\r\nimport KIcon from 'src/app/shared/components/primitives/k-icon';\r\nimport {stringToMoment} from 'src/app/shared/util/moment-helpers';\r\n\r\ninterface EventDetailsProps {\r\n    appointment: CustomerRequestAppointment;\r\n}\r\n\r\nconst EventDetails: React.FunctionComponent<EventDetailsProps> = (\r\n    {\r\n        appointment\r\n    }) => {\r\n    return (\r\n        <KFlexRow className=\"flex-fill\" align={'center'}>\r\n            <AvatarImg size={4} src={appointment.employee.photoUrl}/>\r\n            <KFlexColumn className=\"pl-2 flex-fill\">\r\n                <KFlexRow justify={'between'}>\r\n                        <span>\r\n                        <KIcon icon=\"calendar\"/>\r\n                            {stringToMoment(appointment.start).format('DD - MMMM')}\r\n                        </span>\r\n                    <span>\r\n                        <KIcon icon=\"clock-o\"/>\r\n                        {stringToMoment(appointment.start).format('HH:mm - ')}\r\n                        {stringToMoment(appointment.end).format('HH:mm')}\r\n                        </span>\r\n                </KFlexRow>\r\n                <div>\r\n                    {appointment.employee.name}\r\n                </div>\r\n                <KFlexRow>\r\n                    {appointment.service.name}\r\n                    <span className=\"flex-fill c-primary text-right\">\r\n                        {appointment.service.price}\r\n                        </span>\r\n                </KFlexRow>\r\n            </KFlexColumn>\r\n        </KFlexRow>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default EventDetails;\r\n","import React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {CustomerEvent} from 'src/app/api/appointments';\r\nimport CompanyAvatar from 'src/app/modules/companies/avatar/company-avatar';\r\nimport EventDetails from 'src/app/modules/users/bookings/event-details';\r\nimport KModal from 'src/app/shared/components/modal/k-modal';\r\n\r\ninterface EventModalProps {\r\n    appointment: CustomerEvent | null;\r\n    closeClick: () => void;\r\n}\r\n\r\nconst EventModal: React.FunctionComponent<EventModalProps> = (\r\n    {\r\n        appointment,\r\n        closeClick\r\n    }) => {\r\n\r\n    const header = appointment &&\r\n        <>\r\n            <CompanyAvatar company={appointment.owner}/>\r\n            <EventDetails appointment={appointment}/>\r\n            <div className=\"c-primary text-right\"><FormattedMessage id={`APPOINTMENT.STATUS.${appointment.status}`}/></div>\r\n        </>\r\n\r\n    return (\r\n        <>\r\n            <KModal isOpen={!!appointment}\r\n                    backdrop={true}\r\n                    header={header}\r\n                    body={\r\n                        <p>\r\n                            {appointment?.owner.config.postBookMessage}\r\n                        </p>\r\n                    }\r\n                    onCancel={closeClick}\r\n                    buttons={[{color: 'primary', text: 'close', onClick: closeClick}]}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default EventModal;\r\n","import moment from 'moment'\r\nimport React, {useEffect} from 'react';\r\nimport {Calendar, momentLocalizer, stringOrDate} from 'react-big-calendar'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Appointment} from 'src/app/api/appointments';\r\nimport {RequestModelGetParams} from 'src/app/api/companies';\r\nimport EventModal from 'src/app/modules/users/bookings/event-modal';\r\nimport {KCard, KPageContainer} from 'src/app/shared/components/primitives/containers';\r\nimport {stringToMoment, validOrToday} from 'src/app/shared/util/moment-helpers';\r\nimport {useQueryParams} from 'src/app/shared/util/router-extensions';\r\nimport {eventsRequest, selectEvents, selectSelectedEvent, setSelectedEvent} from 'src/app/store/users';\r\n\r\n\r\nconst BookingsContainer: React.FunctionComponent = () => {\r\n    const events = useSelector(selectEvents)\r\n        ?.map(a => ({...a, title: a.companyName}));\r\n    const selectedEvent = useSelector(selectSelectedEvent);\r\n    const dispatch = useDispatch();\r\n    const {date} = useQueryParams();\r\n\r\n    const initialDate = validOrToday(date);\r\n\r\n    useEffect(() => {\r\n        dispatch(eventsRequest({start: initialDate.clone().startOf('month'), end: initialDate.clone().endOf('month')}))\r\n    }, [dispatch, initialDate]);\r\n\r\n\r\n    const updateEvents = (range: Date[] | { start: stringOrDate; end: stringOrDate }) => {\r\n        const request: RequestModelGetParams = Array.isArray(range)\r\n            ? {start: stringToMoment(range[0]), end: stringToMoment(range[range.length - 1])}\r\n            : {start: stringToMoment(range.start), end: stringToMoment(range.end)}\r\n        dispatch(eventsRequest(request));\r\n    }\r\n\r\n    const selectEvent = (appointment: Appointment) => dispatch(setSelectedEvent(appointment))\r\n    const closeModal = () => dispatch(setSelectedEvent(null));\r\n\r\n    return (\r\n        <KPageContainer>\r\n            <KCard>\r\n                <Calendar\r\n                    date={initialDate.toDate()}\r\n                    localizer={momentLocalizer(moment)}\r\n                    events={events || []}\r\n                    startAccessor=\"start\"\r\n                    endAccessor=\"end\"\r\n                    style={{height: 500}}\r\n                    onRangeChange={updateEvents}\r\n                    onSelectEvent={selectEvent}\r\n                />\r\n            </KCard>\r\n            <EventModal appointment={selectedEvent}\r\n                        closeClick={closeModal}/>\r\n        </KPageContainer>\r\n    )\r\n}\r\n\r\n\r\nexport default BookingsContainer;\r\n","import React from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport BookingsContainer from 'src/app/modules/users/bookings/bookings-container';\r\nimport {USER_ROUTES} from 'src/app/modules/users/urls';\r\n\r\nconst UsersRoutes: React.FunctionComponent = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path={USER_ROUTES.BOOKING()} component={BookingsContainer}/>\r\n        </Switch>\r\n    )\r\n}\r\n\r\n\r\nexport default UsersRoutes;\r\n","import React, {useEffect} from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {useDispatch} from 'react-redux';\r\nimport {authApi} from 'src/app/api/auth/clients';\r\nimport {KFlexRow} from 'src/app/shared/components/flex';\r\nimport { KCard, KPageContainer } from 'src/app/shared/components/primitives/containers';\r\nimport {setUser} from 'src/app/store/auth';\r\n\r\n\r\nconst LogoutContainer: React.FunctionComponent = () => {\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        authApi.logout().then(() => {\r\n            dispatch(setUser(null));\r\n        });\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <KPageContainer>\r\n            <KFlexRow align={'center'} justify={'center'}>\r\n                <KCard maxWidth={400}>\r\n                    <FormattedMessage id={'AUTH.LOGOUT-SUCCESS'}/>\r\n                </KCard>\r\n            </KFlexRow>\r\n        </KPageContainer>\r\n    )\r\n}\r\n\r\n\r\nexport default LogoutContainer;\r\n","import * as Yup from 'yup';\r\n\r\nexport const LoginRequestValidation = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email('Invalid email')\r\n        .required('Required'),\r\n});\r\n\r\n\r\nexport const RegisterRequestValidation = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email('Invalid email')\r\n        .required('Required'),\r\n    password1: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(70, 'Too Long!')\r\n        .required('Required'),\r\n    password2: Yup.string()\r\n        .required()\r\n        .oneOf([Yup.ref('password1'), null], 'Passwords must match'),\r\n});\r\n","import {useSelector} from 'react-redux';\r\nimport {useKHistory, useQueryParams} from 'src/app/shared/util/router-extensions';\r\nimport {selectLoggedIn} from 'src/app/store/auth';\r\n\r\n\r\nexport const useRedirectIfLoggedInEffect = () => {\r\n    const isLoggedIn = useSelector(selectLoggedIn);\r\n    const history = useKHistory();\r\n    const {returnUrl, ...params} = useQueryParams();\r\n    if (isLoggedIn) {\r\n        const redirectUrl = returnUrl || '/';\r\n        history.push(redirectUrl, params);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {LoginRequest} from 'src/app/api/auth/requests';\r\nimport {ApiValidationError} from 'src/app/api/common/api-errors';\r\nimport {KFormikForm, KFormikInput, KFormikSubmit} from 'src/app/shared/components/forms';\r\n\r\nexport interface LoginViewProps {\r\n    data: LoginRequest;\r\n    onSubmit: (data: LoginRequest) => void;\r\n    apiError: ApiValidationError | null;\r\n    validationSchema?: any | (() => any);\r\n}\r\n\r\nconst LoginView: React.FunctionComponent<LoginViewProps> = (\r\n    {\r\n        data,\r\n        onSubmit,\r\n        apiError,\r\n        validationSchema\r\n    }) => {\r\n    return (\r\n        <KFormikForm initialValues={data}\r\n                     apiError={apiError}\r\n                     onSubmit={onSubmit}\r\n                     validationSchema={validationSchema}>\r\n            <>\r\n                <KFormikInput name=\"email\" type=\"email\"/>\r\n                <KFormikInput name=\"password\" type=\"password\"/>\r\n                <KFormikSubmit text={<FormattedMessage id={\"AUTH.LOGIN\"}/>}\r\n                               isBlock={true}\r\n                />\r\n            </>\r\n        </KFormikForm>\r\n    )\r\n}\r\n\r\nexport default LoginView;\r\n","import React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {LoginRequest} from 'src/app/api/auth/requests';\r\nimport {LoginRequestValidation} from 'src/app/api/auth/validations';\r\nimport {useRedirectIfLoggedInEffect} from 'src/app/modules/auth/effects';\r\nimport {KFlexColumn} from 'src/app/shared/components/flex';\r\nimport {KCard, KPageContainer} from 'src/app/shared/components/primitives/containers';\r\nimport {loginRequest, selectApiError} from 'src/app/store/auth';\r\nimport LoginView from './login-view';\r\n\r\n\r\nconst LoginContainer = () => {\r\n    useRedirectIfLoggedInEffect();\r\n    const dispatch = useDispatch();\r\n    const apiError = useSelector(selectApiError);\r\n    const initialValues: LoginRequest = {email: '', password: ''};\r\n    const handleSubmit = (data: LoginRequest) => {\r\n        dispatch(loginRequest(data));\r\n    };\r\n\r\n    // const faceBookAppId = process.env.REACT_APP_FACEBOOK_APP_ID;\r\n    //\r\n    // const facebookCallback = (userInfo: ReactFacebookLoginInfo | ReactFacebookFailureResponse) => {\r\n    //     if ('id' in userInfo) {\r\n    //         dispatch(facebookLoginRequest(userInfo.accessToken));\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <KPageContainer>\r\n            <KFlexColumn align=\"center\">\r\n                <KCard maxWidth={400}\r\n                       header={<FormattedMessage id=\"AUTH.LOGIN-HEADER\"/>}\r\n                >\r\n                    <>\r\n                        {/*{faceBookAppId &&*/}\r\n                        {/*<FacebookLogin*/}\r\n                        {/*    appId={faceBookAppId}*/}\r\n                        {/*    autoLoad={false}*/}\r\n                        {/*    size={'small'}*/}\r\n                        {/*    fields=\"name,email,picture\"*/}\r\n                        {/*    callback={facebookCallback}/>*/}\r\n                        {/*}*/}\r\n\r\n                        <LoginView onSubmit={handleSubmit}\r\n                                   data={initialValues}\r\n                                   apiError={apiError}\r\n                                   validationSchema={LoginRequestValidation}\r\n                        />\r\n                    </>\r\n                </KCard>\r\n            </KFlexColumn>\r\n        </KPageContainer>\r\n    )\r\n}\r\n\r\nexport default LoginContainer;\r\n","import React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {useSelector} from 'react-redux';\r\nimport {RegisterRequest} from 'src/app/api/auth';\r\nimport {parseRegisterRequest} from 'src/app/api/auth/parsers';\r\nimport {RegisterRequestValidation} from 'src/app/api/auth/validations';\r\nimport {useRedirectIfLoggedInEffect} from 'src/app/modules/auth/effects';\r\nimport {KFlexColumn} from 'src/app/shared/components/flex';\r\nimport {KFormikForm, KFormikInput, KFormikSubmit} from 'src/app/shared/components/forms';\r\nimport {KCard, KPageContainer} from 'src/app/shared/components/primitives/containers';\r\nimport {useAppDispatch} from 'src/app/store';\r\nimport {registerRequest, selectApiError} from 'src/app/store/auth';\r\n\r\n\r\nconst RegisterContainer = () => {\r\n    useRedirectIfLoggedInEffect();\r\n\r\n    const apiError = useSelector(selectApiError);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const handleSubmit = (data: RegisterRequest) => {\r\n        dispatch(registerRequest(data));\r\n    };\r\n\r\n    return (\r\n        <KPageContainer>\r\n            <KFlexColumn align=\"center\">\r\n                <KCard maxWidth={400}\r\n                       header={<FormattedMessage id=\"AUTH.REGISTER-HEADER\"/>}\r\n                >\r\n                    <KFormikForm initialValues={parseRegisterRequest()}\r\n                                 apiError={apiError}\r\n                                 onSubmit={handleSubmit}\r\n                                 validationSchema={RegisterRequestValidation}\r\n                    >\r\n                        <KFormikInput name=\"firstName\"/>\r\n                        <KFormikInput name=\"lastName\"/>\r\n                        <KFormikInput type=\"email\" name=\"email\"/>\r\n                        <KFormikInput type=\"password\" name=\"password1\" placeholder=\"password\"/>\r\n                        <KFormikInput type=\"password\" name=\"password2\" placeholder=\"confirm password\"/>\r\n                        <KFormikSubmit text={<FormattedMessage id={\"AUTH.REGISTER\"}/>}\r\n                                       isBlock={true}\r\n                        />\r\n                    </KFormikForm>\r\n                </KCard>\r\n            </KFlexColumn>\r\n        </KPageContainer>\r\n    )\r\n}\r\n\r\nexport default RegisterContainer;\r\n","import {SocialAccount} from 'src/app/api/auth/models';\r\nimport {RegisterRequest} from 'src/app/api/auth/requests';\r\nimport {stringToMoment} from 'src/app/shared/util/moment-helpers';\r\n\r\nexport function parseSocial(item: any): SocialAccount {\r\n    return {\r\n        ...item,\r\n        lastLogin: stringToMoment(item.lastLogin),\r\n        dateJoined: stringToMoment(item.dateJoined)\r\n    };\r\n}\r\n\r\n\r\nexport function parseRegisterRequest(): RegisterRequest {\r\n    return {email: '', firstName: '', lastName: '', password1: '', password2: ''}\r\n}\r\n","import React from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport LogoutContainer from 'src/app/modules/auth/logout-container';\r\nimport {AUTH_ROUTES} from 'src/app/modules/auth/urls';\r\nimport LoginContainer from './login/login-container';\r\nimport RegisterContainer from 'src/app/modules/auth/register-container';\r\n\r\n\r\nconst AuthRoutes = () => <Switch>\r\n    <Route path={AUTH_ROUTES.LOGIN}>\r\n        <LoginContainer/>\r\n    </Route>\r\n    <Route path={AUTH_ROUTES.REGISTER}>\r\n        <RegisterContainer/>\r\n    </Route>\r\n    <Route path={AUTH_ROUTES.LOGOUT}>\r\n        <LogoutContainer/>\r\n    </Route>\r\n</Switch>\r\n\r\n\r\nexport default AuthRoutes;\r\n","import AuthRoutes from './auth-routes';\r\n\r\nconst AuthContainer = () => <AuthRoutes/>;\r\n\r\nexport default AuthContainer;\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {CreateAppointmentRequest} from 'src/app/api/companies';\r\nimport {companiesUrls} from 'src/app/modules/companies/paths';\r\nimport {useQueryParams} from 'src/app/shared/util/router-extensions';\r\nimport {bookSlotRequest, selectCompany} from 'src/app/store/companies';\r\n\r\n\r\nconst BookContainer: React.FunctionComponent = () => {\r\n    const {service, start, employee} = useQueryParams();\r\n    const company = useSelector(selectCompany);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        if (company) {\r\n            const request: CreateAppointmentRequest = {start, service: +service};\r\n            if (employee) request.employee = +employee;\r\n            dispatch(bookSlotRequest(request))\r\n        }\r\n    }, [company, dispatch, employee, service, start]);\r\n    return (\r\n        <>\r\n            {company &&\r\n            <Redirect to={companiesUrls(company).cart}/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default BookContainer;\r\n","import React, {useState} from 'react';\r\nimport {FormattedMessage, useIntl} from 'react-intl';\r\nimport {CompanyDetails} from 'src/app/api/companies';\r\nimport {RequestModel} from 'src/app/api/requests';\r\nimport CompanyAvatar from 'src/app/modules/companies/avatar/company-avatar';\r\nimport {KInput} from 'src/app/shared/components/primitives/inputs';\r\nimport {KCard} from 'src/app/shared/components/primitives/containers';\r\n\r\ninterface CartSummaryProps {\r\n    company: CompanyDetails;\r\n    request: RequestModel,\r\n    proceedToCheckoutClick: (notes: string) => void;\r\n}\r\n\r\nconst CartCompanySummary: React.FunctionComponent<CartSummaryProps> = (\r\n    {\r\n        company,\r\n        request,\r\n        proceedToCheckoutClick\r\n    }) => {\r\n    const intl = useIntl();\r\n    const [notes, setNotes] = useState(request.customerNotes || '');\r\n\r\n    return (\r\n        <KCard>\r\n            <CompanyAvatar company={company}/>\r\n            <p>\r\n                {company.config.preBookWarn}\r\n            </p>\r\n            <KInput className=\"mb-2\"\r\n                    type=\"textarea\"\r\n                    value={notes}\r\n                    onChange={event => setNotes(event.target.value)}\r\n                    placeholder={intl.formatMessage({id: 'COMPANY.ADD-NOTES'})}/>\r\n\r\n            <button className=\"btn btn-primary btn-block\" onClick={() => proceedToCheckoutClick(notes)}>\r\n                <FormattedMessage id=\"COMPANY.PROCEED-CHECKOUT\"/>\r\n            </button>\r\n        </KCard>\r\n    )\r\n}\r\n\r\n\r\nexport default CartCompanySummary;\r\n","import React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {RequestModel} from 'src/app/api/requests';\r\nimport AvatarImg from 'src/app/shared/components/primitives/avatar-img';\r\nimport { KFlexColumn, KFlexRow } from 'src/app/shared/components/flex';\r\nimport {stringToMoment} from 'src/app/shared/util/moment-helpers';\r\n\r\ninterface CartRequestSummaryProps {\r\n    request: RequestModel;\r\n    showDelete?: boolean;\r\n    deleteClick?: (id: number) => void;\r\n}\r\n\r\nconst CartRequestSummary: React.FunctionComponent<CartRequestSummaryProps> = (\r\n    {\r\n        request,\r\n        showDelete = true,\r\n        deleteClick = () => {\r\n        }\r\n    }) => {\r\n    const isEmpty = !request || (request && request.itemsCount === 0);\r\n    return (\r\n        <KFlexColumn>\r\n            {request.items.map((requestItem, key) => (\r\n                    <KFlexRow align=\"center\" key={key}>\r\n                        <AvatarImg className=\"mr-4\" src={requestItem.employee.photoUrl}/>\r\n                        <KFlexColumn className=\"w-100\">\r\n                            <h4 className=\"border-bottom border-dark\">{requestItem.employee.name}</h4>\r\n                            {requestItem.appointments.map((appointment, key) => (\r\n                                    <KFlexRow className=\"m-2\" key={key} justify={'between'}>\r\n                                        <KFlexColumn>\r\n                                            <h6>{appointment.service.name}</h6>\r\n                                            {stringToMoment(appointment.start).format('DD/MM/YYYY - HH:mm')}\r\n                                            (duration: {appointment.service.duration.minute})\r\n                                        </KFlexColumn>\r\n                                        <KFlexColumn className=\"text-right\">\r\n                                            <h6 className=\"c-primary\">{appointment.service.price}</h6>\r\n                                            {showDelete &&\r\n                                            <button className=\"btn btn-sm btn-outline-danger\"\r\n                                                    onClick={() => deleteClick(appointment.id)}\r\n                                            >\r\n                                                <i className=\"fa fa-trash\"/>\r\n                                            </button>\r\n                                            }\r\n                                        </KFlexColumn>\r\n                                    </KFlexRow>\r\n                                )\r\n                            )}\r\n                        </KFlexColumn>\r\n                    </KFlexRow>\r\n                )\r\n            )}\r\n            <div className=\"text-right font-weight-bold m-2 c-primary\">\r\n                Total: {request.total.toFixed(2)}\r\n            </div>\r\n            {isEmpty && <FormattedMessage id=\"COMPANY.EMPTY-CART\"/>}\r\n        </KFlexColumn>\r\n    )\r\n}\r\n\r\nexport default CartRequestSummary;\r\n\r\n","import React from 'react';\r\n\r\ninterface KGridProps {\r\n    size?: number;\r\n    smSize?: number;\r\n    mdSize?: number;\r\n    lgSize?: number;\r\n    xlSize?: number;\r\n    children: React.ReactNode[];\r\n}\r\n\r\nconst KGrid: React.FunctionComponent<KGridProps> = (\r\n    {\r\n        size = 12,\r\n        smSize,\r\n        mdSize,\r\n        lgSize,\r\n        xlSize,\r\n        children\r\n    }) => {\r\n    const className = `col-sm-${smSize || size} col-md-${mdSize || size} col-lg-${lgSize || size} col-xl-${xlSize || size}`;\r\n    return (\r\n        <div className=\"row\">\r\n            {children && children.map((node, k) =>\r\n                <div key={k} className={className}>{node}</div>)}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default KGrid;\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect, useHistory} from 'react-router-dom';\r\nimport CartCompanySummary from 'src/app/modules/companies/cart/cart-company-summary';\r\nimport CartRequestSummary from 'src/app/modules/companies/cart/cart-request-summary';\r\nimport {companiesUrls} from 'src/app/modules/companies/paths';\r\nimport KGrid from 'src/app/shared/components/grid/k-grid';\r\nimport {KPageContainer, KCard} from 'src/app/shared/components/primitives/containers';\r\nimport {\r\n    addNotesRequest,\r\n    deleteAppointmentRequest,\r\n    selectCartIsLoadedAndEmpty,\r\n    selectCompany,\r\n    selectCurrentRequest\r\n} from 'src/app/store/companies';\r\n\r\ninterface CartContainerProps {\r\n}\r\n\r\nconst CartContainer: React.FunctionComponent<CartContainerProps> = () => {\r\n    const request = useSelector(selectCurrentRequest)\r\n    const company = useSelector(selectCompany);\r\n    const cartIsLoadedAndEmpty = useSelector(selectCartIsLoadedAndEmpty);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const proceedToCheckout = (notes: string) => {\r\n        if (!company || !request) return;\r\n        dispatch(addNotesRequest({id: request.id, notes}));\r\n        history.push(companiesUrls(company).checkout)\r\n    }\r\n\r\n    return (\r\n        <KPageContainer>\r\n            {company && request &&\r\n            <>\r\n                {cartIsLoadedAndEmpty &&\r\n                <Redirect to={companiesUrls(company).index}/>\r\n                }\r\n                <KGrid size={6} smSize={12}>\r\n                    <KCard>\r\n                        <CartRequestSummary request={request}\r\n                                            deleteClick={(id => dispatch(deleteAppointmentRequest(id)))}\r\n                        />\r\n                    </KCard>\r\n                    <CartCompanySummary company={company}\r\n                                        request={request}\r\n                                        proceedToCheckoutClick={proceedToCheckout}\r\n                    />\r\n                </KGrid>\r\n            </>\r\n            }\r\n        </KPageContainer>\r\n    )\r\n}\r\n\r\n\r\nexport default CartContainer;\r\n","import {PaymentIntentResult} from './models';\r\nimport baseApiAxios from 'src/app/api/common/clients/base-api';\r\n\r\n\r\nconst billingUrl = 'billing/';\r\n\r\nexport const billingClient = {\r\n    payment(requestId: number): Promise<PaymentIntentResult> {\r\n        return baseApiAxios.put<PaymentIntentResult>(billingUrl + `payment/${requestId}/`,)\r\n            .then(res => res.data);\r\n    }\r\n}\r\n  \r\n","import {CardElement, useElements, useStripe} from '@stripe/react-stripe-js';\r\nimport React, {FormEvent, useState} from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {FormGroup} from 'reactstrap';\r\nimport {KButton, KCurrency, KErrorMessage} from 'src/app/shared/components/primitives';\r\n\r\ninterface StripePaymentFormProps {\r\n    stripeSecret: string;\r\n    price: number;\r\n    onSuccess: () => void;\r\n}\r\n\r\nconst StripePaymentForm: React.FunctionComponent<StripePaymentFormProps> = (\r\n    {\r\n        stripeSecret,\r\n        price,\r\n        onSuccess,\r\n    }) => {\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n    const [errorMessage, setErrorMessage] = useState<string | undefined>(undefined);\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n    const handleSubmit = (event: FormEvent) => {\r\n        // Block native form submission.\r\n        event.preventDefault();\r\n        if (!stripe || !elements) {\r\n            // Stripe.js has not loaded yet. Make sure to disable\r\n            // form submission until Stripe.js has loaded.\r\n            return;\r\n        }\r\n\r\n        // Get a reference to a mounted CardElement. Elements knows how\r\n        // to find your CardElement because there can only ever be one of\r\n        // each type of element.\r\n        const cardElement = elements.getElement(CardElement)!;\r\n\r\n        setIsProcessing(true);\r\n        setErrorMessage(undefined);\r\n\r\n        // Use your card Element with other Stripe.js APIs\r\n        stripe.confirmCardPayment(stripeSecret, {payment_method: {card: cardElement}})\r\n            .then(({paymentIntent, error}) => {\r\n                if (error) {\r\n                    handleError(error.message);\r\n                }\r\n                if (paymentIntent) {\r\n                    if (paymentIntent.status === 'succeeded') {\r\n                        onSuccess();\r\n                    } else {\r\n                        handleError('something went wrong with your payment please try again later');\r\n                    }\r\n                }\r\n            });\r\n    };\r\n\r\n    const handleError = (message: string | undefined) => {\r\n        setErrorMessage(message);\r\n        setIsProcessing(false);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <KErrorMessage message={errorMessage}/>\r\n            <FormGroup>\r\n                <CardElement className=\"form-control\"\r\n                             options={{\r\n                                 style: {\r\n                                     base: {\r\n                                         fontSize: '1rem',\r\n                                         color: '#424770',\r\n                                         '::placeholder': {\r\n                                             color: '#aab7c4',\r\n                                         },\r\n                                     },\r\n                                     invalid: {\r\n                                         color: '#9e2146',\r\n                                     },\r\n                                 },\r\n                             }}\r\n                />\r\n            </FormGroup>\r\n            <KButton block={true} color={'primary'} disabled={!stripe && isProcessing}>\r\n                {isProcessing\r\n                    ? <FormattedMessage id=\"COMMON.FORM.PROCESSING\"/>\r\n                    : <><FormattedMessage id=\"PAYMENTS.PAY\"/> <KCurrency value={price}/></>\r\n                }\r\n            </KButton>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default StripePaymentForm;\r\n","import React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport StripePaymentForm from 'src/app/modules/billing/stripe-payment-form';\r\nimport KModal from 'src/app/shared/components/modal/k-modal';\r\n\r\ninterface StripeContainerProps {\r\n    price: number;\r\n    stripeSecret: string;\r\n    isOpen: boolean;\r\n    onSuccess: () => void;\r\n    cancelClick: () => void;\r\n}\r\n\r\nconst StripeContainer: React.FunctionComponent<StripeContainerProps> = (\r\n    {\r\n        isOpen,\r\n        price,\r\n        stripeSecret,\r\n        onSuccess,\r\n        cancelClick\r\n    }) => {\r\n\r\n    return (\r\n        <KModal\r\n            header={<FormattedMessage id=\"PAYMENTS.HEADER\"/>}\r\n            body={<StripePaymentForm stripeSecret={stripeSecret}\r\n                                     price={price}\r\n                                     onSuccess={onSuccess}/>}\r\n            onCancel={cancelClick}\r\n            isOpen={isOpen}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport default StripeContainer;\r\n","import React, {useState} from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {billingClient} from 'src/app/api/billing';\r\nimport {RequestModel} from 'src/app/api/requests';\r\nimport StripeContainer from 'src/app/modules/billing/stripe-container';\r\nimport CompanyAvatar from 'src/app/modules/companies/avatar/company-avatar';\r\nimport CartRequestSummary from 'src/app/modules/companies/cart/cart-request-summary';\r\nimport {companiesUrls} from 'src/app/modules/companies/paths';\r\nimport {USER_ROUTES} from 'src/app/modules/users/urls';\r\nimport {KFlexSpacer} from 'src/app/shared/components/flex';\r\nimport {KCard, KPageContainer} from 'src/app/shared/components/primitives/containers';\r\nimport {useKHistory} from 'src/app/shared/util/router-extensions';\r\nimport {\r\n    confirmCartRequest,\r\n    selectCartIsLoadedAndEmpty,\r\n    selectCompany,\r\n    selectCurrentRequest\r\n} from 'src/app/store/companies';\r\n\r\n\r\nconst CheckoutContainer: React.FunctionComponent = () => {\r\n    const company = useSelector(selectCompany);\r\n    const request = useSelector(selectCurrentRequest);\r\n    const cartIsLoadedAndEmpty = useSelector(selectCartIsLoadedAndEmpty);\r\n    const [stripePaymentOpen, setStripePaymentOpen] = useState(false);\r\n    const [stripeSecret, setStripeSecret] = useState<string>('');\r\n    const dispatch = useDispatch();\r\n    const history = useKHistory();\r\n\r\n    const confirmRequest = (request: RequestModel) => () => {\r\n        dispatch(confirmCartRequest(request.id));\r\n        history.push(USER_ROUTES.BOOKING(request.scheduledDate));\r\n    }\r\n\r\n    const toggleStripePaymentOpen = (id: number) => () => {\r\n        billingClient.payment(id)\r\n            .then(res => {\r\n                setStripeSecret(res.clientSecret);\r\n                setStripePaymentOpen(!stripePaymentOpen)\r\n            })\r\n        ;\r\n    }\r\n\r\n    return (\r\n        <KPageContainer>\r\n            {company && request &&\r\n            <>\r\n                {cartIsLoadedAndEmpty &&\r\n                <Redirect to={companiesUrls(company).index}/>\r\n                }\r\n                <KCard>\r\n                    <>\r\n                        <CompanyAvatar company={company}/>\r\n                        <KFlexSpacer/>\r\n                        <CartRequestSummary request={request} showDelete={false}/>\r\n                        <KFlexSpacer/>\r\n                        <h4><FormattedMessage id=\"COMPANY.NOTES\"/></h4>\r\n                        {request.customerNotes}\r\n                        <KFlexSpacer/>\r\n                        <>\r\n                            {company.config.canReceiveCardPayments &&\r\n                            <button onClick={toggleStripePaymentOpen(request.id)}\r\n                                    className=\"btn btn-primary mr-2\">\r\n                                <FormattedMessage id=\"COMPANY.PAY-CARD\"/>\r\n                            </button>\r\n                            }\r\n                            {company.config.canReceiveUnpaidRequest &&\r\n                            <button className=\"btn btn-accent\"\r\n                                    onClick={confirmRequest(request)}>\r\n                                <FormattedMessage id=\"COMPANY.PAY-CASH\"/>\r\n                            </button>\r\n                            }\r\n                        </>\r\n                    </>\r\n                </KCard>\r\n                <StripeContainer\r\n                    price={request.total}\r\n                    stripeSecret={stripeSecret}\r\n                    isOpen={stripePaymentOpen}\r\n                    onSuccess={confirmRequest(request)}\r\n                    cancelClick={() => setStripePaymentOpen(false)}\r\n                />\r\n            </>\r\n\r\n            }\r\n        </KPageContainer>\r\n    )\r\n}\r\n\r\n\r\nexport default CheckoutContainer;\r\n","import React from 'react';\r\nimport {timeToString} from 'src/app/api/common/models';\r\nimport {Service} from 'src/app/api/services';\r\nimport {KFlexRow, KFlexRowItem} from 'src/app/shared/components/flex';\r\n\r\ninterface CompanyServicesItemProps {\r\n    service: Service;\r\n    onClick: (id: number) => void;\r\n}\r\n\r\nconst CompanyServicesItem: React.FunctionComponent<CompanyServicesItemProps> = (\r\n    {\r\n        service,\r\n        onClick\r\n    }) => {\r\n    const style = {borderBottom: '1px solid #A1A1A1'};\r\n\r\n    return (\r\n        <div className=\"c-pointer mb-4\" style={style} onClick={() => onClick(service.id)}>\r\n            <KFlexRow>\r\n                <KFlexRowItem basisPercent={50}>\r\n                    <div className=\"h6\">\r\n                        {service.name}\r\n                    </div>\r\n                </KFlexRowItem>\r\n                <KFlexRowItem>\r\n                    <div className=\"c-primary text-right\">{service.price}</div>\r\n                    <div className=\"tiny light-grey text-right\">ETA: {timeToString(service.duration)}</div>\r\n                </KFlexRowItem>\r\n            </KFlexRow>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default CompanyServicesItem;\r\n","import React from 'react';\r\nimport {isMobile} from 'react-device-detect';\r\nimport {Service, ServiceCategory} from 'src/app/api/services/models';\r\nimport CompanyServicesItem from 'src/app/modules/companies/company-services/company-services-item';\r\nimport {KFlexRow, KFlexRowItem} from 'src/app/shared/components/flex';\r\nimport KGrid from 'src/app/shared/components/grid/k-grid';\r\nimport {KCard} from 'src/app/shared/components/primitives/containers';\r\n\r\ninterface CompanyServicesListProps {\r\n    services: Service[];\r\n    categories: ServiceCategory[];\r\n    serviceClick: (id: number) => void;\r\n}\r\n\r\nconst CompanyServicesList: React.FunctionComponent<CompanyServicesListProps> = (\r\n    {\r\n        services,\r\n        categories,\r\n        serviceClick\r\n    }) => {\r\n    return (\r\n        <KCard>\r\n            <KFlexRow>\r\n                {categories?.length > 1 &&\r\n                <KFlexRowItem>\r\n                    {categories.map((c, k) => <div key={k}>{c.name}</div>)}\r\n                </KFlexRowItem>\r\n                }\r\n                <KFlexRowItem grow={4}>\r\n                    <KGrid size={isMobile ? 12 : 6}>\r\n                        {services?.map((s, k) => <CompanyServicesItem key={k}\r\n                                                                      onClick={serviceClick}\r\n                                                                      service={s}/>)}\r\n                    </KGrid>\r\n                </KFlexRowItem>\r\n            </KFlexRow>\r\n        </KCard>\r\n    )\r\n}\r\n\r\nexport default CompanyServicesList;\r\n","import React from 'react';\r\nimport CompanyServicesList from 'src/app/modules/companies/company-services/company-services-list';\r\nimport {KPageContainer} from 'src/app/shared/components/primitives/containers';\r\nimport {CompanyDetails} from '../../api/companies';\r\nimport CompanyAvatar from './avatar/company-avatar';\r\n\r\ninterface CompaniesViewProps {\r\n    company: CompanyDetails;\r\n    serviceClick: (id: number) => void;\r\n}\r\n\r\nconst CompaniesView: React.FunctionComponent<CompaniesViewProps> = (\r\n    {\r\n        company,\r\n        serviceClick\r\n    }) => {\r\n    return (\r\n        <KPageContainer>\r\n            <CompanyAvatar company={company}\r\n            />\r\n            <CompanyServicesList services={company.services}\r\n                                 categories={company.serviceCategories}\r\n                                 serviceClick={serviceClick}\r\n            />\r\n        </KPageContainer>\r\n    )\r\n}\r\n\r\n\r\nexport default CompaniesView;\r\n","import {Moment} from 'moment';\r\nimport React from 'react';\r\nimport {isMobile} from 'react-device-detect';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Button} from 'reactstrap';\r\nimport {KFlexRow} from 'src/app/shared/components/flex';\r\nimport {KDateInput} from 'src/app/shared/components/primitives/inputs';\r\nimport {\r\n    selectSelectedDate,\r\n    setSelectedDate,\r\n    setSelectedDateToPreviousDay,\r\n    setSelectedDateToToday,\r\n    setSelectedDayToNextDay\r\n} from 'src/app/store/companies';\r\n\r\ninterface DateSelectorContainerProps {\r\n}\r\n\r\nconst DateSelectorContainer: React.FunctionComponent<DateSelectorContainerProps> = () => {\r\n    const dateFrom = useSelector(selectSelectedDate);\r\n    const dispatch = useDispatch();\r\n    const dateChange = (value: Moment) => dispatch(setSelectedDate(value));\r\n    const next = () => dispatch(setSelectedDayToNextDay());\r\n    const previous = () => dispatch(setSelectedDateToPreviousDay());\r\n    const today = () => dispatch(setSelectedDateToToday());\r\n    return (\r\n        <KFlexRow flexWrap={isMobile}>\r\n            <Button color=\"accent\" onClick={today}>Today</Button>\r\n            <Button color=\"accent-dark\" onClick={previous}>\r\n                <i className=\"fa fa-chevron-left\"/>\r\n            </Button>\r\n            <Button color=\"accent-dark\" onClick={next}>\r\n                <i className=\"fa fa-chevron-right\"/>\r\n            </Button>\r\n            <KDateInput value={dateFrom} onChange={dateChange}/>\r\n        </KFlexRow>\r\n    )\r\n}\r\n\r\n\r\nexport default DateSelectorContainer;\r\n","import React from 'react';\r\nimport {Slot} from 'src/app/api/companies';\r\n\r\ninterface SlotButtonProps {\r\n    slot: Slot;\r\n    isSelected: boolean;\r\n    onClick: () => void;\r\n}\r\n\r\nconst SlotButton: React.FunctionComponent<SlotButtonProps> = (\r\n    {\r\n        slot,\r\n        isSelected,\r\n        onClick\r\n    }) => {\r\n    let className = 'slot-button bs-primary m-1';\r\n    if (isSelected) {\r\n        className += ' no-border bg-primary-gradient'\r\n    }\r\n    return (\r\n        <div className={className} onClick={() => onClick()}>\r\n            <div>{slot.title}</div>\r\n            <div hidden={!isSelected}>\r\n                Book Now\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SlotButton;\r\n","import React from 'react';\r\nimport {isMobile} from 'react-device-detect';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {Slot} from 'src/app/api/companies';\r\nimport SlotButton from 'src/app/modules/companies/slots/slot-button';\r\nimport {KFlexColumn, KFlexRow} from 'src/app/shared/components/flex';\r\nimport {stringToMoment} from 'src/app/shared/util/moment-helpers';\r\nimport {SlotDict} from 'src/app/store/companies';\r\n\r\ninterface SlotsViewProps {\r\n    isEmpty: boolean;\r\n    slots: SlotDict;\r\n    selectedSlotId: number | null;\r\n    onClick: (slot: Slot) => void;\r\n}\r\n\r\nconst SlotsView: React.FunctionComponent<SlotsViewProps> = (\r\n    {\r\n        isEmpty,\r\n        slots,\r\n        selectedSlotId,\r\n        onClick\r\n    }) => {\r\n    const slotComponents = (slots: Slot[]) => slots.map((slot) =>\r\n        <SlotButton slot={slot}\r\n                    key={slot.id}\r\n                    isSelected={slot.id === selectedSlotId}\r\n                    onClick={() => onClick(slot)}/>\r\n    );\r\n\r\n    return (\r\n        <KFlexRow justify={isMobile ? 'center' : 'between'}>\r\n            {slots && Object.keys(slots).map(key =>\r\n                <KFlexColumn key={key} className=\"text-center\">\r\n                    <h5>{stringToMoment(key).format('ddd DD/MM/YYYY')}</h5>\r\n                    {slotComponents(slots[key])}\r\n                </KFlexColumn>\r\n            )}\r\n            {isEmpty && <FormattedMessage id=\"COMPANY.NO-SLOTS\"/>}\r\n        </KFlexRow>\r\n    )\r\n}\r\n\r\n\r\nexport default SlotsView;\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Slot} from 'src/app/api/companies';\r\nimport {companiesUrls} from 'src/app/modules/companies/paths';\r\nimport SlotsView from 'src/app/modules/companies/slots/slots-view';\r\nimport {momentToIso} from 'src/app/shared/util/moment-helpers';\r\nimport {useKHistory} from 'src/app/shared/util/router-extensions';\r\nimport {\r\n    selectCompany,\r\n    selectSelectedServiceId,\r\n    selectSelectedSlotId,\r\n    selectSlots,\r\n    setSelectedSlotId\r\n} from 'src/app/store/companies';\r\n\r\ninterface SlotsContainerProps {\r\n}\r\n\r\nconst SlotsContainer: React.FunctionComponent<SlotsContainerProps> = () => {\r\n    const company = useSelector(selectCompany);\r\n    const serviceId = useSelector(selectSelectedServiceId);\r\n    const slots = useSelector(selectSlots);\r\n    const selectedSlotId = useSelector(selectSelectedSlotId);\r\n    const dispatch = useDispatch();\r\n    const useHistory = useKHistory();\r\n    const isEmpty = !slots || Object.keys(slots).length === 0;\r\n\r\n\r\n    const selectSlotOrAddToCart = (slot: Slot) => {\r\n        if (!serviceId) {\r\n            return;\r\n        }\r\n        if (slot.id !== selectedSlotId) {\r\n            dispatch(setSelectedSlotId(slot.id))\r\n            return;\r\n        }\r\n        if (company) {\r\n            useHistory.push(companiesUrls(company).book({start: momentToIso(slot.start), service: +serviceId}))\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <SlotsView isEmpty={isEmpty}\r\n                       slots={slots}\r\n                       selectedSlotId={selectedSlotId}\r\n                       onClick={selectSlotOrAddToCart}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default SlotsContainer;\r\n","import React from 'react';\r\nimport {Service} from 'src/app/api/services';\r\nimport DateSelectorContainer from 'src/app/modules/companies/date-selector/date-selector-container';\r\nimport SlotsContainer from 'src/app/modules/companies/slots/slots-container';\r\nimport KModal from 'src/app/shared/components/modal/k-modal';\r\n\r\ninterface SlotsForServiceModalProps {\r\n    service: Service | null | undefined;\r\n    onCancel: () => void;\r\n}\r\n\r\nconst SlotsForServiceModal: React.FunctionComponent<SlotsForServiceModalProps> = (\r\n    {\r\n        service,\r\n        onCancel\r\n    }) => {\r\n    return (\r\n        <KModal isOpen={!!service}\r\n                header={<DateSelectorContainer/>}\r\n                body={<SlotsContainer/>}\r\n                onCancel={onCancel}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport default SlotsForServiceModal;\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport CompaniesView from 'src/app/modules/companies/companies-view';\r\nimport SlotsForServiceModal from 'src/app/modules/companies/company-services/slots-for-service-modal';\r\nimport {selectCompany, selectService, setSelectedServiceId} from 'src/app/store/companies';\r\n\r\ninterface CompaniesMainProps {\r\n}\r\n\r\nconst CompaniesContainer: React.FunctionComponent<CompaniesMainProps>  = () => {\r\n    const dispatch = useDispatch();\r\n    const company = useSelector(selectCompany);\r\n    const service = useSelector(selectService);\r\n\r\n    const serviceClick = (id: number | null) => {\r\n        dispatch(setSelectedServiceId(id));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {company &&\r\n            <CompaniesView company={company} serviceClick={serviceClick}/>\r\n            }\r\n            <SlotsForServiceModal service={service} onCancel={() => serviceClick(null)}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default CompaniesContainer;\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Route, Switch, useParams, useRouteMatch} from 'react-router-dom';\r\nimport BookContainer from 'src/app/modules/companies/cart/book-container';\r\nimport CartContainer from 'src/app/modules/companies/cart/cart-container';\r\nimport CheckoutContainer from 'src/app/modules/companies/checkout/checkout-container';\r\nimport CompaniesContainer from 'src/app/modules/companies/companies-container';\r\nimport {ProtectedRoute} from 'src/app/shared/util/router-extensions';\r\nimport {companyDetailsRequest, selectCompany} from 'src/app/store/companies';\r\n\r\nconst CompaniesInnerRoutes: React.FunctionComponent = () => {\r\n    let {path} = useRouteMatch();\r\n    const {name} = useParams<{ name: string }>();\r\n    const company = useSelector(selectCompany);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (company?.name !== name) {\r\n            dispatch(companyDetailsRequest(name))\r\n        }\r\n    }, [dispatch, name, company])\r\n\r\n    return (\r\n        <Switch>\r\n            <ProtectedRoute path={`${path}/book`} component={BookContainer}/>\r\n            <ProtectedRoute path={`${path}/cart`} component={CartContainer}/>\r\n            <ProtectedRoute path={`${path}/checkout`} component={CheckoutContainer}/>\r\n            <Route path={`${path}/`} component={CompaniesContainer}/>\r\n        </Switch>\r\n    )\r\n}\r\n\r\nconst CompaniesRoutes: React.FunctionComponent = () => {\r\n    let {path} = useRouteMatch();\r\n    return (\r\n        <Switch>\r\n            <Route path={`${path}/:name`}>\r\n                <CompaniesInnerRoutes/>\r\n            </Route>\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default CompaniesRoutes;\r\n","import React from 'react';\r\nimport AsyncSelect from 'react-select/async';\r\nimport {Company} from 'src/app/api/companies';\r\nimport {KFlexRow} from 'src/app/shared/components/flex';\r\nimport {KPageContainer} from 'src/app/shared/components/primitives/containers';\r\n\r\n\r\ninterface HomeViewProps {\r\n    values: (value: string) => Promise<Company[]>,\r\n    onChange: (value: Company | null) => void;\r\n}\r\n\r\nconst HomeView: React.FunctionComponent<HomeViewProps> = (\r\n    {\r\n        values,\r\n        onChange\r\n    }) => {\r\n\r\n    const groupStyles = {\r\n        width: '400px',\r\n    };\r\n\r\n    return (\r\n        <KPageContainer>\r\n            <KFlexRow justify=\"center\">\r\n                <div style={groupStyles} className=\"company-shadow-1\">\r\n                    <AsyncSelect cacheOptions\r\n                                 defaultOptions\r\n                                 backspaceRemovesValue\r\n                                 getOptionValue={(option) => option.name}\r\n                                 getOptionLabel={(option) => option.name}\r\n                                 onChange={(value, bc) => onChange(value)}\r\n                                 loadOptions={values}/>\r\n                </div>\r\n            </KFlexRow>\r\n        </KPageContainer>\r\n    )\r\n}\r\n\r\nexport default HomeView;\r\n","import React, {useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {Company, companyClient} from 'src/app/api/companies';\r\nimport {selectCompany, selectOwnerId} from 'src/app/store/companies';\r\nimport HomeView from './home-view';\r\n\r\n\r\nconst HomeContainer: React.FunctionComponent = () => {\r\n    const history = useHistory();\r\n    const ownerId = useSelector(selectOwnerId);\r\n    const company = useSelector(selectCompany);\r\n\r\n    useEffect(() => {\r\n        if (company && ownerId) {\r\n            history.push(`/c/${company.name}`);\r\n        }\r\n        if (ownerId && !company) {\r\n            companyClient.detail(ownerId)\r\n                .then(company => history.push(`/c/${company.name}`))\r\n        }\r\n    }, [company, history, ownerId]);\r\n\r\n\r\n    const promiseOptions = (value: string) => companyClient.get({search: value})\r\n        .then(res => res.results);\r\n\r\n    const navigateToPage = (company: Company | null) => {\r\n        if (company) {\r\n            history.push(`/c/${company.name}`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!ownerId &&\r\n            <HomeView values={promiseOptions}\r\n                      onChange={navigateToPage}/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HomeContainer;\r\n","import EmployeeRoutes from 'src/app/modules/employee/employee-routes';\r\nimport {EMPLOYEE_ROUTES} from 'src/app/modules/employee/urls';\r\nimport React from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport AdminRoutes from 'src/app/modules/admin/admin-routes';\r\nimport {ADMIN_ROUTES} from 'src/app/modules/admin/urls';\r\nimport {AUTH_ROUTES} from 'src/app/modules/auth/urls';\r\nimport {USER_ROUTES} from 'src/app/modules/users/urls';\r\nimport UsersRoutes from 'src/app/modules/users/users-routes';\r\nimport AuthContainer from './modules/auth/auth-container';\r\nimport CompaniesRoutes from './modules/companies/companies-routes';\r\nimport HomeContainer from './modules/core/home/home-container';\r\nimport {ProtectedRoute} from './shared/util/router-extensions';\r\n\r\n\r\nconst AppRoutes: React.FunctionComponent = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path={AUTH_ROUTES.ROOT} component={AuthContainer}/>\r\n            <Route path=\"/c\" component={CompaniesRoutes}/>\r\n            <ProtectedRoute path={USER_ROUTES.ROOT} component={UsersRoutes}/>\r\n            <ProtectedRoute path={ADMIN_ROUTES.ROOT} component={AdminRoutes}/>\r\n            <ProtectedRoute path={EMPLOYEE_ROUTES.ROOT} component={EmployeeRoutes}/>\r\n            <Route path=\"/\" component={HomeContainer}/>\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default AppRoutes;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {IntlProvider} from 'react-intl';\r\n\r\nfunction loadLocaleData(locale: string) {\r\n    switch (locale) {\r\n        default:\r\n            return import('src/i18n/locale-data/en.json')\r\n    }\r\n}\r\n\r\nfunction flattenMessages(object: object, prefix: string = '') {\r\n    return Object.keys(object).reduce((messages, key) => {\r\n        // @ts-ignore\r\n        const value = object[key];\r\n       const prefixedKey = prefix ? `${prefix}.${key}` : key;\r\n       if (typeof value == 'string') {\r\n           // @ts-ignore\r\n           messages[prefixedKey] = value;\r\n       } else {\r\n           Object.assign(messages, flattenMessages(value, prefixedKey));\r\n       }\r\n       return messages;\r\n    }, {});\r\n}\r\n\r\ninterface AppItlProps {\r\n    language: string;\r\n    children: React.ReactChild | React.ReactChild[];\r\n}\r\n\r\nconst AppIntl: React.FunctionComponent<AppItlProps> = ({language, children}) => {\r\n    const [messages, setMessages] = useState({});\r\n    useEffect(() => {\r\n        loadLocaleData(language).then(m => {\r\n            const flattenedMessages = flattenMessages(m.default);\r\n            setMessages(flattenedMessages)\r\n            }\r\n        );\r\n    }, [language])\r\n    return (\r\n        <IntlProvider\r\n            messages={messages}\r\n            locale=\"en\"\r\n            defaultLocale=\"en\"\r\n        >\r\n            {children}\r\n        </IntlProvider>\r\n    )\r\n}\r\n\r\nexport default AppIntl;\r\n","import React from 'react';\nimport AppNavbarContainer from 'src/app/modules/core/navbar/app-navbar-container';\nimport AppRoutes from './app-routes';\nimport AppIntl from './AppIntl';\n\n\nfunction App() {\n    return (\n        <AppIntl language={'en'}>\n            <AppNavbarContainer/>\n            <AppRoutes/>\n        </AppIntl>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createBrowserHistory } from 'history';\r\n\r\n// Custom history component handles scroll position for back button, hashes,\r\n// and normal links\r\nconst browserHistory = createBrowserHistory();\r\nbrowserHistory.listen((location) => {\r\n    setTimeout(() => {\r\n        // @ts-ignore\r\n        if (location.action === 'POP') {\r\n            return;\r\n        }\r\n        const hash = window.location.hash;\r\n        if (hash) {\r\n            const element = document.getElementById(hash);\r\n            if (element) {\r\n                element.scrollIntoView({\r\n                    block: 'start',\r\n                    behavior: 'smooth'\r\n                });\r\n            }\r\n        } else {\r\n            window.scrollTo(0, 0);\r\n        }\r\n    });\r\n});\r\n\r\nexport default browserHistory;\r\n","import {AxiosInstance, AxiosRequestConfig} from 'axios';\nimport {authApi} from 'src/app/api/auth';\nimport {getToken, removeToken} from '../session-storage';\nimport {ApiBaseError} from '../api-errors';\n\n\nexport const setupAuthHandlers = (apiAxios: AxiosInstance) => {\n    const onRequestSuccess = (config: AxiosRequestConfig) => {\n        const token = getToken();\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config\n    }\n\n    const onResponseError = async (error: any) => {\n        let {status, headers, config, data} = error.response;\n\n        if (status === 401) {\n            if (config.url === 'auth/token/refresh/') {\n                removeToken();\n                return Promise.reject(error);\n            }\n            if (!config._retry) {\n                config._retry = true;\n                return authApi.refreshAccessToken(apiAxios)\n                    .then(access_token => {\n                        if (access_token) {\n                            apiAxios.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n                            return apiAxios(config);\n                        }\n                    });\n            }\n        }\n        // Create Api Validation Response\n        if (status === 422) {\n            return Promise.reject<ApiBaseError>({status, detail: data.detail});\n        }\n        const applicationError = headers['applicationError'];\n        if (applicationError) {\n            return Promise.reject(applicationError);\n        }\n        let modalStateErrors = '';\n        if (data && typeof data === 'object') {\n            for (const key in Object.keys(data)) {\n                if (data[key]) {\n                    if (key !== 'message' && key !== 'detail') {\n                        modalStateErrors += `${key}:`;\n                    }\n                    modalStateErrors += `${data[key]}\\n`;\n                }\n            }\n        }\n        return Promise.reject(modalStateErrors || data || 'Server Error');\n    }\n\n    apiAxios.interceptors.request.use(onRequestSuccess, error => Promise.reject(error));\n    apiAxios.interceptors.response.use((response) => response, onResponseError);\n}\n\n\n","import {Elements} from '@stripe/react-stripe-js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport {configureStripe} from 'src/app/external-apis/configure-stripe';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Router} from 'react-router-dom';\nimport history from './app/shared/util/history';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {configureBaseApi} from './app/api/common/clients/base-api';\nimport AuthAutoLogin from 'src/app/shared/context-providers/auth-auto-login';\n\nconfigureBaseApi();\nconst stripePromise = configureStripe();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router history={history}>\n            <Provider store={store}>\n                <AuthAutoLogin>\n                    <Elements stripe={stripePromise}>\n                        <App/>\n                    </Elements>\n                </AuthAutoLogin>\n            </Provider>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {loadStripe} from '@stripe/stripe-js';\r\n\r\nconst stripe_pk = process.env.REACT_APP_STRIPE_PK || '';\r\n\r\nexport const configureStripe = () => loadStripe(stripe_pk);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideItem\":\"employee-panel_sideItem__27SCO\",\"panelItem\":\"employee-panel_panelItem__2xHbQ\",\"middleItem\":\"employee-panel_middleItem__1Wksg\",\"unavailableSlot\":\"employee-panel_unavailableSlot__1bnht\",\"borderRight\":\"employee-panel_borderRight__26aL1\",\"panelEvent\":\"employee-panel_panelEvent__3i_w_\",\"currentTimeLine\":\"employee-panel_currentTimeLine__3AW-1\"};"],"sourceRoot":""}